{"version":3,"file":"blocklist.js","sourceRoot":"","sources":["../../../../../src/scraper/WebScraper/utils/blocklist.ts"],"names":[],"mappings":"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","sourcesContent":["import { configDotenv } from \"dotenv\";\nimport crypto from \"crypto\";\nimport { parse } from \"tldts\";\nimport { TeamFlags } from \"../../../controllers/v1/types\";\n\nconfigDotenv();\n\nconst hashKey = Buffer.from(process.env.HASH_KEY || \"\", \"utf-8\");\nconst algorithm = \"aes-256-ecb\";\n\nexport function encryptAES(plaintext: string, key: Buffer): string {\n  const cipher = crypto.createCipheriv(algorithm, key, null);\n  const encrypted = Buffer.concat([\n    cipher.update(plaintext, \"utf-8\"),\n    cipher.final(),\n  ]);\n  return encrypted.toString(\"base64\");\n}\n\nexport function decryptAES(ciphertext: string, key: Buffer): string {\n  const decipher = crypto.createDecipheriv(algorithm, key, null);\n  const decrypted = Buffer.concat([\n    decipher.update(Buffer.from(ciphertext, \"base64\")),\n    decipher.final(),\n  ]);\n  return decrypted.toString(\"utf-8\");\n}\n\nconst urlBlocklist = [\n  \"h8ngAFXUNLO3ZqQufJjGVA==\",\n  \"fEGiDm/TWDBkXUXejFVICg==\",\n  \"l6Mei7IGbEmTTFoSudUnqQ==\",\n  \"4OjallJzXRiZUAWDiC2Xww==\",\n  \"ReSvkSfx34TNEdecmmSDdQ==\",\n  \"X1E4WtdmXAv3SAX9xN925Q==\",\n  \"VTzBQfMtXZzM05mnNkWkjA==\",\n  \"m/q4Lb2Z8cxwU7/CoztOFg==\",\n  \"UbVnmRaeG+gKcyVDLAm0vg==\",\n  \"xNQhczYG22tTVc6lYE3qwg==\",\n  \"CQfGDydbg4l1swRCru6O6Q==\",\n  \"l86LQxm2NonTWMauXwEsPw==\",\n  \"6v4QDUcwjnID80G+uU+tgw==\",\n  \"pCF/6nrKZAxaYntzEGluZQ==\",\n  \"r0CRhAmQqSe7V2s3073T00sAh4WcS5779jwuGJ26ows==\",\n  \"aBOVqRFBM4UVg33usY10NdiF0HCnFH/ImtD0n+zIpc8==\",\n  \"QV436UZuQ6D0Dqrx9MwaGw==\",\n  \"OYVvrwILYbzA2mSSqOPPpw==\",\n  \"xW2i4C0Dzcnp+qu12u0SAw==\",\n  \"OLHba209l0dfl0MI4EnQonBITK9z8Qwgd/NsuaTkXmA=\",\n  \"X0VynmNjpL3PrYxpUIG7sFMBt8OlrmQWtxj8oXVu2QM=\",\n  \"ObdlM5NEkvBJ/sojRW5K/Q==\",\n  \"C8Th38X0SjsE1vL/OsD8bA==\",\n  \"PTbGg8PK/h0Seyw4HEpK4Q==\",\n  \"lZdQMknjHb7+4+sjF3qNTw==\",\n  \"LsgSq54q5oDysbva29JxnQ==\",\n  \"KZfBtpwjOpdSoqacRbz7og==\",\n  \"Indtl4yxJMHCKBGF4KABCQ==\",\n  \"e3HFXLVgxhaVoadYpwb2BA==\",\n  \"b+asgLayXQ5Jq+se+q56jA==\",\n  \"86ZDUI7vmp4MvNq3fvZrGQ==\",\n  \"sEGFoYZ6GEg4Zocd+TiyfQ==\",\n  \"6OOL72eXthgnJ1Hj4PfOQQ==\",\n  \"g/ME+Sh1CAFboKrwkVb+5Q==\",\n  \"Pw+xawUoX8xBYbX2yqqGWQ==\",\n  \"k6vBalxYFhAvkPsF19t9gQ==\",\n  \"b+asgLayXQ5Jq+se+q56jA==\",\n  \"KKttwRz4w+AMJrZcB828WQ==\",\n  \"vMdzZ33BXoyWVZnAPOBcrg==\",\n  \"l8GDVI8w/ueHnNzdN1ODuQ==\",\n  \"+yz9bnYYMnC0trJZGJwf6Q==\",\n  \"oTdhIjEjqdT2pEvyxD1Ssg==\",\n]\n\nconst allowedKeywords = [\n  \"pulse\",\n  \"privacy\",\n  \"terms\",\n  \"policy\",\n  \"user-agreement\",\n  \"legal\",\n  \"help\",\n  \"policies\",\n  \"support\",\n  \"contact\",\n  \"about\",\n  \"careers\",\n  \"blog\",\n  \"press\",\n  \"conditions\",\n  \"tos\",\n  \"://library.tiktok.com\",\n  \"://ads.tiktok.com\",\n  \"://tiktok.com/business\",\n  \"://developers.facebook.com\",\n  \"://facebook.com/ads/library\",\n  \"://www.facebook.com/ads/library\",\n];\n\nexport function decryptedBlocklist(list: string[]): string[] {\n  return hashKey.length > 0\n    ? list.map((ciphertext) => decryptAES(ciphertext, hashKey))\n    : [];\n}\n\nexport function isUrlBlocked(url: string, flags: TeamFlags): boolean {\n  const lowerCaseUrl = url.trim().toLowerCase();\n  \n  let blockedlist = decryptedBlocklist(urlBlocklist);\n\n  if (flags?.unblockedDomains) {\n    blockedlist = blockedlist.filter((blocked) => !flags.unblockedDomains!.includes(blocked));\n  }\n\n  const decryptedUrl =\n    blockedlist.find((decrypted) => lowerCaseUrl === decrypted) ||\n    lowerCaseUrl;\n\n  // If the URL is empty or invalid, return false\n  let parsedUrl: any;\n  try {\n    parsedUrl = parse(decryptedUrl);\n  } catch {\n    console.log(\"Error parsing URL:\", url);\n    return false;\n  }\n\n  const domain = parsedUrl.domain;\n  const publicSuffix = parsedUrl.publicSuffix;\n\n  if (!domain) {\n    return false;\n  }\n\n  // Check if URL contains any allowed keyword\n  if (\n    allowedKeywords.some((keyword) =>\n      lowerCaseUrl.includes(keyword.toLowerCase()),\n    )\n  ) {\n    return false;\n  }\n\n  // Block exact matches\n  if (blockedlist.includes(domain)) {\n    return true;\n  }\n\n  // Block subdomains\n  if (blockedlist.some((blocked) => domain.endsWith(`.${blocked}`))) {\n    return true;\n  }\n\n  // Block different TLDs of the same base domain\n  const baseDomain = domain.split(\".\")[0]; // Extract the base domain (e.g., \"facebook\" from \"facebook.com\")\n  if (\n    publicSuffix &&\n    blockedlist.some(\n      (blocked) => blocked.startsWith(baseDomain + \".\") && blocked !== domain,\n    )\n  ) {\n    return true;\n  }\n\n  return false;\n}"]}