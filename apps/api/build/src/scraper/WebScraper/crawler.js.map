{"version":3,"file":"crawler.js","sourceRoot":"","sources":["../../../../src/scraper/WebScraper/crawler.ts"],"names":[],"mappings":"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","sourcesContent":["import axios, { AxiosError } from \"axios\";\nimport { load } from \"cheerio\"; // rustified\nimport { URL } from \"url\";\nimport { getLinksFromSitemap } from \"./sitemap\";\nimport robotsParser, { Robot } from \"robots-parser\";\nimport { getURLDepth } from \"./utils/maxDepthUtils\";\nimport { axiosTimeout } from \"../../lib/timeout\";\nimport { logger as _logger } from \"../../lib/logger\";\nimport https from \"https\";\nimport { redisEvictConnection } from \"../../services/redis\";\nimport { extractLinks } from \"../../lib/html-transformer\";\nimport { TimeoutSignal } from \"../../controllers/v1/types\";\n\nexport interface FilterResult {\n  allowed: boolean;\n  url?: string;\n  denialReason?: string;\n}\n\nexport enum DenialReason {\n  DEPTH_LIMIT = \"URL exceeds maximum crawl depth\",\n  EXCLUDE_PATTERN = \"URL matches exclude pattern\",\n  INCLUDE_PATTERN = \"URL does not match required include pattern\",\n  ROBOTS_TXT = \"URL blocked by robots.txt\",\n  FILE_TYPE = \"URL points to a file type that is not crawled\",\n  URL_PARSE_ERROR = \"URL could not be parsed\",\n  BACKWARD_CRAWLING = \"URL not allowed due to backward crawling restrictions\",\n  SOCIAL_MEDIA = \"URL is a social media or email link\",\n  EXTERNAL_LINK = \"External URL not allowed\",\n  SECTION_LINK = \"URL contains section anchor (#)\"\n}\n\nexport interface FilterLinksResult {\n  links: string[];\n  denialReasons: Map<string, string>;\n}\nexport class WebCrawler {\n  private jobId: string;\n  private initialUrl: string;\n  private baseUrl: string;\n  private includes: string[];\n  private excludes: string[];\n  private maxCrawledLinks: number;\n  private maxCrawledDepth: number;\n  private visited: Set<string> = new Set();\n  private crawledUrls: Map<string, string> = new Map();\n  private limit: number;\n  private robotsTxtUrl: string;\n  public robots: Robot;\n  private robotsCrawlDelay: number | null = null;\n  private generateImgAltText: boolean;\n  private allowBackwardCrawling: boolean;\n  private allowExternalContentLinks: boolean;\n  private allowSubdomains: boolean;\n  private ignoreRobotsTxt: boolean;\n  private regexOnFullURL: boolean;\n  private logger: typeof _logger;\n  private sitemapsHit: Set<string> = new Set();\n  private maxDiscoveryDepth: number | undefined;\n  private currentDiscoveryDepth: number;\n  private zeroDataRetention: boolean;\n\n  constructor({\n    jobId,\n    initialUrl,\n    baseUrl,\n    includes,\n    excludes,\n    maxCrawledLinks = 10000,\n    limit = 10000,\n    generateImgAltText = false,\n    maxCrawledDepth = 10,\n    allowBackwardCrawling = false,\n    allowExternalContentLinks = false,\n    allowSubdomains = false,\n    ignoreRobotsTxt = false,\n    regexOnFullURL = false,\n    maxDiscoveryDepth,\n    currentDiscoveryDepth,\n    zeroDataRetention,\n  }: {\n    jobId: string;\n    initialUrl: string;\n    baseUrl?: string;\n    includes?: string[];\n    excludes?: string[];\n    maxCrawledLinks?: number;\n    limit?: number;\n    generateImgAltText?: boolean;\n    maxCrawledDepth?: number;\n    allowBackwardCrawling?: boolean;\n    allowExternalContentLinks?: boolean;\n    allowSubdomains?: boolean;\n    ignoreRobotsTxt?: boolean;\n    regexOnFullURL?: boolean;\n    maxDiscoveryDepth?: number;\n    currentDiscoveryDepth?: number;\n    zeroDataRetention?: boolean;\n  }) {\n    this.jobId = jobId;\n    this.initialUrl = initialUrl;\n    this.baseUrl = baseUrl ?? new URL(initialUrl).origin;\n    this.includes = Array.isArray(includes) ? includes : [];\n    this.excludes = Array.isArray(excludes) ? excludes : [];\n    this.limit = limit;\n    this.robotsTxtUrl = `${this.baseUrl}${this.baseUrl.endsWith(\"/\") ? \"\" : \"/\"}robots.txt`;\n    this.robots = robotsParser(this.robotsTxtUrl, \"\");\n    // Deprecated, use limit instead\n    this.maxCrawledLinks = maxCrawledLinks ?? limit;\n    this.maxCrawledDepth = maxCrawledDepth ?? 10;\n    this.generateImgAltText = generateImgAltText ?? false;\n    this.allowBackwardCrawling = allowBackwardCrawling ?? false;\n    this.allowExternalContentLinks = allowExternalContentLinks ?? false;\n    this.allowSubdomains = allowSubdomains ?? false;\n    this.ignoreRobotsTxt = ignoreRobotsTxt ?? false;\n    this.regexOnFullURL = regexOnFullURL ?? false;\n    this.zeroDataRetention = zeroDataRetention ?? false;\n    this.logger = _logger.child({ crawlId: this.jobId, module: \"WebCrawler\", zeroDataRetention: this.zeroDataRetention });\n    this.maxDiscoveryDepth = maxDiscoveryDepth;\n    this.currentDiscoveryDepth = currentDiscoveryDepth ?? 0;\n  }\n\n  public filterLinks(\n    sitemapLinks: string[],\n    limit: number,\n    maxDepth: number,\n    fromMap: boolean = false,\n  ): FilterLinksResult {\n    const denialReasons = new Map<string, string>();\n\n    if (this.currentDiscoveryDepth === this.maxDiscoveryDepth) {\n      this.logger.debug(\"Max discovery depth hit, filtering off all links\", { currentDiscoveryDepth: this.currentDiscoveryDepth, maxDiscoveryDepth: this.maxDiscoveryDepth });\n      sitemapLinks.forEach(link => {\n        denialReasons.set(link, \"Maximum discovery depth reached\");\n      });\n      return { links: [], denialReasons };\n    }\n\n    // If the initial URL is a sitemap.xml, skip filtering\n    if (this.initialUrl.endsWith(\"sitemap.xml\") && fromMap) {\n      return { links: sitemapLinks.slice(0, limit), denialReasons };\n    }\n\n    const filteredLinks = sitemapLinks\n      .filter((link) => {\n        let url: URL;\n        try {\n          url = new URL(link.trim(), this.baseUrl);\n        } catch (error) {\n          this.logger.debug(`Error processing link: ${link}`, {\n            link,\n            error,\n            method: \"filterLinks\",\n          });\n          return false;\n        }\n        const path = url.pathname;\n\n        const depth = getURLDepth(url.toString());\n\n        // Check if the link exceeds the maximum depth allowed\n        if (depth > maxDepth) {\n          if (process.env.FIRECRAWL_DEBUG_FILTER_LINKS) {\n            this.logger.debug(`${link} DEPTH FAIL`);\n          }\n          denialReasons.set(link, DenialReason.DEPTH_LIMIT);\n          return false;\n        }\n\n        const excincPath = this.regexOnFullURL ? link : path;\n\n        // Check if the link should be excluded\n        if (this.excludes.length > 0 && this.excludes[0] !== \"\") {\n          if (\n            this.excludes.some((excludePattern) =>\n              new RegExp(excludePattern).test(excincPath),\n            )\n          ) {\n            if (process.env.FIRECRAWL_DEBUG_FILTER_LINKS) {\n              this.logger.debug(`${link} EXCLUDE FAIL`);\n            }\n            denialReasons.set(link, DenialReason.EXCLUDE_PATTERN);\n            return false;\n          }\n        }\n\n        // Check if the link matches the include patterns, if any are specified\n        if (this.includes.length > 0 && this.includes[0] !== \"\") {\n          if (\n            !this.includes.some((includePattern) =>\n              new RegExp(includePattern).test(excincPath),\n            )\n          ) {\n            if (process.env.FIRECRAWL_DEBUG_FILTER_LINKS) {\n              this.logger.debug(`${link} INCLUDE FAIL`);\n            }\n            denialReasons.set(link, DenialReason.INCLUDE_PATTERN);\n            return false;\n          }\n        }\n\n        // Normalize the initial URL and the link to account for www and non-www versions\n        const normalizedInitialUrl = new URL(this.initialUrl);\n        let normalizedLink;\n        try {\n          normalizedLink = new URL(link);\n        } catch (_) {\n          if (process.env.FIRECRAWL_DEBUG_FILTER_LINKS) {\n            this.logger.debug(`${link} URL PARSE FAIL`);\n          }\n          return false;\n        }\n        const initialHostname = normalizedInitialUrl.hostname.replace(\n          /^www\\./,\n          \"\",\n        );\n        const linkHostname = normalizedLink.hostname.replace(/^www\\./, \"\");\n\n        // Ensure the protocol and hostname match, and the path starts with the initial URL's path\n        // commented to able to handling external link on allowExternalContentLinks\n        // if (linkHostname !== initialHostname) {\n        //   return false;\n        // }\n\n        if (!this.allowBackwardCrawling) {\n          if (\n            !normalizedLink.pathname.startsWith(normalizedInitialUrl.pathname)\n          ) {\n            if (process.env.FIRECRAWL_DEBUG_FILTER_LINKS) {\n              this.logger.debug(`${link} BACKWARDS FAIL ${normalizedLink.pathname} ${normalizedInitialUrl.pathname}`);\n            }\n            denialReasons.set(link, DenialReason.BACKWARD_CRAWLING);\n            return false;\n          }\n        }\n\n        const isAllowed = this.ignoreRobotsTxt\n          ? true\n          : ((this.robots.isAllowed(link, \"FireCrawlAgent\") || this.robots.isAllowed(link, \"FirecrawlAgent\")) ?? true);\n        // Check if the link is disallowed by robots.txt\n        if (!isAllowed) {\n          this.logger.debug(`Link disallowed by robots.txt: ${link}`, {\n            method: \"filterLinks\",\n            link,\n          });\n          if (process.env.FIRECRAWL_DEBUG_FILTER_LINKS) {\n            this.logger.debug(`${link} ROBOTS FAIL`);\n          }\n          denialReasons.set(link, DenialReason.ROBOTS_TXT);\n          return false;\n        }\n\n        if (this.isFile(link)) {\n          if (process.env.FIRECRAWL_DEBUG_FILTER_LINKS) {\n            this.logger.debug(`${link} FILE FAIL`);\n          }\n          denialReasons.set(link, DenialReason.FILE_TYPE);\n          return false;\n        }\n\n        if (process.env.FIRECRAWL_DEBUG_FILTER_LINKS) {\n          this.logger.debug(`${link} OK`);\n        }\n        return true;\n      })\n      .slice(0, limit);\n\n    return { links: filteredLinks, denialReasons };\n  }\n\n  public async getRobotsTxt(skipTlsVerification = false, abort?: AbortSignal): Promise<string> {\n    let extraArgs = {};\n    if (skipTlsVerification) {\n      extraArgs[\"httpsAgent\"] = new https.Agent({\n        rejectUnauthorized: false,\n      });\n    }\n    const response = await axios.get(this.robotsTxtUrl, {\n      timeout: axiosTimeout,\n      signal: abort,\n      ...extraArgs,\n    });\n    return response.data;\n  }\n\n  public importRobotsTxt(txt: string) {\n    this.robots = robotsParser(this.robotsTxtUrl, txt);\n    const delay = this.robots.getCrawlDelay(\"FireCrawlAgent\") || this.robots.getCrawlDelay(\"FirecrawlAgent\");\n    this.robotsCrawlDelay = delay !== undefined ? delay : null;\n  }\n  \n  public getRobotsCrawlDelay(): number | null {\n    return this.robotsCrawlDelay;\n  }\n\n  public async tryGetSitemap(\n    urlsHandler: (urls: string[]) => unknown,\n    fromMap: boolean = false,\n    onlySitemap: boolean = false,\n    timeout: number = 120000,\n    abort?: AbortSignal,\n    mock?: string,\n  ): Promise<number> {\n    this.logger.debug(`Fetching sitemap links from ${this.initialUrl}`, {\n      method: \"tryGetSitemap\",\n    });\n    let leftOfLimit = this.limit;\n\n    const normalizeUrl = (url: string) => {\n      url = url.replace(/^https?:\\/\\//, \"\").replace(/^www\\./, \"\");\n      if (url.endsWith(\"/\")) {\n        url = url.slice(0, -1);\n      }\n      return url;\n    };\n\n    const _urlsHandler = async (urls: string[]) => {\n      if (fromMap && onlySitemap) {\n        return await urlsHandler(urls);\n      } else {\n        let filteredLinksResult = this.filterLinks(\n          [...new Set(urls)].filter(x => this.filterURL(x, this.initialUrl).allowed),\n          leftOfLimit,\n          this.maxCrawledDepth,\n          fromMap,\n        );\n        let filteredLinks = filteredLinksResult.links;\n        leftOfLimit -= filteredLinks.length;\n        let uniqueURLs: string[] = [];\n        for (const url of filteredLinks) {\n          if (\n            await redisEvictConnection.sadd(\n              \"sitemap:\" + this.jobId + \":links\",\n              normalizeUrl(url),\n            )\n          ) {\n            uniqueURLs.push(url);\n          }\n        }\n\n        await redisEvictConnection.expire(\n          \"sitemap:\" + this.jobId + \":links\",\n          3600,\n          \"NX\",\n        );\n        if (uniqueURLs.length > 0) {\n          return await urlsHandler(uniqueURLs);\n        }\n      }\n    };\n\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error(\"Sitemap fetch timeout\")), timeout);\n    });\n\n    // Allow sitemaps to be cached for 48 hours if they are requested from /map\n    // - mogery\n    const maxAge = (fromMap && !onlySitemap) ? 48 * 60 * 60 * 1000 : 0;\n\n    try {\n      let count = (await Promise.race([\n        Promise.all([\n          this.tryFetchSitemapLinks(this.initialUrl, _urlsHandler, abort, mock, maxAge),\n          ...this.robots\n            .getSitemaps()\n            .map((x) => this.tryFetchSitemapLinks(x, _urlsHandler, abort, mock, maxAge)),\n        ]).then((results) => results.reduce((a, x) => a + x, 0)),\n        timeoutPromise,\n      ])) as number;\n\n      if (count > 0) {\n        if (\n          await redisEvictConnection.sadd(\n            \"sitemap:\" + this.jobId + \":links\",\n            normalizeUrl(this.initialUrl),\n          )\n        ) {\n          urlsHandler([this.initialUrl]);\n        }\n        count++;\n      }\n\n      await redisEvictConnection.expire(\n        \"sitemap:\" + this.jobId + \":links\",\n        3600,\n        \"NX\",\n      );\n\n      return count;\n    } catch (error) {\n      if (error.message === \"Sitemap fetch timeout\") {\n        this.logger.warn(\"Sitemap fetch timed out\", {\n          method: \"tryGetSitemap\",\n          timeout,\n        });\n        return 0;\n      }\n      this.logger.error(\"Error fetching sitemap\", {\n        method: \"tryGetSitemap\",\n        error,\n      });\n      return 0;\n    }\n  }\n\n  public filterURL(href: string, url: string): FilterResult {\n    let fullUrl = href;\n    if (!href.startsWith(\"http\")) {\n      try {\n        fullUrl = new URL(href, url).toString();\n      } catch (_) {\n        return { allowed: false, denialReason: DenialReason.URL_PARSE_ERROR };\n      }\n    }\n    let urlObj;\n    try {\n      urlObj = new URL(fullUrl);\n    } catch (_) {\n      return { allowed: false, denialReason: DenialReason.URL_PARSE_ERROR };\n    }\n    const path = urlObj.pathname;\n\n    if (this.isInternalLink(fullUrl)) {\n      // INTERNAL LINKS\n      if (!this.noSections(fullUrl)) {\n        return { allowed: false, denialReason: DenialReason.SECTION_LINK };\n      }\n      \n      if (this.matchesExcludes(path)) {\n        return { allowed: false, denialReason: DenialReason.EXCLUDE_PATTERN };\n      }\n      \n      if (!this.isRobotsAllowed(fullUrl, this.ignoreRobotsTxt)) {\n        (async () => {\n          await redisEvictConnection.sadd(\n            \"crawl:\" + this.jobId + \":robots_blocked\",\n            fullUrl,\n          );\n          await redisEvictConnection.expire(\n            \"crawl:\" + this.jobId + \":robots_blocked\",\n            24 * 60 * 60,\n          );\n        })();\n        return { allowed: false, denialReason: DenialReason.ROBOTS_TXT };\n      }\n      \n      return { allowed: true, url: fullUrl };\n    } else {\n      // EXTERNAL LINKS\n      if (this.isSocialMediaOrEmail(fullUrl)) {\n        return { allowed: false, denialReason: DenialReason.SOCIAL_MEDIA };\n      }\n      \n      if (this.matchesExcludes(fullUrl, true)) {\n        return { allowed: false, denialReason: DenialReason.EXCLUDE_PATTERN };\n      }\n      \n      if (\n        this.isInternalLink(url) &&\n        this.allowExternalContentLinks &&\n        !this.isExternalMainPage(fullUrl)\n      ) {\n        return { allowed: true, url: fullUrl };\n      }\n      \n      if (\n        this.allowSubdomains &&\n        !this.isSocialMediaOrEmail(fullUrl) &&\n        this.isSubdomain(fullUrl)\n      ) {\n        return { allowed: true, url: fullUrl };\n      }\n      \n      return { allowed: false, denialReason: DenialReason.EXTERNAL_LINK };\n    }\n  }\n\n  private async extractLinksFromHTMLRust(html: string, url: string) {\n    const links = await extractLinks(html);\n    const filteredLinks: string[] = [];\n    for (const link of links) {\n      const filterResult = this.filterURL(link, url);\n      if (filterResult.allowed && filterResult.url) {\n        filteredLinks.push(filterResult.url);\n      }\n    }\n    return filteredLinks;\n  }\n\n  private extractLinksFromHTMLCheerio(html: string, url: string) {\n    let links: string[] = [];\n\n    const $ = load(html);\n    $(\"a\").each((_, element) => {\n      let href = $(element).attr(\"href\");\n      if (href) {\n        if (href.match(/^https?:\\/[^\\/]/)) {\n          href = href.replace(/^https?:\\//, \"$&/\");\n        }\n        const filterResult = this.filterURL(href, url);\n        if (filterResult.allowed && filterResult.url) {\n          links.push(filterResult.url);\n        }\n      }\n    });\n\n    // Extract links from iframes with inline src\n    $(\"iframe\").each((_, element) => {\n      const src = $(element).attr(\"src\");\n      if (src && src.startsWith(\"data:text/html\")) {\n        const iframeHtml = decodeURIComponent(src.split(\",\")[1]);\n        const iframeLinks = this.extractLinksFromHTMLCheerio(iframeHtml, url);\n        links = links.concat(iframeLinks);\n      }\n    });\n\n    return links;\n  }\n\n  public async extractLinksFromHTML(html: string, url: string) {\n    try {\n      return [...new Set((await this.extractLinksFromHTMLRust(html, url)).map(x => {\n        try {\n          return new URL(x, url).href\n        } catch (e) {\n          return null;\n        }\n      }).filter(x => x !== null) as string[])];\n    } catch (error) {\n      this.logger.warn(\"Failed to call html-transformer! Falling back to cheerio...\", {\n        error,\n        module: \"scrapeURL\", method: \"extractMetadata\"\n      });\n    }\n\n    return this.extractLinksFromHTMLCheerio(html, url);\n  }\n\n  private isRobotsAllowed(\n    url: string,\n    ignoreRobotsTxt: boolean = false,\n  ): boolean {\n    return ignoreRobotsTxt\n      ? true\n      : this.robots\n        ? ((this.robots.isAllowed(url, \"FireCrawlAgent\") || this.robots.isAllowed(url, \"FirecrawlAgent\")) ?? true)\n        : true;\n  }\n\n  private matchesExcludes(url: string, onlyDomains: boolean = false): boolean {\n    return this.excludes.some((pattern) => {\n      if (onlyDomains) return this.matchesExcludesExternalDomains(url);\n\n      return this.excludes.some((pattern) => new RegExp(pattern).test(url));\n    });\n  }\n\n  // supported formats: \"example.com/blog\", \"https://example.com\", \"blog.example.com\", \"example.com\"\n  private matchesExcludesExternalDomains(url: string) {\n    try {\n      const urlObj = new URL(url);\n      const hostname = urlObj.hostname;\n      const pathname = urlObj.pathname;\n\n      for (let domain of this.excludes) {\n        let domainObj = new URL(\"http://\" + domain.replace(/^https?:\\/\\//, \"\"));\n        let domainHostname = domainObj.hostname;\n        let domainPathname = domainObj.pathname;\n\n        if (\n          hostname === domainHostname ||\n          hostname.endsWith(`.${domainHostname}`)\n        ) {\n          if (pathname.startsWith(domainPathname)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  private isExternalMainPage(url: string): boolean {\n    return !Boolean(\n      url\n        .split(\"/\")\n        .slice(3)\n        .filter((subArray) => subArray.length > 0).length,\n    );\n  }\n\n  private noSections(link: string): boolean {\n    return !link.includes(\"#\");\n  }\n\n  private isInternalLink(link: string): boolean {\n    const urlObj = new URL(link, this.baseUrl);\n    const baseDomain = new URL(this.baseUrl).hostname\n      .replace(/^www\\./, \"\")\n      .trim();\n    const linkDomain = urlObj.hostname.replace(/^www\\./, \"\").trim();\n\n    return linkDomain === baseDomain;\n  }\n\n  private isSubdomain(link: string): boolean {\n    return new URL(link, this.baseUrl).hostname.endsWith(\n      \".\" + new URL(this.baseUrl).hostname.split(\".\").slice(-2).join(\".\"),\n    );\n  }\n\n  public isFile(url: string): boolean {\n    const fileExtensions = [\n      \".png\",\n      \".jpg\",\n      \".jpeg\",\n      \".gif\",\n      \".css\",\n      \".js\",\n      \".ico\",\n      \".svg\",\n      \".tiff\",\n      // \".pdf\",\n      \".zip\",\n      \".exe\",\n      \".dmg\",\n      \".mp4\",\n      \".mp3\",\n      \".wav\",\n      \".pptx\",\n      // \".docx\",\n      \".xlsx\",\n      // \".xml\",\n      \".avi\",\n      \".flv\",\n      \".woff\",\n      \".ttf\",\n      \".woff2\",\n      \".webp\",\n      \".inc\",\n    ];\n\n    try {\n      const urlWithoutQuery = url.split(\"?\")[0].toLowerCase();\n      return fileExtensions.some((ext) => urlWithoutQuery.endsWith(ext));\n    } catch (error) {\n      this.logger.error(`Error processing URL in isFile`, {\n        method: \"isFile\",\n        error,\n      });\n      return false;\n    }\n  }\n\n  private isSocialMediaOrEmail(url: string): boolean {\n    const socialMediaOrEmail = [\n      \"facebook.com\",\n      \"twitter.com\",\n      \"linkedin.com\",\n      \"instagram.com\",\n      \"pinterest.com\",\n      \"mailto:\",\n      \"github.com\",\n      \"calendly.com\",\n      \"discord.gg\",\n      \"discord.com\",\n    ];\n    return socialMediaOrEmail.some((ext) => url.includes(ext));\n  }\n\n  private async tryFetchSitemapLinks(\n    url: string,\n    urlsHandler: (urls: string[]) => unknown,\n    abort?: AbortSignal,\n    mock?: string,\n    maxAge?: number,\n  ): Promise<number> {\n    const sitemapUrl = url.endsWith(\".xml\")\n      ? url\n      : `${url}${url.endsWith(\"/\") ? \"\" : \"/\"}sitemap.xml`;\n\n    let sitemapCount: number = 0;\n\n    // Try to get sitemap from the provided URL first\n    try {\n      sitemapCount = await getLinksFromSitemap(\n        { sitemapUrl, urlsHandler, mode: \"fire-engine\", maxAge, zeroDataRetention: this.zeroDataRetention },\n        this.logger,\n        this.jobId,\n        this.sitemapsHit,\n        abort,\n        mock,\n      );\n    } catch (error) {\n      if (error instanceof TimeoutSignal) {\n        throw error;\n      } else {\n        this.logger.debug(`Failed to fetch sitemap from ${sitemapUrl}`, {\n          method: \"tryFetchSitemapLinks\",\n          sitemapUrl,\n          error,\n        });\n      }\n    }\n\n    // If this is a subdomain, also try to get sitemap from the main domain\n    try {\n      const urlObj = new URL(url);\n      const hostname = urlObj.hostname;\n      const domainParts = hostname.split(\".\");\n\n      // Check if this is a subdomain (has more than 2 parts and not www)\n      if (domainParts.length > 2 && domainParts[0] !== \"www\") {\n        // Get the main domain by taking the last two parts\n        const mainDomain = domainParts.slice(-2).join(\".\");\n        const mainDomainUrl = `${urlObj.protocol}//${mainDomain}`;\n        const mainDomainSitemapUrl = `${mainDomainUrl}/sitemap.xml`;\n\n        try {\n          // Get all links from the main domain's sitemap\n          sitemapCount += await getLinksFromSitemap(\n            {\n              sitemapUrl: mainDomainSitemapUrl,\n              urlsHandler(urls) {\n                return urlsHandler(\n                  urls.filter((link) => {\n                    try {\n                      const linkUrl = new URL(link);\n                      return linkUrl.hostname.endsWith(hostname);\n                    } catch {}\n                  }),\n                );\n              },\n              mode: \"fire-engine\",\n              maxAge,\n              zeroDataRetention: this.zeroDataRetention,\n            },\n            this.logger,\n            this.jobId,\n            this.sitemapsHit,\n            abort,\n            mock,\n          );\n        } catch (error) {\n          if (error instanceof TimeoutSignal) {\n            throw error;\n          } else {\n            this.logger.debug(\n              `Failed to fetch main domain sitemap from ${mainDomainSitemapUrl}`,\n              { method: \"tryFetchSitemapLinks\", mainDomainSitemapUrl, error },\n            );\n          }\n        }\n      }\n    } catch (error) {\n      if (error instanceof TimeoutSignal) {\n        throw error;\n      } else {\n        this.logger.debug(`Error processing main domain sitemap`, {\n          method: \"tryFetchSitemapLinks\",\n          url,\n          error,\n        });\n      }\n    }\n\n    // If no sitemap found yet, try the baseUrl as a last resort\n    if (sitemapCount === 0) {\n      const baseUrlSitemap = `${this.baseUrl}/sitemap.xml`;\n      try {\n        sitemapCount += await getLinksFromSitemap(\n          { sitemapUrl: baseUrlSitemap, urlsHandler, mode: \"fire-engine\", maxAge, zeroDataRetention: this.zeroDataRetention },\n          this.logger,\n          this.jobId,\n          this.sitemapsHit,\n          abort,\n          mock,\n        );\n      } catch (error) {\n        if (error instanceof TimeoutSignal) {\n          throw error;\n        } else {\n          this.logger.debug(`Failed to fetch sitemap from ${baseUrlSitemap}`, {\n            method: \"tryFetchSitemapLinks\",\n            sitemapUrl: baseUrlSitemap,\n            error,\n          });\n          if (error instanceof AxiosError && error.response?.status === 404) {\n            // ignore 404\n          } else {\n            sitemapCount += await getLinksFromSitemap(\n              { sitemapUrl: baseUrlSitemap, urlsHandler, mode: \"fire-engine\", maxAge, zeroDataRetention: this.zeroDataRetention },\n              this.logger,\n              this.jobId,\n              this.sitemapsHit,\n              abort,\n              mock,\n            );\n          }\n        }\n      }\n    }\n\n    if (this.sitemapsHit.size >= 20) {\n      this.logger.warn(\"Sitemap limit hit!\", { crawlId: this.jobId, url: this.baseUrl });\n    }\n\n    return sitemapCount;\n  }\n}\n"]}