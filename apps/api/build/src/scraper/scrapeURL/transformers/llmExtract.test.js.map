{"version":3,"file":"llmExtract.test.js","sourceRoot":"","sources":["../../../../../src/scraper/scrapeURL/transformers/llmExtract.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { removeDefaultProperty } from \"./llmExtract\";\nimport { trimToTokenLimit } from \"./llmExtract\";\nimport { encoding_for_model } from \"@dqbd/tiktoken\";\n\njest.mock(\"@dqbd/tiktoken\", () => ({\n  encoding_for_model: jest.fn(),\n}));\n\ndescribe(\"removeDefaultProperty\", () => {\n  it(\"should remove the default property from a simple object\", () => {\n    const input = { default: \"test\", test: \"test\" };\n    const expectedOutput = { test: \"test\" };\n    expect(removeDefaultProperty(input)).toEqual(expectedOutput);\n  });\n\n  it(\"should remove the default property from a nested object\", () => {\n    const input = {\n      default: \"test\",\n      nested: { default: \"nestedTest\", test: \"nestedTest\" },\n    };\n    const expectedOutput = { nested: { test: \"nestedTest\" } };\n    expect(removeDefaultProperty(input)).toEqual(expectedOutput);\n  });\n\n  it(\"should remove the default property from an array of objects\", () => {\n    const input = {\n      array: [\n        { default: \"test1\", test: \"test1\" },\n        { default: \"test2\", test: \"test2\" },\n      ],\n    };\n    const expectedOutput = { array: [{ test: \"test1\" }, { test: \"test2\" }] };\n    expect(removeDefaultProperty(input)).toEqual(expectedOutput);\n  });\n\n  it(\"should handle objects without a default property\", () => {\n    const input = { test: \"test\" };\n    const expectedOutput = { test: \"test\" };\n    expect(removeDefaultProperty(input)).toEqual(expectedOutput);\n  });\n\n  it(\"should handle null and non-object inputs\", () => {\n    expect(removeDefaultProperty(null)).toBeNull();\n    expect(removeDefaultProperty(\"string\")).toBe(\"string\");\n    expect(removeDefaultProperty(123)).toBe(123);\n  });\n});\n\n\ndescribe(\"trimToTokenLimit\", () => {\n  const mockEncode = jest.fn();\n  const mockFree = jest.fn();\n  const mockEncoder = {\n    encode: mockEncode,\n    free: mockFree,\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    (encoding_for_model as jest.Mock).mockReturnValue(mockEncoder);\n  });\n\n  it(\"should return original text if within token limit\", () => {\n    const text = \"This is a test text\";\n    mockEncode.mockReturnValue(new Array(5)); // Simulate 5 tokens\n\n    const result = trimToTokenLimit(text, 10, \"gpt-4o\");\n    \n    expect(result).toEqual({\n      text,\n      numTokens: 5,\n      warning: undefined\n    });\n    expect(mockEncode).toHaveBeenCalledWith(text);\n    expect(mockFree).toHaveBeenCalled();\n  });\n\n  it(\"should trim text and return warning when exceeding token limit\", () => {\n    const text = \"This is a longer text that needs to be trimmed\";\n    mockEncode\n      .mockReturnValueOnce(new Array(20)) // First call for full text\n      .mockReturnValueOnce(new Array(8)); // Second call for trimmed text\n\n    const result = trimToTokenLimit(text, 10, \"gpt-4o\");\n    \n    expect(result.text.length).toBeLessThan(text.length);\n    expect(result.numTokens).toBe(8);\n    expect(result.warning).toContain(\"automatically trimmed\");\n    expect(mockEncode).toHaveBeenCalledTimes(2);\n    expect(mockFree).toHaveBeenCalled();\n  });\n\n  it(\"should append previous warning if provided\", () => {\n    const text = \"This is a test text that is too long\";\n    const previousWarning = \"Previous warning message\";\n    mockEncode\n      .mockReturnValueOnce(new Array(15))\n      .mockReturnValueOnce(new Array(8));\n\n    const result = trimToTokenLimit(text, 10, \"gpt-4o\", previousWarning);\n    \n    expect(result.warning).toContain(\"automatically trimmed\");\n    expect(result.warning).toContain(previousWarning);\n  });\n\n  it(\"should use fallback approach when encoder throws error\", () => {\n    const text = \"This is some text to test fallback\";\n    mockEncode.mockImplementation(() => {\n      throw new Error(\"Encoder error\");\n    });\n\n    const result = trimToTokenLimit(text, 10, \"gpt-4o\");\n    \n    expect(result.text.length).toBeLessThanOrEqual(30); // 10 tokens * 3 chars per token\n    expect(result.numTokens).toBe(10);\n    expect(result.warning).toContain(\"Failed to derive number of LLM tokens\");\n  });\n\n  it(\"should handle empty text\", () => {\n    const text = \"\";\n    mockEncode.mockReturnValue([]);\n\n    const result = trimToTokenLimit(text, 10, \"gpt-4o\");\n    \n    expect(result).toEqual({\n      text: \"\",\n      numTokens: 0,\n      warning: undefined\n    });\n    expect(mockFree).toHaveBeenCalled();\n  });\n\n  it(\"should handle large token limits (128k)\", () => {\n    const text = \"A\".repeat(384000); // Assuming ~3 chars per token, this would be ~128k tokens\n    mockEncode\n      .mockReturnValueOnce(new Array(130000)) // First check shows it's too long\n      .mockReturnValueOnce(new Array(127000)); // Second check shows it's within limit after trim\n\n    const result = trimToTokenLimit(text, 128000, \"gpt-4o\");\n    \n    expect(result.text.length).toBeLessThan(text.length);\n    expect(result.numTokens).toBe(127000);\n    expect(result.warning).toContain(\"automatically trimmed\");\n    expect(mockEncode).toHaveBeenCalledTimes(2);\n    expect(mockFree).toHaveBeenCalled();\n  });\n\n  it(\"should handle large token limits (512k) with 32k context window\", () => {\n    const text = \"A\".repeat(1536000); // Assuming ~3 chars per token, this would be ~512k tokens\n    mockEncode\n      .mockReturnValueOnce(new Array(520000)) // First check shows it's too long\n      .mockReturnValueOnce(new Array(32000)); // Second check shows it's within context limit after trim\n\n    const result = trimToTokenLimit(text, 32000, \"gpt-4o\");\n    \n    expect(result.text.length).toBeLessThan(text.length);\n    expect(result.numTokens).toBe(32000);\n    expect(result.warning).toContain(\"automatically trimmed\");\n    expect(mockEncode).toHaveBeenCalledTimes(2);\n    expect(mockFree).toHaveBeenCalled();\n  });\n\n  it(\"should preserve text when under token limit\", () => {\n    const text = \"Short text\";\n    mockEncode.mockReturnValue(new Array(5)); // 5 tokens\n\n    const result = trimToTokenLimit(text, 10, \"gpt-4o\");\n    \n    expect(result.text).toBe(text);\n    expect(result.numTokens).toBe(5);\n    expect(result.warning).toBeUndefined();\n    expect(mockFree).toHaveBeenCalled();\n  });\n\n  it(\"should append new warning to previous warning\", () => {\n    const text = \"A\".repeat(300);\n    const previousWarning = \"Previous warning message\";\n    mockEncode\n      .mockReturnValueOnce(new Array(100))\n      .mockReturnValueOnce(new Array(50));\n\n    const result = trimToTokenLimit(text, 50, \"gpt-4o\", previousWarning);\n    \n    expect(result.warning).toContain(\"automatically trimmed\");\n    expect(result.warning).toContain(previousWarning);\n    expect(mockFree).toHaveBeenCalled();\n  });\n\n  it(\"should handle encoder initialization failure gracefully\", () => {\n    const text = \"Sample text\";\n    (encoding_for_model as jest.Mock).mockImplementationOnce(() => {\n      throw new Error(\"Encoder initialization failed\");\n    });\n\n    const result = trimToTokenLimit(text, 10, \"gpt-4o\");\n    \n    expect(result.text.length).toBeLessThanOrEqual(30); // 10 tokens * 3 chars\n    expect(result.warning).toContain(\"Failed to derive number of LLM tokens\");\n    expect(mockFree).not.toHaveBeenCalled();\n  });\n\n  it(\"should handle encoding errors during trimming\", () => {\n    const text = \"Sample text\";\n    mockEncode.mockImplementation(() => {\n      throw new Error(\"Encoding failed\");\n    });\n\n    const result = trimToTokenLimit(text, 10, \"gpt-4o\");\n    \n    expect(result.text.length).toBeLessThanOrEqual(30);\n    expect(result.warning).toContain(\"Failed to derive number of LLM tokens\");\n    expect(mockFree).toHaveBeenCalled();\n  });\n\n  it(\"should handle very small token limits\", () => {\n    const text = \"This is a test sentence that should be trimmed significantly\";\n    mockEncode\n      .mockReturnValueOnce(new Array(20))\n      .mockReturnValueOnce(new Array(3));\n\n    const result = trimToTokenLimit(text, 3, \"gpt-4o\");\n    \n    expect(result.text.length).toBeLessThan(text.length);\n    expect(result.numTokens).toBe(3);\n    expect(result.warning).toContain(\"automatically trimmed\");\n    expect(mockFree).toHaveBeenCalled();\n  });\n\n  it(\"should handle unicode characters\", () => {\n    const text = \"Hello 👋 World 🌍\";\n    mockEncode\n      .mockReturnValueOnce(new Array(8))\n      .mockReturnValueOnce(new Array(4));\n\n    const result = trimToTokenLimit(text, 4, \"gpt-4o\");\n    \n    expect(result.text.length).toBeLessThan(text.length);\n    expect(result.numTokens).toBe(4);\n    expect(result.warning).toContain(\"automatically trimmed\");\n    expect(mockFree).toHaveBeenCalled();\n  });\n\n  it(\"should handle multiple trimming iterations\", () => {\n    const text = \"A\".repeat(1000);\n    mockEncode\n      .mockReturnValueOnce(new Array(300))\n      .mockReturnValueOnce(new Array(200))\n      .mockReturnValueOnce(new Array(100))\n      .mockReturnValueOnce(new Array(50));\n\n    const result = trimToTokenLimit(text, 50, \"gpt-4o\");\n    \n    expect(result.text.length).toBeLessThan(text.length);\n    expect(result.numTokens).toBe(50);\n    expect(result.warning).toContain(\"automatically trimmed\");\n    expect(mockEncode).toHaveBeenCalledTimes(4);\n    expect(mockFree).toHaveBeenCalled();\n  });\n\n  it(\"should handle exact token limit match\", () => {\n    const text = \"Exact token limit text\";\n    mockEncode.mockReturnValue(new Array(10));\n\n    const result = trimToTokenLimit(text, 10, \"gpt-4o\");\n    \n    expect(result.text).toBe(text);\n    expect(result.numTokens).toBe(10);\n    expect(result.warning).toBeUndefined();\n    expect(mockFree).toHaveBeenCalled();\n  });\n\n  \n});\n"]}