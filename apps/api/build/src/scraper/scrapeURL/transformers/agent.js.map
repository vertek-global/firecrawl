{"version":3,"file":"agent.js","sourceRoot":"","sources":["../../../../../src/scraper/scrapeURL/transformers/agent.ts"],"names":[],"mappings":";;AASA,oCAoDC;AAzDD,gDAA6C;AAC7C,oEAA8D;AAC9D,oDAAoE;AAG7D,KAAK,UAAU,YAAY,CAChC,IAAU,EACV,QAAkB;IAElB,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC;QAC/B,IAAI,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,CAAC;YAC3C,QAAQ,CAAC,OAAO,GAAG,kDAAkD,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;YACxH,OAAO,QAAQ,CAAC;QAClB,CAAC;QAED,MAAM,GAAG,GAAuB,QAAQ,CAAC,GAAG,IAAI,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAA;QAE3E,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,eAAM,CAAC,KAAK,CAAC,gFAAgF,CAAC,CAAC;YAC/F,qGAAqG;YACrG,OAAO,QAAQ,CAAC;QAClB,CAAC;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,IAAI,SAAS,CAAA;QACtD,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,IAAI,SAAS,CAAA;QAE5D,IAAI,kBAAqC,CAAC;QAC1C,IAAI,CAAC;YACH,kBAAkB,GAAG,MAAM,IAAA,yBAAW,EAAC;gBACrC,GAAG;gBACH,MAAM;gBACN,SAAS;gBACT,QAAQ,EAAE,IAAI,CAAC,EAAE;gBACjB,YAAY,EAAE,IAAI,CAAC,YAAY;aAChC,CAAC,CAAA;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,KAAK,IAAI,KAAK,CAAC,OAAO,KAAK,qBAAqB,EAAE,CAAC;gBACtE,eAAM,CAAC,KAAK,CAAC,qBAAqB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAA;gBAC9C,QAAQ,CAAC,OAAO,GAAG,mCAAmC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;gBACzG,OAAO,QAAQ,CAAC;YAClB,CAAC;iBAAM,CAAC;gBACN,MAAM,KAAK,CAAC;YACd,CAAC;QACH,CAAC;QAED,MAAM,IAAI,GAAG,kBAAkB,CAAC,YAAY,CAAC,kBAAkB,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAA;QAE7F,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;YAC9C,MAAM,QAAQ,GAAG,MAAM,IAAA,gCAAa,EAAC,IAAI,CAAC,CAAA;YAC1C,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAA;QAC9B,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YAC1C,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAA;QACtB,CAAC;IACH,CAAC;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import {\n  Document,\n} from \"../../../controllers/v1/types\";\nimport { Meta } from \"..\";\nimport { logger } from \"../../../lib/logger\";\nimport { parseMarkdown } from \"../../../lib/html-to-markdown\";\nimport { smartScrape, SmartScrapeResult } from \"../lib/smartScrape\";\n\n\nexport async function performAgent(\n  meta: Meta,\n  document: Document,\n): Promise<Document> {\n  if (meta.options.agent?.prompt) {\n    if (meta.internalOptions.zeroDataRetention) {\n      document.warning = \"Agent is not supported with zero data retention.\" + (document.warning ? \" \" + document.warning : \"\")\n      return document;\n    }\n\n    const url: string | undefined = document.url || document.metadata.sourceURL\n\n    if (!url) {\n      logger.error(\"document.url or document.metadata.sourceURL is undefined -- this is unexpected\");\n      // throw new Error(\"document.url or document.metadata.sourceURL is undefined -- this is unexpected\");\n      return document;\n    }\n\n    const prompt = meta.options.agent?.prompt ?? undefined\n    const sessionId = meta.options.agent?.sessionId ?? undefined\n\n    let smartscrapeResults: SmartScrapeResult;\n    try {\n      smartscrapeResults = await smartScrape({\n        url,\n        prompt,\n        sessionId,\n        scrapeId: meta.id,\n        costTracking: meta.costTracking,\n      })\n    } catch (error) {\n      if (error instanceof Error && error.message === \"Cost limit exceeded\") {\n        logger.error(\"Cost limit exceeded\", { error })\n        document.warning = \"Smart scrape cost limit exceeded.\" + (document.warning ? \" \" + document.warning : \"\")\n        return document;\n      } else {\n        throw error;\n      }\n    }\n\n    const html = smartscrapeResults.scrapedPages[smartscrapeResults.scrapedPages.length - 1].html\n\n    if (meta.options.formats.includes(\"markdown\")) {\n      const markdown = await parseMarkdown(html)\n      document.markdown = markdown\n    }\n    if (meta.options.formats.includes(\"html\")) {\n      document.html = html\n    }\n  }\n\n  return document;\n}\n"]}