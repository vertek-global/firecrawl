{"version":3,"file":"scrape.js","sourceRoot":"","sources":["../../../../../../src/scraper/scrapeURL/engines/fire-engine/scrape.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA,4CAyCC;AA5GD,qDAAuC;AACvC,6BAAwB;AAGxB,2CAA8C;AAwD9C,MAAM,MAAM,GAAG,OAAC,CAAC,MAAM,CAAC;IACtB,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE;IACjB,UAAU,EAAE,OAAC,CAAC,OAAO,EAAE;CACxB,CAAC,CAAC;AAEU,QAAA,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,oBAAoB,IAAI,wBAAwB,CAAC;AAEnF,KAAK,UAAU,gBAAgB,CAMpC,MAAc,EACd,OAA+C,EAC/C,IAAsB,EACtB,KAAmB;IAEnB,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,SAAS,CAC1C;QACE,IAAI,EAAE,qBAAqB;QAC3B,UAAU,EAAE;YACV,GAAG,EAAE,OAAO,CAAC,GAAG;SACjB;KACF,EACD,KAAK,EAAE,IAAI,EAAE,EAAE;QACb,OAAO,MAAM,IAAA,mBAAW,EAAC;YACvB,GAAG,EAAE,GAAG,qBAAa,SAAS;YAC9B,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,GAAG,CAAC,MAAM,CAAC,aAAa,EAAE;oBACxB,CAAC,CAAC;wBACE,cAAc,EAAE,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC;wBAC9C,OAAO,EAAE,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC;qBAC1C;oBACH,CAAC,CAAC,EAAE,CAAC;aACR;YACD,IAAI,EAAE,OAAO;YACb,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,8BAA8B,EAAE,CAAC;YAChE,MAAM;YACN,QAAQ,EAAE,CAAC;YACX,IAAI;YACJ,KAAK;SACN,CAAC,CAAC;IACL,CAAC,CACF,CAAC;IAEF,OAAO,aAAa,CAAC;AACvB,CAAC","sourcesContent":["import { Logger } from \"winston\";\nimport * as Sentry from \"@sentry/node\";\nimport { z } from \"zod\";\n\nimport { Action } from \"../../../../controllers/v1/types\";\nimport { robustFetch } from \"../../lib/fetch\";\nimport { MockState } from \"../../lib/mock\";\n\nexport type FireEngineScrapeRequestCommon = {\n  url: string;\n\n  headers?: { [K: string]: string };\n\n  blockMedia?: boolean; // default: true\n  // pageOptions?: any; // unused, .scrollXPaths is considered on FE side\n\n  // useProxy?: boolean; // unused, default: true\n  // customProxy?: string; // unused\n\n  // disableSmartWaitCache?: boolean; // unused, default: false\n  // skipDnsCheck?: boolean; // unused, default: false\n\n  priority?: number; // default: 1\n  // team_id?: string; // unused\n  logRequest?: boolean; // default: true\n  instantReturn?: boolean; // default: false\n  geolocation?: { country?: string; languages?: string[] };\n\n  mobileProxy?: boolean; // leave it undefined if user doesn't specify\n\n  timeout?: number;\n  saveScrapeResultToGCS?: boolean;\n  zeroDataRetention?: boolean;\n};\n\nexport type FireEngineScrapeRequestChromeCDP = {\n  engine: \"chrome-cdp\";\n  skipTlsVerification?: boolean;\n  actions?: Action[];\n  blockMedia?: true; // cannot be false\n  mobile?: boolean;\n  disableSmartWaitCache?: boolean;\n};\n\nexport type FireEngineScrapeRequestPlaywright = {\n  engine: \"playwright\";\n  blockAds?: boolean; // default: true\n\n  // mutually exclusive, default: false\n  screenshot?: boolean;\n  fullPageScreenshot?: boolean;\n\n  wait?: number; // default: 0\n};\n\nexport type FireEngineScrapeRequestTLSClient = {\n  engine: \"tlsclient\";\n  atsv?: boolean; // v0 only, default: false\n  disableJsDom?: boolean; // v0 only, default: false\n};\n\nconst schema = z.object({\n  jobId: z.string(),\n  processing: z.boolean(),\n});\n\nexport const fireEngineURL = process.env.FIRE_ENGINE_BETA_URL ?? \"<mock-fire-engine-url>\";\n\nexport async function fireEngineScrape<\n  Engine extends\n    | FireEngineScrapeRequestChromeCDP\n    | FireEngineScrapeRequestPlaywright\n    | FireEngineScrapeRequestTLSClient,\n>(\n  logger: Logger,\n  request: FireEngineScrapeRequestCommon & Engine,\n  mock: MockState | null,\n  abort?: AbortSignal,\n): Promise<z.infer<typeof schema>> {\n  const scrapeRequest = await Sentry.startSpan(\n    {\n      name: \"fire-engine: Scrape\",\n      attributes: {\n        url: request.url,\n      },\n    },\n    async (span) => {\n      return await robustFetch({\n        url: `${fireEngineURL}/scrape`,\n        method: \"POST\",\n        headers: {\n          ...(Sentry.isInitialized()\n            ? {\n                \"sentry-trace\": Sentry.spanToTraceHeader(span),\n                baggage: Sentry.spanToBaggageHeader(span),\n              }\n            : {}),\n        },\n        body: request,\n        logger: logger.child({ method: \"fireEngineScrape/robustFetch\" }),\n        schema,\n        tryCount: 3,\n        mock,\n        abort,\n      });\n    },\n  );\n\n  return scrapeRequest;\n}\n"]}