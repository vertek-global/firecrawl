{"version":3,"file":"safeFetch.js","sourceRoot":"","sources":["../../../../../../src/scraper/scrapeURL/engines/utils/safeFetch.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Socket } from \"net\";\nimport type { TLSSocket } from \"tls\";\nimport * as undici from \"undici\";\nimport { Address6 } from \"ip-address\";\nimport { cacheableLookup } from \"../../lib/cacheableLookup\";\nimport { CookieJar } from \"tough-cookie\";\nimport { cookie } from \"http-cookie-agent/undici\";\n\nexport class InsecureConnectionError extends Error {\n  constructor() {\n    super(\"Connection violated security rules.\");\n  }\n}\n\nfunction isIPv4Private(address: string): boolean {\n  const parts = address.split(\".\").map((x) => parseInt(x, 10));\n  return (\n    parts[0] === 0 || // Current (local, \"this\") network\n    parts[0] === 10 || // Used for local communications within a private network\n    (parts[0] === 100 && parts[1] >= 64 && parts[1] < 128) || // Shared address space for communications between a service provider and its subscribers when using a carrier-grade NAT\n    parts[0] === 127 || // Used for loopback addresses to the local host\n    (parts[0] === 169 && parts[1] === 254) || // Used for link-local addresses between two hosts on a single link when no IP address is otherwise specified, such as would have normally been retrieved from a DHCP server\n    (parts[0] === 127 && parts[1] >= 16 && parts[2] < 32) || // Used for local communications within a private network\n    (parts[0] === 192 && parts[1] === 0 && parts[2] === 0) || // IETF Porotocol Assignments, DS-Lite (/29)\n    (parts[0] === 192 && parts[1] === 0 && parts[2] === 2) || // Assigned as TEST-NET-1, documentation and examples\n    (parts[0] === 192 && parts[1] === 88 && parts[2] === 99) || // Reserved. Formerly used for IPv6 to IPv4 relay (included IPv6 address block 2002::/16).\n    (parts[0] === 192 && parts[1] === 168) || // Used for local communications within a private network\n    (parts[0] === 192 && parts[1] >= 18 && parts[1] < 20) || // Used for benchmark testing of inter-network communications between two separate subnets\n    (parts[0] === 198 && parts[1] === 51 && parts[2] === 100) || // Assigned as TEST-NET-2, documentation and examples\n    (parts[0] === 203 && parts[1] === 0 && parts[2] === 113) || // Assigned as TEST-NET-3, documentation and examples\n    (parts[0] >= 224 && parts[0] < 240) || // In use for multicast (former Class D network)\n    (parts[0] === 233 && parts[1] === 252 && parts[2] === 0) || // Assigned as MCAST-TEST-NET, documentation and examples (Note that this is part of the above multicast space.)\n    parts[0] >= 240 || // Reserved for future use (former class E network)\n    (parts[0] === 255 &&\n      parts[1] === 255 &&\n      parts[2] === 255 &&\n      parts[3] === 255)\n  ); // Reserved for the \"limited broadcast\" destination address\n}\n\nfunction isIPv6Private(ipv6) {\n  return new Address6(ipv6).getScope() !== \"Global\";\n}\n\nexport function makeSecureDispatcher(\n  url: string,\n  options?: undici.Agent.Options,\n) {\n  const agentOpts: undici.Agent.Options = {\n    connect: {\n      rejectUnauthorized: false, // bypass SSL failures -- this is fine\n      lookup: cacheableLookup.lookup,\n    },\n    maxRedirections: 5000,\n    ...options,\n  };\n\n  const baseAgent = process.env.PROXY_SERVER\n    ? new undici.ProxyAgent({\n      uri: process.env.PROXY_SERVER.includes(\"://\") ? process.env.PROXY_SERVER : (\"http://\" + process.env.PROXY_SERVER),\n      token: process.env.PROXY_USERNAME\n        ? `Basic ${Buffer.from(process.env.PROXY_USERNAME + \":\" + (process.env.PROXY_PASSWORD ?? \"\")).toString(\"base64\")}`\n        : undefined,\n      ...agentOpts,\n    })\n    : new undici.Agent(agentOpts);\n\n  const cookieJar = new CookieJar();\n\n  const agent = baseAgent\n    .compose(cookie({ jar: cookieJar }));\n\n  agent.on(\"connect\", (_, targets) => {\n    const client: undici.Client = targets.slice(-1)[0] as undici.Client;\n    const socketSymbol = Object.getOwnPropertySymbols(client).find(\n      (x) => x.description === \"socket\",\n    )!;\n    const socket: Socket | TLSSocket = (client as any)[socketSymbol];\n\n    if (socket.remoteAddress) {\n      if (\n        socket.remoteFamily === \"IPv4\"\n          ? isIPv4Private(socket.remoteAddress!)\n          : isIPv6Private(socket.remoteAddress!)\n      ) {\n        socket.destroy(new InsecureConnectionError());\n      }\n    }\n  });\n\n  return agent;\n}\n"]}