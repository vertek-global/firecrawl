{"version":3,"file":"specialtyHandler.js","sourceRoot":"","sources":["../../../../../../src/scraper/scrapeURL/engines/utils/specialtyHandler.ts"],"names":[],"mappings":";;;;;AAyBA,oDA6BC;AArDD,uCAA8C;AAE9C,gDAAwB;AACxB,4CAAoB;AACpB,0CAAwC;AAGxC,KAAK,UAAU,kBAAkB,CAAC,MAAc,EAAE,KAA+C;IAC/F,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,YAAE,CAAC,MAAM,EAAE,EAAE,YAAY,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC/E,MAAM,IAAA,oBAAS,EAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAA;IAEpE,OAAO;QACL,MAAM,EAAE,KAAK,CAAC,cAAc;QAC5B,GAAG,EAAE,KAAK,CAAC,GAAG;QACd,QAAQ;QACR,SAAS,EAAE,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO;KACvD,CAAC;AACJ,CAAC;AAEM,KAAK,UAAU,oBAAoB,CACxC,MAAc,EACd,OAA2C,EAC3C,KAAoC;IAEpC,MAAM,WAAW,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,IAAI,CACrD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,cAAc,CAC7C,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAEZ,IAAI,WAAW,KAAK,SAAS,EAAE,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC,2DAA2D,EAAE;YACvE,OAAO;SACR,CAAC,CAAC;IACL,CAAC;SAAM,IACL,WAAW,KAAK,iBAAiB;QACjC,WAAW,CAAC,UAAU,CAAC,kBAAkB,CAAC,EAC1C,CAAC;QACD,OAAO;QACP,MAAM,IAAI,uBAAe,CAAC,CAAC,KAAK,CAAC,EAAE,MAAM,kBAAkB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;IAC9E,CAAC;SAAM,IACL,WAAW;QACT,yEAAyE;QAC3E,WAAW,CAAC,UAAU,CACpB,0EAA0E,CAC3E,EACD,CAAC;QACD,QAAQ;QACR,MAAM,IAAI,uBAAe,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IACtC,CAAC;AACH,CAAC","sourcesContent":["import { Logger } from \"winston\";\nimport { AddFeatureError } from \"../../error\";\nimport { FireEngineCheckStatusSuccess } from \"../fire-engine/checkStatus\";\nimport path from \"path\";\nimport os from \"os\";\nimport { writeFile } from \"fs/promises\";\nimport { Meta } from \"../..\";\n\nasync function feResToPdfPrefetch(logger: Logger, feRes: FireEngineCheckStatusSuccess | undefined): Promise<Meta[\"pdfPrefetch\"]> {\n  if (!feRes?.file) {\n    logger.warn(\"No file in pdf prefetch\");\n    return null;\n  }\n\n  const filePath = path.join(os.tmpdir(), `tempFile-${crypto.randomUUID()}.pdf`);\n  await writeFile(filePath, Buffer.from(feRes.file.content, \"base64\"))\n\n  return {\n    status: feRes.pageStatusCode,\n    url: feRes.url,\n    filePath,\n    proxyUsed: feRes.usedMobileProxy ? \"stealth\" : \"basic\",\n  };\n}\n\nexport async function specialtyScrapeCheck(\n  logger: Logger,\n  headers: Record<string, string> | undefined,\n  feRes?: FireEngineCheckStatusSuccess,\n) {\n  const contentType = (Object.entries(headers ?? {}).find(\n    (x) => x[0].toLowerCase() === \"content-type\",\n  ) ?? [])[1];\n\n  if (contentType === undefined) {\n    logger.warn(\"Failed to check contentType -- was not present in headers\", {\n      headers,\n    });\n  } else if (\n    contentType === \"application/pdf\" ||\n    contentType.startsWith(\"application/pdf;\")\n  ) {\n    // .pdf\n    throw new AddFeatureError([\"pdf\"], await feResToPdfPrefetch(logger, feRes));\n  } else if (\n    contentType ===\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" ||\n    contentType.startsWith(\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document;\",\n    )\n  ) {\n    // .docx\n    throw new AddFeatureError([\"docx\"]);\n  }\n}\n"]}