{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/scraper/scrapeURL/engines/docx/index.ts"],"names":[],"mappings":";;;;;AAKA,gCAcC;AAjBD,wDAAqD;AACrD,sDAA8B;AAEvB,KAAK,UAAU,UAAU,CAAC,IAAU,EAAE,SAA6B;IACxE,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,MAAM,IAAA,2BAAY,EAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,GAAG,EAAE;QAC5F,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;QAC7B,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,IAAI,WAAW,CAAC,OAAO,CAAC,SAAS,IAAI,MAAM,CAAC;KAC/E,CAAC,CAAC;IAEH,OAAO;QACL,GAAG,EAAE,QAAQ,CAAC,GAAG;QACjB,UAAU,EAAE,QAAQ,CAAC,MAAM;QAE3B,IAAI,EAAE,CAAC,MAAM,iBAAO,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC,KAAK;QAEjE,SAAS,EAAE,OAAO;KACnB,CAAC;AACJ,CAAC","sourcesContent":["import { Meta } from \"../..\";\nimport { EngineScrapeResult } from \"..\";\nimport { downloadFile } from \"../utils/downloadFile\";\nimport mammoth from \"mammoth\";\n\nexport async function scrapeDOCX(meta: Meta, timeToRun: number | undefined): Promise<EngineScrapeResult> {\n  const { response, tempFilePath } = await downloadFile(meta.id, meta.rewrittenUrl ?? meta.url, {\n    headers: meta.options.headers,\n    signal: meta.internalOptions.abort ?? AbortSignal.timeout(timeToRun ?? 300000),\n  });\n\n  return {\n    url: response.url,\n    statusCode: response.status,\n\n    html: (await mammoth.convertToHtml({ path: tempFilePath })).value,\n\n    proxyUsed: \"basic\",\n  };\n}\n"]}