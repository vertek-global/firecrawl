{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/scraper/scrapeURL/engines/playwright/index.ts"],"names":[],"mappings":";;AAOA,0DAmDC;AA1DD,6BAAwB;AAGxB,uCAA2C;AAC3C,2CAA8C;AAC9C,uEAAgE;AAEzD,KAAK,UAAU,uBAAuB,CAC3C,IAAU,EACV,SAA6B;IAE7B,MAAM,OAAO,GAAG,CAAC,SAAS,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;IAE7D,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC;QAClC,MAAM,IAAA,mBAAW,EAAC;YAChB,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,2BAA4B;YAC7C,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE;gBACJ,GAAG,EAAE,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,GAAG;gBAClC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;gBACrC,OAAO;gBACP,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;aAC9B;YACD,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC;YAChE,MAAM,EAAE,OAAC,CAAC,MAAM,CAAC;gBACf,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE;gBACnB,cAAc,EAAE,OAAC,CAAC,MAAM,EAAE;gBAC1B,SAAS,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;gBAChC,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;aACnC,CAAC;YACF,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC;SACpC,CAAC;QACF,CAAC,KAAK,IAAI,EAAE;YACV,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;YACzE,MAAM,IAAI,oBAAY,CACpB,4DAA4D,EAC5D,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,EAAE,CACvB,CAAC;QACJ,CAAC,CAAC,EAAE;KACL,CAAC,CAAC;IAEH,IAAI,QAAQ,CAAC,WAAW,EAAE,QAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC;QACvD,QAAQ,CAAC,OAAO,GAAG,MAAM,IAAA,+BAAY,EAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC1D,CAAC;IAED,OAAO;QACL,GAAG,EAAE,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,GAAG,EAAE,kCAAkC;QACtE,IAAI,EAAE,QAAQ,CAAC,OAAO;QACtB,UAAU,EAAE,QAAQ,CAAC,cAAc;QACnC,KAAK,EAAE,QAAQ,CAAC,SAAS;QACzB,WAAW,EAAE,QAAQ,CAAC,WAAW;QAEjC,SAAS,EAAE,OAAO;KACnB,CAAC;AACJ,CAAC","sourcesContent":["import { z } from \"zod\";\nimport { EngineScrapeResult } from \"..\";\nimport { Meta } from \"../..\";\nimport { TimeoutError } from \"../../error\";\nimport { robustFetch } from \"../../lib/fetch\";\nimport { getInnerJSON } from \"../../../../lib/html-transformer\";\n\nexport async function scrapeURLWithPlaywright(\n  meta: Meta,\n  timeToRun: number | undefined,\n): Promise<EngineScrapeResult> {\n  const timeout = (timeToRun ?? 300000) + meta.options.waitFor;\n\n  const response = await Promise.race([\n    await robustFetch({\n      url: process.env.PLAYWRIGHT_MICROSERVICE_URL!,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: {\n        url: meta.rewrittenUrl ?? meta.url,\n        wait_after_load: meta.options.waitFor,\n        timeout,\n        headers: meta.options.headers,\n      },\n      method: \"POST\",\n      logger: meta.logger.child(\"scrapeURLWithPlaywright/robustFetch\"),\n      schema: z.object({\n        content: z.string(),\n        pageStatusCode: z.number(),\n        pageError: z.string().optional(),\n        contentType: z.string().optional(),\n      }),\n      mock: meta.mock,\n      abort: AbortSignal.timeout(timeout),\n    }),\n    (async () => {\n      await new Promise((resolve) => setTimeout(() => resolve(null), timeout));\n      throw new TimeoutError(\n        \"Playwright was unable to scrape the page before timing out\",\n        { cause: { timeout } },\n      );\n    })(),\n  ]);\n\n  if (response.contentType?.includes(\"application/json\")) {\n    response.content = await getInnerJSON(response.content);\n  }\n\n  return {\n    url: meta.rewrittenUrl ?? meta.url, // TODO: impove redirect following\n    html: response.content,\n    statusCode: response.pageStatusCode,\n    error: response.pageError,\n    contentType: response.contentType,\n\n    proxyUsed: \"basic\",\n  };\n}\n"]}