{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/scraper/scrapeURL/engines/index/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Document } from \"../../../../controllers/v1/types\";\nimport { EngineScrapeResult } from \"..\";\nimport { Meta } from \"../..\";\nimport { getIndexFromGCS, hashURL, index_supabase_service, normalizeURLForIndex, saveIndexToGCS, generateURLSplits, addIndexInsertJob, generateDomainSplits } from \"../../../../services\";\nimport { EngineError, IndexMissError } from \"../../error\";\nimport crypto from \"crypto\";\n\nexport async function sendDocumentToIndex(meta: Meta, document: Document) {\n    const shouldCache = meta.options.storeInCache\n        && !meta.internalOptions.zeroDataRetention\n        && meta.winnerEngine !== \"index\"\n        && meta.winnerEngine !== \"index;documents\"\n        && (\n            meta.internalOptions.teamId === \"sitemap\"\n            || (\n                meta.winnerEngine !== \"fire-engine;tlsclient\"\n                && meta.winnerEngine !== \"fire-engine;tlsclient;stealth\"\n                && meta.winnerEngine !== \"fetch\"\n            )\n        )\n        && !meta.featureFlags.has(\"actions\")\n        && (\n            meta.options.headers === undefined\n            || Object.keys(meta.options.headers).length === 0\n        );\n\n    if (!shouldCache) {\n        return document;\n    }\n\n    (async () => {\n        try {\n            const normalizedURL = normalizeURLForIndex(meta.url);\n            const urlHash = hashURL(normalizedURL);\n\n            const urlSplits = generateURLSplits(normalizedURL);\n            const urlSplitsHash = urlSplits.map(split => hashURL(split));\n\n            const urlObj = new URL(normalizedURL);\n            const hostname = urlObj.hostname;\n\n            const domainSplits = generateDomainSplits(hostname);\n            const domainSplitsHash = domainSplits.map(split => hashURL(split));\n\n            const indexId = crypto.randomUUID();\n\n            try {\n                await saveIndexToGCS(indexId, {\n                    url: normalizedURL,\n                    html: document.rawHtml!,\n                    statusCode: document.metadata.statusCode,\n                    error: document.metadata.error,\n                    screenshot: document.screenshot,\n                    numPages: document.metadata.numPages,\n                });\n            } catch (error) {\n                meta.logger.error(\"Failed to save document to index\", {\n                    error,\n                });\n                return document;\n            }\n\n            let title = document.metadata.title ?? document.metadata.ogTitle ?? null;\n            let description = document.metadata.description ?? document.metadata.ogDescription ?? document.metadata.dcDescription ?? null;\n\n            if (typeof title === \"string\") {\n                title = title.trim();\n                if (title.length > 60) {\n                    title = title.slice(0, 57) + \"...\";\n                }\n            } else {\n                title = null;\n            }\n\n            if (typeof description === \"string\") {\n                description = description.trim();\n                if (description.length > 160) {\n                    description = description.slice(0, 157) + \"...\";\n                }\n            } else {\n                description = null;\n            }\n\n            try {\n                await addIndexInsertJob({\n                    id: indexId,\n                    url: normalizedURL,\n                    url_hash: urlHash,\n                    original_url: document.metadata.sourceURL ?? meta.url,\n                    resolved_url: document.metadata.url ?? document.metadata.sourceURL ?? meta.rewrittenUrl ?? meta.url,\n                    has_screenshot: document.screenshot !== undefined && meta.featureFlags.has(\"screenshot\"),\n                    has_screenshot_fullscreen: document.screenshot !== undefined && meta.featureFlags.has(\"screenshot@fullScreen\"),\n                    is_mobile: meta.options.mobile,\n                    block_ads: meta.options.blockAds,\n                    location_country: meta.options.location?.country ?? null,\n                    location_languages: meta.options.location?.languages ?? null,\n                    status: document.metadata.statusCode,\n                    ...(urlSplitsHash.slice(0, 10).reduce((a,x,i) => ({\n                        ...a,\n                        [`url_split_${i}_hash`]: x,\n                    }), {})),\n                    ...(domainSplitsHash.slice(0, 5).reduce((a,x,i) => ({\n                        ...a,\n                        [`domain_splits_${i}_hash`]: x,\n                    }), {})),\n                    ...(title ? { title } : {}),\n                    ...(description ? { description } : {}),\n                });\n            } catch (error) {\n                meta.logger.error(\"Failed to add document to index insert queue\", {\n                    error,\n                });\n            }\n        } catch (error) {\n            meta.logger.error(\"Failed to save document to index (outer)\", {\n                error,\n            });\n        }\n    })();\n\n    return document;\n}\n\nconst errorCountToRegister = 3;\n\nexport async function scrapeURLWithIndex(meta: Meta): Promise<EngineScrapeResult> {\n    const normalizedURL = normalizeURLForIndex(meta.url);\n    const urlHash = hashURL(normalizedURL);\n\n    let selector = index_supabase_service\n        .from(\"index\")\n        .select(\"id, created_at, status\")\n        .eq(\"url_hash\", urlHash)\n        .gte(\"created_at\", new Date(Date.now() - meta.options.maxAge).toISOString())\n        .eq(\"is_mobile\", meta.options.mobile)\n        .eq(\"block_ads\", meta.options.blockAds);\n    \n    if (meta.featureFlags.has(\"screenshot\")) {\n        selector = selector.eq(\"has_screenshot\", true);\n    }\n    if (meta.featureFlags.has(\"screenshot@fullScreen\")) {\n        selector = selector.eq(\"has_screenshot_fullscreen\", true);\n    }\n    if (meta.options.location?.country) {\n        selector = selector.eq(\"location_country\", meta.options.location.country);\n    } else {\n        selector = selector.is(\"location_country\", null);\n    }\n    if (meta.options.location?.languages) {\n        selector = selector.eq(\"location_languages\", meta.options.location.languages);\n    } else {\n        selector = selector.is(\"location_languages\", null);\n    }\n\n    const { data, error } = await selector\n        .order(\"created_at\", { ascending: false })\n        .limit(5);\n\n    if (error) {\n        throw new EngineError(\"Failed to retrieve URL from DB index\", {\n            cause: error,\n        });\n    }\n\n    let selectedRow: {\n        id: string;\n        created_at: string;\n        status: number;\n    } | null = null;\n\n    if (data.length > 0) {\n        const newest200Index = data.findIndex(x => x.status >= 200 && x.status < 300);\n        // If the newest 200 index is further back than the allowed error count, we should display the errored index entry\n        if (newest200Index >= errorCountToRegister || newest200Index === -1) {\n            selectedRow = data[0];\n        } else {\n            selectedRow = data[newest200Index];\n        }\n    }\n\n    if (selectedRow === null || selectedRow === undefined) {\n        throw new IndexMissError();\n    }\n\n    const id = data[0].id;\n\n    const doc = await getIndexFromGCS(id + \".json\", meta.logger.child({ module: \"index\", method: \"getIndexFromGCS\" }));\n    if (!doc) {\n        throw new EngineError(\"Document not found in GCS\");\n    }\n    \n    return {\n        url: doc.url,\n        html: doc.html,\n        statusCode: doc.statusCode,\n        error: doc.error,\n        screenshot: doc.screenshot,\n        numPages: doc.numPages,\n\n        cacheInfo: {\n            created_at: new Date(data[0].created_at),\n        },\n\n        proxyUsed: doc.proxyUsed ?? \"basic\",\n    };\n}\n"]}