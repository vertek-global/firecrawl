{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/scraper/scrapeURL/engines/pdf/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2KA,8BAqJC;AA9TD,+CAAiC;AACjC,2CAA8C;AAC9C,6BAAwB;AACxB,qDAAuC;AACvC,8DAAqC;AACrC,0DAAiC;AACjC,wDAAwE;AACxE,uCAMqB;AACrB,+CAAoD;AACpD,0DAA6B;AAE7B,2DAA0D;AAC1D,iEAA4F;AAI5F,MAAM,aAAa,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO;AAC/C,MAAM,qBAAqB,GAAG,GAAG,CAAC;AAElC,KAAK,UAAU,qBAAqB,CAClC,IAAU,EACV,YAAoB,EACpB,SAA6B,EAC7B,aAAqB;IAErB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wCAAwC,EAAE;QAC1D,YAAY;KACb,CAAC,CAAC;IAEH,MAAM,sBAAsB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAE1C,IAAI,CAAC;QACH,MAAM,YAAY,GAAG,MAAM,IAAA,qCAAqB,EAAC,aAAa,CAAC,CAAC;QAChE,IAAI,YAAY,EAAE,CAAC;YACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,EAAE;gBACxD,YAAY;aACb,CAAC,CAAC;YACH,OAAO,YAAY,CAAC;QACtB,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qDAAqD,EAAE;YACtE,KAAK;YACL,YAAY;SACb,CAAC,CAAC;IACL,CAAC;IAED,MAAM,OAAO,GAAG,SAAS;QACvB,CAAC,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,sBAAsB,CAAC;QACnD,CAAC,CAAC,SAAS,CAAC;IACd,IAAI,OAAO,IAAI,OAAO,GAAG,CAAC,EAAE,CAAC;QAC3B,MAAM,IAAI,oBAAY,CAAC,6CAA6C,CAAC,CAAC;IACxE,CAAC;IAED,MAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAEjE,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAW,EAAC;QACjC,GAAG,EACD,2BAA2B,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,UAAU;QAC3E,MAAM,EAAE,MAAM;QACd,OAAO,EAAE;YACP,aAAa,EAAE,UAAU,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE;SACzD;QACD,IAAI,EAAE;YACJ,KAAK,EAAE;gBACL,YAAY,EAAE,aAAa;gBAC3B,QAAQ,EAAE,mBAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,MAAM;gBAC9C,OAAO;gBACP,UAAU,EAAE,IAAI,CAAC,GAAG,EAAE;aACvB;SACF;QACD,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACxB,MAAM,EAAE,2CAA2C;SACpD,CAAC;QACF,MAAM,EAAE,OAAC,CAAC,MAAM,CAAC;YACf,EAAE,EAAE,OAAC,CAAC,MAAM,EAAE;YACd,MAAM,EAAE,OAAC,CAAC,MAAM,EAAE;YAClB,MAAM,EAAE,OAAC;iBACN,MAAM,CAAC;gBACN,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE;aACrB,CAAC;iBACD,QAAQ,EAAE;SACd,CAAC;QACF,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,KAAK;KACN,CAAC,CAAC;IAIH,IAAI,MAAM,GAAW,QAAQ,CAAC,MAAM,CAAC;IACrC,IAAI,MAAM,GAAqC,QAAQ,CAAC,MAAM,CAAC;IAE/D,IAAI,MAAM,KAAK,UAAU,IAAI,MAAM,KAAK,aAAa,EAAE,CAAC;QACtD,GAAG,CAAC;YACF,KAAK,EAAE,cAAc,EAAE,CAAC;YACxB,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;YAC1D,KAAK,EAAE,cAAc,EAAE,CAAC;YACxB,MAAM,SAAS,GAAG,MAAM,IAAA,mBAAW,EAAC;gBAClC,GAAG,EAAE,4BAA4B,OAAO,CAAC,GAAG,CAAC,gBAAgB,WAAW,QAAQ,CAAC,EAAE,EAAE;gBACrF,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE;oBACP,aAAa,EAAE,UAAU,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE;iBACzD;gBACD,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;oBACxB,MAAM,EAAE,0CAA0C;iBACnD,CAAC;gBACF,MAAM,EAAE,OAAC,CAAC,MAAM,CAAC;oBACf,MAAM,EAAE,OAAC,CAAC,MAAM,EAAE;oBAClB,MAAM,EAAE,OAAC;yBACN,MAAM,CAAC;wBACN,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE;qBACrB,CAAC;yBACD,QAAQ,EAAE;iBACd,CAAC;gBACF,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK;aACN,CAAC,CAAC;YACH,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;YAC1B,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;QAC5B,CAAC,QAAQ,MAAM,KAAK,WAAW,IAAI,MAAM,KAAK,QAAQ,EAAE;IAC1D,CAAC;IAED,IAAI,MAAM,KAAK,QAAQ,EAAE,CAAC;QACxB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;IACnD,CAAC;IAED,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAClD,CAAC;IAED,MAAM,eAAe,GAAG;QACtB,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,IAAI,EAAE,MAAM,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;KAC3D,CAAC;IAEF,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,CAAC;QAC5C,IAAI,CAAC;YACH,MAAM,IAAA,oCAAoB,EAAC,aAAa,EAAE,eAAe,CAAC,CAAC;QAC7D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,2BAA2B,EAAE;gBAC5C,KAAK;gBACL,YAAY;aACb,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,OAAO,eAAe,CAAC;AACzB,CAAC;AAED,KAAK,UAAU,qBAAqB,CAClC,IAAU,EACV,YAAoB;IAEpB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wCAAwC,EAAE,EAAE,YAAY,EAAE,CAAC,CAAC;IAE9E,MAAM,MAAM,GAAG,MAAM,IAAA,mBAAQ,EAAC,MAAM,IAAA,mBAAQ,EAAC,YAAY,CAAC,CAAC,CAAC;IAC5D,MAAM,OAAO,GAAG,IAAA,qBAAU,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAExC,OAAO;QACL,QAAQ,EAAE,OAAO;QACjB,IAAI,EAAE,OAAO;KACd,CAAC;AACJ,CAAC;AAEM,KAAK,UAAU,SAAS,CAC7B,IAAU,EACV,SAA6B;IAE7B,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAE7B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QAC3B,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE,CAAC;YAChE,MAAM,OAAO,GAAG,CAAC,MAAM,IAAA,mBAAQ,EAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAClE,QAAQ,CACT,CAAC;YACF,OAAO;gBACL,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,GAAG;gBAC1D,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM;gBAEnC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,OAAO;gBAEjB,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS;aACtC,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,GAAG,MAAM,IAAA,gCAAiB,EAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,GAAG,EAAE;gBAClE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;aAC9B,CAAC,CAAC;YAEH,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YACrD,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC;gBAC1C,kCAAkC;gBAClC,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE,CAAC;oBACnC,MAAM,IAAI,uBAAe,EAAE,CAAC;gBAC9B,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,yBAAiB,EAAE,CAAC;gBAChC,CAAC;YACH,CAAC;YAED,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC/C,OAAO;gBACL,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG;gBACtB,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;gBAEhC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,OAAO;gBAEjB,SAAS,EAAE,OAAO;aACnB,CAAC;QACJ,CAAC;IACH,CAAC;IAED,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,GAC9B,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI;QACzD,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;QACzE,CAAC,CAAC,MAAM,IAAA,2BAAY,EAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,GAAG,EAAE;YACzD,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;SAC9B,CAAC,CAAC;IAET,IAAK,QAAgB,CAAC,OAAO,EAAE,CAAC;QAC9B,2BAA2B;QAC3B,MAAM,CAAC,GAAa,QAAe,CAAC;QACpC,MAAM,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACzC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC;YAC1C,kCAAkC;YAClC,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE,CAAC;gBACnC,MAAM,IAAI,uBAAe,EAAE,CAAC;YAC9B,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,yBAAiB,EAAE,CAAC;YAChC,CAAC;QACH,CAAC;IACH,CAAC;IAED,MAAM,SAAS,GAAG,MAAM,IAAA,yBAAY,EAAC,YAAY,CAAC,CAAC;IACnD,IAAI,SAAS,GAAG,qBAAqB,GAAG,CAAC,SAAS,IAAI,QAAQ,CAAC,EAAE,CAAC;QAChE,MAAM,IAAI,gCAAwB,CAChC,SAAS,EACT,SAAS,GAAG,qBAAqB,GAAG,IAAI,CACzC,CAAC;IACJ,CAAC;IAED,IAAI,MAAM,GAA8B,IAAI,CAAC;IAE7C,MAAM,aAAa,GAAG,CAAC,MAAM,IAAA,mBAAQ,EAAC,YAAY,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAExE,4CAA4C;IAC5C,IACE,aAAa,CAAC,MAAM,GAAG,aAAa;QACpC,OAAO,CAAC,GAAG,CAAC,iBAAiB;QAC7B,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAC5B,CAAC;QACD,IAAI,CAAC;YACH,MAAM,GAAG,MAAM,qBAAqB,CAClC;gBACE,GAAG,IAAI;gBACP,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;oBACxB,MAAM,EAAE,iCAAiC;iBAC1C,CAAC;aACH,EACD,YAAY,EACZ,SAAS,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,EAC5D,aAAa,CACd,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IACE,KAAK,YAAY,0BAAkB;gBACnC,KAAK,YAAY,oBAAY,EAC7B,CAAC;gBACD,MAAM,KAAK,CAAC;YACd,CAAC;iBAAM,IACL,CAAC,KAAK,YAAY,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,cAAc,CAAC;gBACzD,CAAC,KAAK,YAAY,KAAK;oBACrB,KAAK,CAAC,OAAO,KAAK,gBAAgB;oBAClC,KAAK,CAAC,KAAK;oBACX,KAAK,CAAC,KAAK,YAAY,KAAK;oBAC5B,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,cAAc,CAAC,EACtC,CAAC;gBACD,MAAM,IAAI,oBAAY,CACpB,qFAAqF,CACtF,CAAC;YACJ,CAAC;YACD,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,sFAAsF,EACtF,EAAE,KAAK,EAAE,CACV,CAAC;YACF,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IAED,wDAAwD;IACxD,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,MAAM,GAAG,MAAM,qBAAqB,CAClC;YACE,GAAG,IAAI;YACP,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;gBACxB,MAAM,EAAE,iCAAiC;aAC1C,CAAC;SACH,EACD,YAAY,CACb,CAAC;IACJ,CAAC;IAED,MAAM,IAAA,iBAAM,EAAC,YAAY,CAAC,CAAC;IAE3B,OAAO;QACL,GAAG,EAAE,QAAQ,CAAC,GAAG,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,GAAG;QAClD,UAAU,EAAE,QAAQ,CAAC,MAAM;QAC3B,IAAI,EAAE,MAAM,EAAE,IAAI,IAAI,EAAE;QACxB,QAAQ,EAAE,MAAM,EAAE,QAAQ,IAAI,EAAE;QAChC,QAAQ,EAAE,SAAS;QAEnB,SAAS,EAAE,OAAO;KACnB,CAAC;AACJ,CAAC","sourcesContent":["import { Meta } from \"../..\";\nimport { EngineScrapeResult } from \"..\";\nimport * as marked from \"marked\";\nimport { robustFetch } from \"../../lib/fetch\";\nimport { z } from \"zod\";\nimport * as Sentry from \"@sentry/node\";\nimport escapeHtml from \"escape-html\";\nimport PdfParse from \"pdf-parse\";\nimport { downloadFile, fetchFileToBuffer } from \"../utils/downloadFile\";\nimport {\n  PDFAntibotError,\n  PDFInsufficientTimeError,\n  PDFPrefetchFailed,\n  RemoveFeatureError,\n  TimeoutError,\n} from \"../../error\";\nimport { readFile, unlink } from \"node:fs/promises\";\nimport path from \"node:path\";\nimport type { Response } from \"undici\";\nimport { getPageCount } from \"../../../../lib/pdf-parser\";\nimport { getPdfResultFromCache, savePdfResultToCache } from \"../../../../lib/gcs-pdf-cache\";\n\ntype PDFProcessorResult = { html: string; markdown?: string };\n\nconst MAX_FILE_SIZE = 19 * 1024 * 1024; // 19MB\nconst MILLISECONDS_PER_PAGE = 150;\n\nasync function scrapePDFWithRunPodMU(\n  meta: Meta,\n  tempFilePath: string,\n  timeToRun: number | undefined,\n  base64Content: string,\n): Promise<PDFProcessorResult> {\n  meta.logger.debug(\"Processing PDF document with RunPod MU\", {\n    tempFilePath,\n  });\n\n  const preCacheCheckStartTime = Date.now();\n\n  try {\n    const cachedResult = await getPdfResultFromCache(base64Content);\n    if (cachedResult) {\n      meta.logger.info(\"Using cached RunPod MU result for PDF\", {\n        tempFilePath,\n      });\n      return cachedResult;\n    }\n  } catch (error) {\n    meta.logger.warn(\"Error checking PDF cache, proceeding with RunPod MU\", {\n      error,\n      tempFilePath,\n    });\n  }\n\n  const timeout = timeToRun\n    ? timeToRun - (Date.now() - preCacheCheckStartTime)\n    : undefined;\n  if (timeout && timeout < 0) {\n    throw new TimeoutError(\"MU PDF parser already timed out before call\");\n  }\n\n  const abort = timeout ? AbortSignal.timeout(timeout) : undefined;\n\n  const podStart = await robustFetch({\n    url:\n      \"https://api.runpod.ai/v2/\" + process.env.RUNPOD_MUV2_POD_ID + \"/runsync\",\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${process.env.RUNPOD_MU_API_KEY}`,\n    },\n    body: {\n      input: {\n        file_content: base64Content,\n        filename: path.basename(tempFilePath) + \".pdf\",\n        timeout,\n        created_at: Date.now(),\n      },\n    },\n    logger: meta.logger.child({\n      method: \"scrapePDFWithRunPodMU/runsync/robustFetch\",\n    }),\n    schema: z.object({\n      id: z.string(),\n      status: z.string(),\n      output: z\n        .object({\n          markdown: z.string(),\n        })\n        .optional(),\n    }),\n    mock: meta.mock,\n    abort,\n  });\n\n\n\n  let status: string = podStart.status;\n  let result: { markdown: string } | undefined = podStart.output;\n\n  if (status === \"IN_QUEUE\" || status === \"IN_PROGRESS\") {\n    do {\n      abort?.throwIfAborted();\n      await new Promise((resolve) => setTimeout(resolve, 2500));\n      abort?.throwIfAborted();\n      const podStatus = await robustFetch({\n        url: `https://api.runpod.ai/v2/${process.env.RUNPOD_MU_POD_ID}/status/${podStart.id}`,\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${process.env.RUNPOD_MU_API_KEY}`,\n        },\n        logger: meta.logger.child({\n          method: \"scrapePDFWithRunPodMU/status/robustFetch\",\n        }),\n        schema: z.object({\n          status: z.string(),\n          output: z\n            .object({\n              markdown: z.string(),\n            })\n            .optional(),\n        }),\n        mock: meta.mock,\n        abort,\n      });\n      status = podStatus.status;\n      result = podStatus.output;\n    } while (status !== \"COMPLETED\" && status !== \"FAILED\");\n  }\n\n  if (status === \"FAILED\") {\n    throw new Error(\"RunPod MU failed to parse PDF\");\n  }\n\n  if (!result) {\n    throw new Error(\"RunPod MU returned no result\");\n  }\n\n  const processorResult = {\n    markdown: result.markdown,\n    html: await marked.parse(result.markdown, { async: true }),\n  };\n\n  if (!meta.internalOptions.zeroDataRetention) {\n    try {\n      await savePdfResultToCache(base64Content, processorResult);\n    } catch (error) {\n      meta.logger.warn(\"Error saving PDF to cache\", {\n        error,\n        tempFilePath,\n      });\n    }\n  }\n\n  return processorResult;\n}\n\nasync function scrapePDFWithParsePDF(\n  meta: Meta,\n  tempFilePath: string,\n): Promise<PDFProcessorResult> {\n  meta.logger.debug(\"Processing PDF document with parse-pdf\", { tempFilePath });\n\n  const result = await PdfParse(await readFile(tempFilePath));\n  const escaped = escapeHtml(result.text);\n\n  return {\n    markdown: escaped,\n    html: escaped,\n  };\n}\n\nexport async function scrapePDF(\n  meta: Meta,\n  timeToRun: number | undefined,\n): Promise<EngineScrapeResult> {\n  const startTime = Date.now();\n\n  if (!meta.options.parsePDF) {\n    if (meta.pdfPrefetch !== undefined && meta.pdfPrefetch !== null) {\n      const content = (await readFile(meta.pdfPrefetch.filePath)).toString(\n        \"base64\",\n      );\n      return {\n        url: meta.pdfPrefetch.url ?? meta.rewrittenUrl ?? meta.url,\n        statusCode: meta.pdfPrefetch.status,\n\n        html: content,\n        markdown: content,\n\n        proxyUsed: meta.pdfPrefetch.proxyUsed,\n      };\n    } else {\n      const file = await fetchFileToBuffer(meta.rewrittenUrl ?? meta.url, {\n        headers: meta.options.headers,\n      });\n\n      const ct = file.response.headers.get(\"Content-Type\");\n      if (ct && !ct.includes(\"application/pdf\")) {\n        // if downloaded file wasn't a PDF\n        if (meta.pdfPrefetch === undefined) {\n          throw new PDFAntibotError();\n        } else {\n          throw new PDFPrefetchFailed();\n        }\n      }\n\n      const content = file.buffer.toString(\"base64\");\n      return {\n        url: file.response.url,\n        statusCode: file.response.status,\n\n        html: content,\n        markdown: content,\n\n        proxyUsed: \"basic\",\n      };\n    }\n  }\n\n  const { response, tempFilePath } =\n    meta.pdfPrefetch !== undefined && meta.pdfPrefetch !== null\n      ? { response: meta.pdfPrefetch, tempFilePath: meta.pdfPrefetch.filePath }\n      : await downloadFile(meta.id, meta.rewrittenUrl ?? meta.url, {\n          headers: meta.options.headers,\n        });\n\n  if ((response as any).headers) {\n    // if downloadFile was used\n    const r: Response = response as any;\n    const ct = r.headers.get(\"Content-Type\");\n    if (ct && !ct.includes(\"application/pdf\")) {\n      // if downloaded file wasn't a PDF\n      if (meta.pdfPrefetch === undefined) {\n        throw new PDFAntibotError();\n      } else {\n        throw new PDFPrefetchFailed();\n      }\n    }\n  }\n\n  const pageCount = await getPageCount(tempFilePath);\n  if (pageCount * MILLISECONDS_PER_PAGE > (timeToRun ?? Infinity)) {\n    throw new PDFInsufficientTimeError(\n      pageCount,\n      pageCount * MILLISECONDS_PER_PAGE + 5000,\n    );\n  }\n\n  let result: PDFProcessorResult | null = null;\n\n  const base64Content = (await readFile(tempFilePath)).toString(\"base64\");\n\n  // First try RunPod MU if conditions are met\n  if (\n    base64Content.length < MAX_FILE_SIZE &&\n    process.env.RUNPOD_MU_API_KEY &&\n    process.env.RUNPOD_MU_POD_ID\n  ) {\n    try {\n      result = await scrapePDFWithRunPodMU(\n        {\n          ...meta,\n          logger: meta.logger.child({\n            method: \"scrapePDF/scrapePDFWithRunPodMU\",\n          }),\n        },\n        tempFilePath,\n        timeToRun ? timeToRun - (Date.now() - startTime) : undefined,\n        base64Content,\n      );\n    } catch (error) {\n      if (\n        error instanceof RemoveFeatureError ||\n        error instanceof TimeoutError\n      ) {\n        throw error;\n      } else if (\n        (error instanceof Error && error.name === \"TimeoutError\") ||\n        (error instanceof Error &&\n          error.message === \"Request failed\" &&\n          error.cause &&\n          error.cause instanceof Error &&\n          error.cause.name === \"TimeoutError\")\n      ) {\n        throw new TimeoutError(\n          \"PDF parsing timed out, please increase the timeout parameter in your scrape request\",\n        );\n      }\n      meta.logger.warn(\n        \"RunPod MU failed to parse PDF (could be due to timeout) -- falling back to parse-pdf\",\n        { error },\n      );\n      Sentry.captureException(error);\n    }\n  }\n\n  // If RunPod MU failed or wasn't attempted, use PdfParse\n  if (!result) {\n    result = await scrapePDFWithParsePDF(\n      {\n        ...meta,\n        logger: meta.logger.child({\n          method: \"scrapePDF/scrapePDFWithParsePDF\",\n        }),\n      },\n      tempFilePath,\n    );\n  }\n\n  await unlink(tempFilePath);\n\n  return {\n    url: response.url ?? meta.rewrittenUrl ?? meta.url,\n    statusCode: response.status,\n    html: result?.html ?? \"\",\n    markdown: result?.markdown ?? \"\",\n    numPages: pageCount,\n\n    proxyUsed: \"basic\",\n  };\n}\n"]}