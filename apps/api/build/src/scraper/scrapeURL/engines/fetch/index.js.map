{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/scraper/scrapeURL/engines/fetch/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as undici from \"undici\";\nimport { EngineScrapeResult } from \"..\";\nimport { Meta } from \"../..\";\nimport { TimeoutError } from \"../../error\";\nimport { specialtyScrapeCheck } from \"../utils/specialtyHandler\";\nimport {\n  InsecureConnectionError,\n  makeSecureDispatcher,\n} from \"../utils/safeFetch\";\nimport { MockState, saveMock } from \"../../lib/mock\";\nimport { TextDecoder } from \"util\";\n\nexport async function scrapeURLWithFetch(\n  meta: Meta,\n  timeToRun: number | undefined,\n): Promise<EngineScrapeResult> {\n  const timeout = timeToRun ?? 300000;\n\n  const mockOptions = {\n    url: meta.rewrittenUrl ?? meta.url,\n\n    // irrelevant\n    method: \"GET\",\n    ignoreResponse: false,\n    ignoreFailure: false,\n    tryCount: 1,\n  };\n\n  let response: {\n    url: string;\n    body: string,\n    status: number;\n    headers: [string, string][];\n  };\n\n  if (meta.mock !== null) {\n    const makeRequestTypeId = (\n      request: MockState[\"requests\"][number][\"options\"],\n    ) => request.url + \";\" + request.method;\n\n    const thisId = makeRequestTypeId(mockOptions);\n    const matchingMocks = meta.mock.requests\n      .filter((x) => makeRequestTypeId(x.options) === thisId)\n      .sort((a, b) => a.time - b.time);\n    const nextI = meta.mock.tracker[thisId] ?? 0;\n    meta.mock.tracker[thisId] = nextI + 1;\n\n    if (!matchingMocks[nextI]) {\n      throw new Error(\"Failed to mock request -- no mock targets found.\");\n    }\n\n    response = {\n      ...matchingMocks[nextI].result,\n    };\n  } else {\n    try {\n      const x = await Promise.race([\n        undici.fetch(meta.rewrittenUrl ?? meta.url, {\n          dispatcher: await makeSecureDispatcher(meta.rewrittenUrl ?? meta.url),\n          redirect: \"follow\",\n          headers: meta.options.headers,\n          signal: meta.internalOptions.abort ?? AbortSignal.timeout(timeout),\n        }),\n        (async () => {\n          await new Promise((resolve) =>\n            setTimeout(() => resolve(null), timeout),\n          );\n          throw new TimeoutError(\n            \"Fetch was unable to scrape the page before timing out\",\n            { cause: { timeout } },\n          );\n        })(),\n      ]);\n\n      const buf = Buffer.from(await x.arrayBuffer());\n      let text = buf.toString(\"utf8\");\n      const charset = (text.match(/<meta\\b[^>]*charset\\s*=\\s*[\"']?([^\"'\\s\\/>]+)/i) ?? [])[1]\n      try {\n        if (charset) {\n          text = new TextDecoder(charset.trim()).decode(buf);\n        }\n      } catch (error) {\n        meta.logger.warn(\"Failed to re-parse with correct charset\", { charset, error })\n      }\n\n      response = {\n        url: x.url,\n        body: text,\n        status: x.status,\n        headers: [...x.headers],\n      };\n\n      if (meta.mock === null) {\n        await saveMock(\n          mockOptions,\n          response,\n        );\n      }\n    } catch (error) {\n      if (\n        error instanceof TypeError &&\n        error.cause instanceof InsecureConnectionError\n      ) {\n        throw error.cause;\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  await specialtyScrapeCheck(\n    meta.logger.child({ method: \"scrapeURLWithFetch/specialtyScrapeCheck\" }),\n    Object.fromEntries(response.headers as any),\n  );\n\n  return {\n    url: response.url,\n    html: response.body,\n    statusCode: response.status,\n    contentType: (response.headers.find(\n      (x) => x[0].toLowerCase() === \"content-type\",\n    ) ?? [])[1] ?? undefined,\n\n    proxyUsed: \"basic\",\n  };\n}\n"]}