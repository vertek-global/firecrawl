{"version":3,"file":"extractLinks.js","sourceRoot":"","sources":["../../../../../src/scraper/scrapeURL/lib/extractLinks.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO: refactor\nimport { load } from \"cheerio\"; // rustified\nimport { logger } from \"../../../lib/logger\";\nimport { extractLinks as _extractLinks } from \"../../../lib/html-transformer\";\n\nasync function extractLinksRust(html: string, baseUrl: string): Promise<string[]> {\n  const hrefs = await _extractLinks(html);\n\n  const links: string[] = [];\n\n  hrefs.forEach(href => {\n    href = href.trim();\n    try {\n      if (href.startsWith(\"http://\") || href.startsWith(\"https://\")) {\n        // Absolute URL, add as is\n        links.push(href);\n      } else if (href.startsWith(\"/\")) {\n        // Relative URL starting with '/', append to origin\n        links.push(new URL(href, baseUrl).href);\n      } else if (!href.startsWith(\"#\") && !href.startsWith(\"mailto:\")) {\n        // Relative URL not starting with '/', append to base URL\n        links.push(new URL(href, baseUrl).href);\n      } else if (href.startsWith(\"mailto:\")) {\n        // mailto: links, add as is\n        links.push(href);\n      }\n      // Fragment-only links (#) are ignored\n    } catch (error) {\n      logger.error(\n        `Failed to construct URL for href: ${href} with base: ${baseUrl}`,\n        { error },\n      );\n    }\n  });\n\n  // Remove duplicates and return\n  return [...new Set(links)];\n}\n\nexport async function extractLinks(html: string, baseUrl: string): Promise<string[]> {\n  try {\n    return await extractLinksRust(html, baseUrl);\n  } catch (error) {\n    logger.warn(\"Failed to call html-transformer! Falling back to cheerio...\", {\n      error,\n      module: \"scrapeURL\", method: \"extractLinks\"\n    });\n  }\n\n  const $ = load(html);\n  const links: string[] = [];\n\n  $(\"a\").each((_, element) => {\n    let href = $(element).attr(\"href\");\n    if (href) {\n      href = href.trim();\n      try {\n        if (href.startsWith(\"http://\") || href.startsWith(\"https://\")) {\n          // Absolute URL, add as is\n          links.push(href);\n        } else if (href.startsWith(\"/\")) {\n          // Relative URL starting with '/', append to origin\n          links.push(new URL(href, baseUrl).href);\n        } else if (!href.startsWith(\"#\") && !href.startsWith(\"mailto:\")) {\n          // Relative URL not starting with '/', append to base URL\n          links.push(new URL(href, baseUrl).href);\n        } else if (href.startsWith(\"mailto:\")) {\n          // mailto: links, add as is\n          links.push(href);\n        }\n        // Fragment-only links (#) are ignored\n      } catch (error) {\n        logger.error(\n          `Failed to construct URL for href: ${href} with base: ${baseUrl}`,\n          { error },\n        );\n      }\n    }\n  });\n\n  // Remove duplicates and return\n  return [...new Set(links)];\n}\n"]}