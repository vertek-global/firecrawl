{"version":3,"file":"fetch.js","sourceRoot":"","sources":["../../../../../src/scraper/scrapeURL/lib/fetch.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"winston\";\nimport { z, ZodError } from \"zod\";\nimport * as Sentry from \"@sentry/node\";\nimport { MockState, saveMock } from \"./mock\";\nimport { TimeoutSignal } from \"../../../controllers/v1/types\";\nimport { fireEngineURL } from \"../engines/fire-engine/scrape\";\nimport { fetch, RequestInit, Response, FormData, Agent } from \"undici\";\nimport { cacheableLookup } from \"./cacheableLookup\";\nimport { log } from \"console\";\n\nexport type RobustFetchParams<Schema extends z.Schema<any>> = {\n  url: string;\n  logger: Logger;\n  method: \"GET\" | \"POST\" | \"DELETE\" | \"PUT\";\n  body?: any;\n  headers?: Record<string, string>;\n  schema?: Schema;\n  dontParseResponse?: boolean;\n  ignoreResponse?: boolean;\n  ignoreFailure?: boolean;\n  requestId?: string;\n  tryCount?: number;\n  tryCooldown?: number;\n  mock: MockState | null;\n  abort?: AbortSignal;\n};\n\nexport async function robustFetch<\n  Schema extends z.Schema<any>,\n  Output = z.infer<Schema>,\n>({\n  url,\n  logger,\n  method = \"GET\",\n  body,\n  headers,\n  schema,\n  ignoreResponse = false,\n  ignoreFailure = false,\n  requestId = crypto.randomUUID(),\n  tryCount = 1,\n  tryCooldown,\n  mock,\n  abort,\n}: RobustFetchParams<Schema>): Promise<Output> {\n  abort?.throwIfAborted();\n  \n  const params = {\n    url,\n    logger,\n    method,\n    body,\n    headers,\n    schema,\n    ignoreResponse,\n    ignoreFailure,\n    tryCount,\n    tryCooldown,\n    abort,\n  };\n\n  // omit pdf file content from logs\n  const logParams = {\n    ...params,\n    body: body?.input ? {\n      ...body,\n      input: {\n        ...body.input,\n        file_content: undefined,\n      },\n    } : body,\n    logger: undefined,\n  }\n\n  let response: {\n    status: number;\n    headers: Headers;\n    body: string;\n  };\n\n  if (mock === null) {\n    let request: Response;\n    try {\n      request = await fetch(url, {\n        method,\n        headers: {\n          ...(body instanceof FormData\n            ? {}\n            : body !== undefined\n              ? {\n                  \"Content-Type\": \"application/json\",\n                }\n              : {}),\n          ...(headers !== undefined ? headers : {}),\n        },\n        signal: abort,\n        dispatcher: new Agent({\n          headersTimeout: 0,\n          bodyTimeout: 0,\n          connect: {\n            lookup: cacheableLookup.lookup,\n          },\n        }),\n        ...(body instanceof FormData\n          ? {\n              body,\n            }\n          : body !== undefined\n            ? {\n                body: JSON.stringify(body),\n              }\n            : {}),\n      });\n    } catch (error) {\n      if (error instanceof TimeoutSignal) {\n        throw error;\n      } else if (!ignoreFailure) {\n        Sentry.captureException(error);\n        if (tryCount > 1) {\n          logger.debug(\n            \"Request failed, trying \" + (tryCount - 1) + \" more times\",\n            { params: logParams, error, requestId },\n          );\n          return await robustFetch({\n            ...params,\n            requestId,\n            tryCount: tryCount - 1,\n            mock,\n          });\n        } else {\n          logger.debug(\"Request failed\", { params: logParams, error, requestId });\n          throw new Error(\"Request failed\", {\n            cause: {\n              params,\n              requestId,\n              error,\n            },\n          });\n        }\n      } else {\n        return null as Output;\n      }\n    }\n\n    if (ignoreResponse === true) {\n      return null as Output;\n    }\n\n    const resp = await request.text();\n    response = {\n      status: request.status,\n      headers: request.headers,\n      body: resp, // NOTE: can this throw an exception?\n    };\n  } else {\n    if (ignoreResponse === true) {\n      return null as Output;\n    }\n\n    const makeRequestTypeId = (\n      request: (typeof mock)[\"requests\"][number][\"options\"],\n    ) => {\n      let trueUrl = request.url.startsWith(fireEngineURL)\n        ? request.url.replace(fireEngineURL, \"<fire-engine>\")\n        : request.url;\n      \n      let out = trueUrl + \";\" + request.method;\n      if (\n        trueUrl.startsWith(\"<fire-engine>\") &&\n        request.method === \"POST\"\n      ) {\n        out += \"f-e;\" + request.body?.engine + \";\" + request.body?.url;\n      }\n      return out;\n    };\n\n    const thisId = makeRequestTypeId(params);\n    const matchingMocks = mock.requests\n      .filter((x) => makeRequestTypeId(x.options) === thisId)\n      .sort((a, b) => a.time - b.time);\n    const nextI = mock.tracker[thisId] ?? 0;\n    mock.tracker[thisId] = nextI + 1;\n\n    if (!matchingMocks[nextI]) {\n      throw new Error(\"Failed to mock request -- no mock targets found.\");\n    }\n\n    response = {\n      ...matchingMocks[nextI].result,\n      headers: new Headers(matchingMocks[nextI].result.headers),\n    };\n  }\n\n  if (response.status >= 300) {\n    if (tryCount > 1) {\n      logger.debug(\n        \"Request sent failure status, trying \" + (tryCount - 1) + \" more times\",\n        { params: logParams, response: { status: response.status, body: response.body }, requestId },\n      );\n      if (tryCooldown !== undefined) {\n        await new Promise((resolve) =>\n          setTimeout(() => resolve(null), tryCooldown),\n        );\n      }\n      return await robustFetch({\n        ...params,\n        requestId,\n        tryCount: tryCount - 1,\n        mock,\n      });\n    } else {\n      logger.debug(\"Request sent failure status\", {\n        params: logParams,\n        response: { status: response.status, body: response.body },\n        requestId,\n      });\n      throw new Error(\"Request sent failure status\", {\n        cause: {\n          params: logParams,\n          response: { status: response.status, body: response.body },\n          requestId,\n        },\n      });\n    }\n  }\n\n  if (mock === null) {\n    await saveMock(\n      {\n        ...params,\n        logger: undefined,\n        schema: undefined,\n        headers: undefined,\n      },\n      response,\n    );\n  }\n\n  let data: Output;\n  try {\n    data = JSON.parse(response.body);\n  } catch (error) {\n    logger.debug(\"Request sent malformed JSON\", {\n      params: logParams,\n      response: { status: response.status, body: response.body },\n      requestId,\n    });\n    throw new Error(\"Request sent malformed JSON\", {\n      cause: {\n        params: logParams,\n        response,\n        requestId,\n      },\n    });\n  }\n\n  if (schema) {\n    try {\n      data = schema.parse(data);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        logger.debug(\"Response does not match provided schema\", {\n          params: logParams,\n          response: { status: response.status, body: response.body },\n          requestId,\n          error,\n          schema,\n        });\n        throw new Error(\"Response does not match provided schema\", {\n          cause: {\n            params: logParams,\n            response,\n            requestId,\n            error,\n            schema,\n          },\n        });\n      } else {\n        logger.debug(\"Parsing response with provided schema failed\", {\n          params: logParams,\n          response: { status: response.status, body: response.body },\n          requestId,\n          error,\n          schema,\n        });\n        throw new Error(\"Parsing response with provided schema failed\", {\n          cause: {\n            params: logParams,\n            response,\n            requestId,\n            error,\n            schema,\n          },\n        });\n      }\n    }\n  }\n\n  return data;\n}\n"]}