{"version":3,"file":"smartScrape.js","sourceRoot":"","sources":["../../../../../src/scraper/scrapeURL/lib/smartScrape.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from \"zod\";\nimport { logger as _logger } from \"../../../lib/logger\";\nimport { robustFetch } from \"./fetch\";\nimport fs from \"fs/promises\";\nimport { configDotenv } from \"dotenv\";\nimport { CostLimitExceededError, CostTracking } from \"../../../lib/extract/extraction-service\";\nconfigDotenv();\n\n// Define schemas outside the function scope\nconst tokenUsageDetailSchema = z.object({\n  input_tokens: z.number().int(),\n  output_tokens: z.number().int(),\n  total_cost: z.number().nullable(), // Allows number or null\n});\n\n// Schema for an individual scraped page object\nconst scrapedPageSchema = z.object({\n  html: z.string(),\n  reason: z.string(),\n  page: z.union([z.string(), z.number()]),\n});\n\n// Main schema for the structure returned by the smart-scrape endpoint\nconst smartScrapeResultSchema = z.object({\n  sessionId: z.string(),\n  success: z.boolean(),\n  scrapedPages: z.array(scrapedPageSchema),\n  tokenUsage: z.number(),\n\n  // z.record(\n  //   z.string(), // Key is the model name (string)\n  //   tokenUsageDetailSchema, // Value matches the detail schema\n  // ),\n});\n\n// Infer the TypeScript type from the Zod schema\nexport type SmartScrapeResult = z.infer<typeof smartScrapeResultSchema>;\n\n/**\n * Sends a POST request to the internal /smart-scrape endpoint to extract\n * structured data from a URL based on a prompt.\n *\n * @param url The URL of the page to scrape.\n * @param prompt The prompt guiding the data extraction.\n * @returns A promise that resolves to an object matching the SmartScrapeResult type.\n * @throws Throws an error if the request fails or the response is invalid.\n */\nexport async function smartScrape({\n  url,\n  prompt,\n  sessionId,\n  extractId,\n  scrapeId,\n  beforeSubmission,\n  costTracking,\n}: {\n  url: string,\n  prompt: string,\n  sessionId?: string,\n  extractId?: string,\n  scrapeId?: string,\n  beforeSubmission?: () => unknown,\n  costTracking: CostTracking,\n}): Promise<SmartScrapeResult> {\n  let logger = _logger.child({\n    method: \"smartScrape\",\n    module: \"smartScrape\",\n    extractId,\n    url,\n    prompt,\n    sessionId,\n    scrapeId,\n  });\n  try {\n    logger.info(\"Initiating smart scrape request\");\n\n    // Pass schema type as generic parameter to robustFeth\n    const response = await robustFetch<typeof smartScrapeResultSchema>({\n      url: `${process.env.SMART_SCRAPE_API_URL}/smart-scrape`,\n      method: \"POST\",\n      body: {\n        url,\n        prompt,\n        userProvidedId: sessionId ?? undefined,\n        extractId,\n        scrapeId,\n        models: {\n          thinkingModel: {\n            model: \"gemini-2.5-pro\",\n            provider: \"vertex\",\n            supportTools: true,\n            toolChoice: \"required\",\n            cost: {\n              input: 1.3,\n              output: 5,\n            },\n          },\n          toolModel: {\n            model: \"gemini-2.0-flash\",\n            provider: \"google\",\n          },\n        },\n      },\n      schema: smartScrapeResultSchema, // Pass the schema instance for validation\n      logger,\n      mock: null, // Keep mock null if not mocking\n    });\n\n    // Check if the response indicates a 500 error\n    // Use type assertion to handle the error response structure\n    const errorResponse = response as unknown as {\n      success: boolean;\n      error?: string;\n      details?: string;\n    };\n\n    if (\n      errorResponse &&\n      errorResponse.success === false &&\n      errorResponse.error\n    ) {\n      if ((errorResponse as any).tokenUsage) {\n        logger.info(\"Failed smart scrape cost $\" + (errorResponse as any).tokenUsage);\n        costTracking.addCall({\n          type: \"smartScrape\",\n          cost: (errorResponse as any).tokenUsage,\n          model: \"firecrawl/smart-scrape\",\n          metadata: {\n            module: \"smartScrape\",\n            method: \"smartScrape\",\n            url,\n            sessionId,\n          },\n        });\n      }\n\n      if (errorResponse.error === \"Cost limit exceeded\") {\n        throw new CostLimitExceededError();\n      }\n\n      logger.error(\"Smart scrape returned error response\", {\n        url,\n        prompt,\n        error: errorResponse.error,\n        details: errorResponse.details || \"No details provided\",\n      });\n      throw new Error(\n        `Smart scrape failed: ${errorResponse.error}${errorResponse.details ? ` - ${errorResponse.details}` : \"\"}`,\n      );\n    }\n\n    logger.info(\"Smart scrape successful\", {\n      sessionId: response.sessionId,\n    });\n\n    logger.info(\"Smart scrape cost $\" + response.tokenUsage);\n    costTracking.addCall({\n      type: \"smartScrape\",\n      cost: response.tokenUsage,\n      model: \"firecrawl/smart-scrape\",\n      metadata: {\n        module: \"smartScrape\",\n        method: \"smartScrape\",\n        url,\n        sessionId,\n      },\n    });\n\n    return response; // The response type now matches SmartScrapeResult\n  } catch (error) {\n    if (error instanceof CostLimitExceededError) {\n      throw error;\n    }\n\n    if (error instanceof Error && error.message === \"Request sent failure status\" && error.cause && (error.cause as any).response) {\n      const response = (error.cause as any).response;\n      try {\n        const json = JSON.parse(response.body);\n\n        if (json.tokenUsage) {\n          logger.info(\"Failed smart scrape cost $\" + json.tokenUsage);\n          costTracking.addCall({\n            type: \"smartScrape\",\n            cost: json.tokenUsage,\n            model: \"firecrawl/smart-scrape\",\n            metadata: {\n              module: \"smartScrape\",\n              method: \"smartScrape\",\n              url,\n              sessionId,\n            },\n          });\n        }\n\n        if (json.error === \"Cost limit exceeded\") {\n          throw new CostLimitExceededError();\n        }\n      } catch (e) {}\n    }\n\n    // Safely extract error information without circular references\n    const errorInfo = {\n      message: error instanceof Error ? error.message : String(error),\n      name: error instanceof Error ? error.name : \"Unknown\",\n      stack: error instanceof Error ? error.stack : undefined,\n      // Extract cause safely if it exists\n      cause:\n        error instanceof Error && error.cause\n          ? error.cause instanceof Error\n            ? {\n                message: error.cause.message,\n                name: error.cause.name,\n                stack: error.cause.stack,\n              }\n            : typeof error.cause === \"object\"\n              ? {\n                  ...Object.fromEntries(\n                    Object.entries(error.cause).filter(\n                      ([_, v]) => v !== null && typeof v !== \"object\",\n                    ),\n                  ),\n                  error:\n                    (error.cause as any)?.error?.message ||\n                    (error.cause as any)?.error,\n                }\n              : String(error.cause)\n          : undefined,\n    };\n\n    logger.error(\"Smart scrape request failed\", {\n      error: errorInfo\n    });\n\n    // Rethrowing the error to be handled by the caller\n    throw new Error(`Failed to smart scrape URL: ${url}`, { cause: error });\n  }\n}\n"]}