{"version":3,"file":"crawl.js","sourceRoot":"","sources":["../../../../src/controllers/v0/crawl.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\nimport { checkTeamCredits } from \"../../../src/services/billing/credit_billing\";\nimport { authenticateUser } from \"../auth\";\nimport { RateLimiterMode } from \"../../../src/types\";\nimport { addScrapeJob } from \"../../../src/services/queue-jobs\";\nimport { isUrlBlocked } from \"../../../src/scraper/WebScraper/utils/blocklist\";\nimport { logCrawl } from \"../../../src/services/logging/crawl_log\";\nimport { validateIdempotencyKey } from \"../../../src/services/idempotency/validate\";\nimport { createIdempotencyKey } from \"../../../src/services/idempotency/create\";\nimport {\n  defaultCrawlPageOptions,\n  defaultCrawlerOptions,\n  defaultOrigin,\n} from \"../../../src/lib/default-values\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { logger } from \"../../../src/lib/logger\";\nimport {\n  addCrawlJob,\n  addCrawlJobs,\n  crawlToCrawler,\n  finishCrawlKickoff,\n  lockURL,\n  lockURLs,\n  saveCrawl,\n  StoredCrawl,\n} from \"../../../src/lib/crawl-redis\";\nimport { redisEvictConnection } from \"../../../src/services/redis\";\nimport { checkAndUpdateURL } from \"../../../src/lib/validateUrl\";\nimport * as Sentry from \"@sentry/node\";\nimport { getJobPriority } from \"../../lib/job-priority\";\nimport { fromLegacyScrapeOptions, url as urlSchema } from \"../v1/types\";\nimport { ZodError } from \"zod\";\nimport { BLOCKLISTED_URL_MESSAGE } from \"../../lib/strings\";\n\nexport async function crawlController(req: Request, res: Response) {\n  try {\n    const auth = await authenticateUser(req, res, RateLimiterMode.Crawl);\n    if (!auth.success) {\n      return res.status(auth.status).json({ error: auth.error });\n    }\n\n    const { team_id, chunk } = auth;\n\n    if (chunk?.flags?.forceZDR) {\n      return res.status(400).json({ error: \"Your team has zero data retention enabled. This is not supported on the v0 API. Please update your code to use the v1 API.\" });\n    }\n\n    redisEvictConnection.sadd(\"teams_using_v0\", team_id)\n      .catch(error => logger.error(\"Failed to add team to teams_using_v0\", { error, team_id }));\n\n    if (req.headers[\"x-idempotency-key\"]) {\n      const isIdempotencyValid = await validateIdempotencyKey(req);\n      if (!isIdempotencyValid) {\n        return res.status(409).json({ error: \"Idempotency key already used\" });\n      }\n      try {\n        createIdempotencyKey(req);\n      } catch (error) {\n        logger.error(error);\n        return res.status(500).json({ error: error.message });\n      }\n    }\n\n    const crawlerOptions = {\n      ...defaultCrawlerOptions,\n      ...req.body.crawlerOptions,\n    };\n    const pageOptions = { ...defaultCrawlPageOptions, ...req.body.pageOptions };\n\n    if (Array.isArray(crawlerOptions.includes)) {\n      for (const x of crawlerOptions.includes) {\n        try {\n          new RegExp(x);\n        } catch (e) {\n          return res.status(400).json({ error: e.message });\n        }\n      }\n    }\n\n    if (Array.isArray(crawlerOptions.excludes)) {\n      for (const x of crawlerOptions.excludes) {\n        try {\n          new RegExp(x);\n        } catch (e) {\n          return res.status(400).json({ error: e.message });\n        }\n      }\n    }\n\n    const limitCheck = req.body?.crawlerOptions?.limit ?? 1;\n    const {\n      success: creditsCheckSuccess,\n      message: creditsCheckMessage,\n      remainingCredits,\n    } = await checkTeamCredits(chunk, team_id, limitCheck);\n\n    if (!creditsCheckSuccess) {\n      return res.status(402).json({\n        error:\n          \"Insufficient credits. You may be requesting with a higher limit than the amount of credits you have left. If not, upgrade your plan at https://firecrawl.dev/pricing or contact us at help@firecrawl.com\",\n      });\n    }\n\n    // TODO: need to do this to v1\n    crawlerOptions.limit = Math.min(remainingCredits, crawlerOptions.limit);\n\n    let url = urlSchema.parse(req.body.url);\n    if (!url) {\n      return res.status(400).json({ error: \"Url is required\" });\n    }\n    if (typeof url !== \"string\") {\n      return res.status(400).json({ error: \"URL must be a string\" });\n    }\n    try {\n      url = checkAndUpdateURL(url).url;\n    } catch (e) {\n      return res\n        .status(e instanceof Error && e.message === \"Invalid URL\" ? 400 : 500)\n        .json({ error: e.message ?? e });\n    }\n\n    if (isUrlBlocked(url, auth.chunk?.flags ?? null)) {\n      return res.status(403).json({\n        error: BLOCKLISTED_URL_MESSAGE,\n      });\n    }\n\n    // if (mode === \"single_urls\" && !url.includes(\",\")) { // NOTE: do we need this?\n    //   try {\n    //     const a = new WebScraperDataProvider();\n    //     await a.setOptions({\n    //       jobId: uuidv4(),\n    //       mode: \"single_urls\",\n    //       urls: [url],\n    //       crawlerOptions: { ...crawlerOptions, returnOnlyUrls: true },\n    //       pageOptions: pageOptions,\n    //     });\n\n    //     const docs = await a.getDocuments(false, (progress) => {\n    //       job.updateProgress({\n    //         current: progress.current,\n    //         total: progress.total,\n    //         current_step: \"SCRAPING\",\n    //         current_url: progress.currentDocumentUrl,\n    //       });\n    //     });\n    //     return res.json({\n    //       success: true,\n    //       documents: docs,\n    //     });\n    //   } catch (error) {\n    //     logger.error(error);\n    //     return res.status(500).json({ error: error.message });\n    //   }\n    // }\n\n    const id = uuidv4();\n\n    await logCrawl(id, team_id);\n\n    const { scrapeOptions, internalOptions } = fromLegacyScrapeOptions(\n      pageOptions,\n      undefined,\n      undefined,\n      team_id\n    );\n    internalOptions.disableSmartWaitCache = true; // NOTE: smart wait disabled for crawls to ensure contentful scrape, speed does not matter\n    internalOptions.saveScrapeResultToGCS = process.env.GCS_FIRE_ENGINE_BUCKET_NAME ? true : false;\n    delete (scrapeOptions as any).timeout;\n\n    const sc: StoredCrawl = {\n      originUrl: url,\n      crawlerOptions,\n      scrapeOptions,\n      internalOptions,\n      team_id,\n      createdAt: Date.now(),\n    };\n\n    const crawler = crawlToCrawler(id, sc, auth.chunk?.flags ?? null);\n\n    try {\n      sc.robots = await crawler.getRobotsTxt();\n    } catch (_) {}\n\n    await saveCrawl(id, sc);\n\n    await finishCrawlKickoff(id);\n\n    const sitemap = sc.crawlerOptions.ignoreSitemap\n      ? 0\n      : await crawler.tryGetSitemap(async (urls) => {\n          if (urls.length === 0) return;\n\n          let jobPriority = await getJobPriority({\n            team_id,\n            basePriority: 21,\n          });\n          const jobs = urls.map((url) => {\n            const uuid = uuidv4();\n            return {\n              name: uuid,\n              data: {\n                url,\n                mode: \"single_urls\" as const,\n                crawlerOptions,\n                scrapeOptions,\n                internalOptions,\n                team_id,\n                origin: req.body.origin ?? defaultOrigin,\n                integration: req.body.integration,\n                crawl_id: id,\n                sitemapped: true,\n                zeroDataRetention: false, // not supported on v0\n              },\n              opts: {\n                jobId: uuid,\n                priority: jobPriority,\n              },\n            };\n          });\n\n          await lockURLs(\n            id,\n            sc,\n            jobs.map((x) => x.data.url),\n            logger,\n          );\n          await addCrawlJobs(\n            id,\n            jobs.map((x) => x.opts.jobId),\n            logger,\n          );\n          for (const job of jobs) {\n            // add with sentry instrumentation\n            await addScrapeJob(job.data, {}, job.opts.jobId);\n          }\n        });\n\n    if (sitemap === 0) {\n      await lockURL(id, sc, url);\n\n      // Not needed, first one should be 15.\n      // const jobPriority = await getJobPriority({team_id, basePriority: 10})\n\n      const jobId = uuidv4();\n      await addScrapeJob(\n        {\n          url,\n          mode: \"single_urls\",\n          crawlerOptions,\n          scrapeOptions,\n          internalOptions,\n          team_id,\n          origin: req.body.origin ?? defaultOrigin,\n          integration: req.body.integration,\n          crawl_id: id,\n          zeroDataRetention: false, // not supported on v0\n        },\n        {\n          priority: 15, // prioritize request 0 of crawl jobs same as scrape jobs\n        },\n        jobId,\n      );\n      await addCrawlJob(id, jobId, logger);\n    }\n\n    res.json({ jobId: id });\n  } catch (error) {\n    Sentry.captureException(error);\n    logger.error(error);\n    return res.status(500).json({\n      error: error instanceof ZodError ? \"Invalid URL\" : error.message,\n    });\n  }\n}\n"]}