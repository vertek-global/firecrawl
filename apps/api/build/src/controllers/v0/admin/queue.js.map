{"version":3,"file":"queue.js","sourceRoot":"","sources":["../../../../../src/controllers/v0/admin/queue.ts"],"names":[],"mappings":";;AAQA,oFAiDC;AAED,sDAQC;AAGD,4CAkBC;AAED,oDA8GC;AArMD,gDAA6C;AAC7C,mEAAiE;AACjE,qDAAuD;AACvD,0DAAkE;AAE3D,KAAK,UAAU,oCAAoC,CACxD,GAAY,EACZ,GAAa;IAEb,eAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;IAC/C,IAAI,CAAC;QACH,MAAM,WAAW,GAAG,IAAA,8BAAc,GAAE,CAAC;QACrC,MAAM,SAAS,GAAG,EAAE,CAAC;QACrB,MAAM,eAAe,GAAG,CAAC,CAAC,CAAC,6BAA6B;QACxD,MAAM,qBAAqB,GAAqB,EAAE,CAAC;QACnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC;YACzC,qBAAqB,CAAC,IAAI,CACxB,WAAW,CAAC,OAAO,CACjB,CAAC,WAAW,CAAC,EACb,CAAC,GAAG,SAAS,EACb,CAAC,GAAG,SAAS,GAAG,SAAS,EACzB,IAAI,CACL,CACF,CAAC;QACJ,CAAC;QACD,MAAM,aAAa,GAAU,CAC3B,MAAM,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CACzC,CAAC,IAAI,EAAE,CAAC;QACT,MAAM,aAAa,GACjB,aAAa,CAAC,MAAM,CAClB,CAAC,GAAG,EAAE,EAAE,CACN,GAAG,CAAC,UAAU,KAAK,SAAS;YAC5B,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CACpD,IAAI,EAAE,CAAC;QAEV,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACpD,CAAC;QAED,KAAK,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC;YAChC,IAAI,CAAC;gBACH,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;gBACnB,KAAK,EAAE,CAAC;YACV,CAAC;YAAC,OAAO,QAAQ,EAAE,CAAC;gBAClB,eAAM,CAAC,KAAK,CAAC,mCAAmC,GAAG,CAAC,EAAE,KAAK,QAAQ,EAAE,CAAC,CAAC;YACzE,CAAC;QACH,CAAC;QACD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,KAAK,kBAAkB,CAAC,CAAC;IAClE,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CAAC,8CAA8C,KAAK,EAAE,CAAC,CAAC;QACpE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;IACtD,CAAC;AACH,CAAC;AAEM,KAAK,UAAU,qBAAqB,CAAC,GAAY,EAAE,GAAa;IACrE,IAAI,CAAC;QACH,MAAM,IAAA,oBAAW,GAAE,CAAC;QACpB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACpD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CAAC,gCAAgC,KAAK,EAAE,CAAC,CAAC;QACtD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;IAC7D,CAAC;AACH,CAAC;AAED,mEAAmE;AAC5D,KAAK,UAAU,gBAAgB,CAAC,GAAY,EAAE,GAAa;IAChE,IAAI,CAAC;QACH,MAAM,WAAW,GAAG,IAAA,8BAAc,GAAE,CAAC;QAErC,MAAM,CAAC,gBAAgB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YAC3C,WAAW,CAAC,cAAc,EAAE;SAC7B,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,gBAAgB,KAAK,CAAC,CAAC;QAC5C,sDAAsD;QACtD,OAAO,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC/C,gBAAgB;YAChB,YAAY;SACb,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACxD,CAAC;AACH,CAAC;AAEM,KAAK,UAAU,oBAAoB,CAAC,GAAY,EAAE,GAAa;IACpE,IAAI,CAAC;QACH,MAAM,mBAAmB,GAAG,EAAE,CAAC;QAC/B,MAAM,mBAAmB,GAAG,EAAE,CAAC;QAE/B,MAAM,WAAW,GAAG,IAAA,8BAAc,GAAE,CAAC;QAErC,MAAM,CAAC,gBAAgB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,GAC7D,MAAM,OAAO,CAAC,GAAG,CAAC;YAChB,WAAW,CAAC,cAAc,EAAE;YAC5B,WAAW,CAAC,eAAe,EAAE;YAC7B,WAAW,CAAC,mBAAmB,EAAE;SAClC,CAAC,CAAC;QAEL,IAAI,uBAAuB,GAAG,iBAAiB,GAAG,kBAAkB,CAAC;QAErE,gCAAgC;QAChC,MAAM,OAAO,GAAG,MAAM,KAAK,CACzB,gEAAgE,EAChE;YACE,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE;aACrD;SACF,CACF,CAAC;QACF,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;QAEtC,uBAAuB;QACvB,MAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,CACpC,CAAC,OAAO,EAAE,EAAE,CACV,CAAC,OAAO,CAAC,KAAK,KAAK,SAAS;YAC1B,OAAO,CAAC,KAAK,KAAK,UAAU;YAC5B,OAAO,CAAC,KAAK,KAAK,WAAW,CAAC;YAChC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAC,KAAK,QAAQ,CACvD,CAAC,MAAM,CAAC;QAET,IAAI,kBAAkB,GAAG,cAAc,CAAC;QAExC,MAAM,WAAW,GAAG,EAAE,CAAC;QACvB,kBAAkB;QAClB,MAAM,aAAa,GAAG,CAAC,CAAC;QAExB,iBAAiB;QACjB,IAAI,gBAAgB,GAAG,IAAI,IAAI,uBAAuB,GAAG,IAAI,EAAE,CAAC;YAC9D,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAC3B,mBAAmB,EACnB,cAAc,GAAG,WAAW,GAAG,CAAC,CACjC,CAAC;QACJ,CAAC;aAAM,IAAI,gBAAgB,GAAG,IAAI,IAAI,uBAAuB,GAAG,IAAI,EAAE,CAAC;YACrE,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAC3B,mBAAmB,EACnB,cAAc,GAAG,WAAW,GAAG,CAAC,CACjC,CAAC;QACJ,CAAC;aAAM,IAAI,gBAAgB,GAAG,IAAI,IAAI,uBAAuB,GAAG,GAAG,EAAE,CAAC;YACpE,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAC3B,mBAAmB,EACnB,cAAc,GAAG,WAAW,CAC7B,CAAC;QACJ,CAAC;QAED,mBAAmB;QACnB,IAAI,gBAAgB,GAAG,GAAG,IAAI,uBAAuB,GAAG,EAAE,EAAE,CAAC;YAC3D,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAC3B,mBAAmB,EACnB,cAAc,GAAG,aAAa,GAAG,CAAC,CACnC,CAAC;QACJ,CAAC;aAAM,IAAI,gBAAgB,GAAG,GAAG,IAAI,uBAAuB,GAAG,GAAG,EAAE,CAAC;YACnE,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAC3B,mBAAmB,EACnB,cAAc,GAAG,aAAa,GAAG,CAAC,CACnC,CAAC;QACJ,CAAC;aAAM,IAAI,gBAAgB,GAAG,IAAI,IAAI,uBAAuB,GAAG,GAAG,EAAE,CAAC;YACpE,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAC3B,mBAAmB,EACnB,cAAc,GAAG,aAAa,CAC/B,CAAC;QACJ,CAAC;QAED,IAAI,kBAAkB,KAAK,cAAc,EAAE,CAAC;YAC1C,eAAM,CAAC,IAAI,CACT,mBAAmB,cAAc,OAAO,kBAAkB,MAAM,gBAAgB,YAAY,iBAAiB,UAAU,CACxH,CAAC;YAEF,IAAI,kBAAkB,GAAG,cAAc,EAAE,CAAC;gBACxC,IAAA,wBAAgB,EACd,mBAAmB,cAAc,OAAO,kBAAkB,MAAM,gBAAgB,YAAY,iBAAiB,gCAAgC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,EACvK,KAAK,EACL,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,EAAE,CACnC,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,IAAA,wBAAgB,EACd,mBAAmB,cAAc,OAAO,kBAAkB,MAAM,gBAAgB,YAAY,iBAAiB,gCAAgC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE,EACvK,KAAK,EACL,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,EAAE,CACnC,CAAC;YACJ,CAAC;YACD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,IAAI,EAAE,eAAe;gBACrB,KAAK,EAAE,kBAAkB;aAC1B,CAAC,CAAC;QACL,CAAC;QAED,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,cAAc;SACtB,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;IACjE,CAAC;AACH,CAAC","sourcesContent":["import { Request, Response } from \"express\";\n\nimport { Job } from \"bullmq\";\nimport { logger } from \"../../../lib/logger\";\nimport { getScrapeQueue } from \"../../../services/queue-service\";\nimport { checkAlerts } from \"../../../services/alerts\";\nimport { sendSlackWebhook } from \"../../../services/alerts/slack\";\n\nexport async function cleanBefore24hCompleteJobsController(\n  req: Request,\n  res: Response,\n) {\n  logger.info(\"üêÇ Cleaning jobs older than 24h\");\n  try {\n    const scrapeQueue = getScrapeQueue();\n    const batchSize = 10;\n    const numberOfBatches = 9; // Adjust based on your needs\n    const completedJobsPromises: Promise<Job[]>[] = [];\n    for (let i = 0; i < numberOfBatches; i++) {\n      completedJobsPromises.push(\n        scrapeQueue.getJobs(\n          [\"completed\"],\n          i * batchSize,\n          i * batchSize + batchSize,\n          true,\n        ),\n      );\n    }\n    const completedJobs: Job[] = (\n      await Promise.all(completedJobsPromises)\n    ).flat();\n    const before24hJobs =\n      completedJobs.filter(\n        (job) =>\n          job.finishedOn !== undefined &&\n          job.finishedOn < Date.now() - 24 * 60 * 60 * 1000,\n      ) || [];\n\n    let count = 0;\n\n    if (!before24hJobs) {\n      return res.status(200).send(`No jobs to remove.`);\n    }\n\n    for (const job of before24hJobs) {\n      try {\n        await job.remove();\n        count++;\n      } catch (jobError) {\n        logger.error(`üêÇ Failed to remove job with ID ${job.id}: ${jobError}`);\n      }\n    }\n    return res.status(200).send(`Removed ${count} completed jobs.`);\n  } catch (error) {\n    logger.error(`üêÇ Failed to clean last 24h complete jobs: ${error}`);\n    return res.status(500).send(\"Failed to clean jobs\");\n  }\n}\n\nexport async function checkQueuesController(req: Request, res: Response) {\n  try {\n    await checkAlerts();\n    return res.status(200).send(\"Alerts initialized\");\n  } catch (error) {\n    logger.debug(`Failed to initialize alerts: ${error}`);\n    return res.status(500).send(\"Failed to initialize alerts\");\n  }\n}\n\n// Use this as a \"health check\" that way we dont destroy the server\nexport async function queuesController(req: Request, res: Response) {\n  try {\n    const scrapeQueue = getScrapeQueue();\n\n    const [webScraperActive] = await Promise.all([\n      scrapeQueue.getActiveCount(),\n    ]);\n\n    const noActiveJobs = webScraperActive === 0;\n    // 200 if no active jobs, 503 if there are active jobs\n    return res.status(noActiveJobs ? 200 : 500).json({\n      webScraperActive,\n      noActiveJobs,\n    });\n  } catch (error) {\n    logger.error(error);\n    return res.status(500).json({ error: error.message });\n  }\n}\n\nexport async function autoscalerController(req: Request, res: Response) {\n  try {\n    const maxNumberOfMachines = 80;\n    const minNumberOfMachines = 20;\n\n    const scrapeQueue = getScrapeQueue();\n\n    const [webScraperActive, webScraperWaiting, webScraperPriority] =\n      await Promise.all([\n        scrapeQueue.getActiveCount(),\n        scrapeQueue.getWaitingCount(),\n        scrapeQueue.getPrioritizedCount(),\n      ]);\n\n    let waitingAndPriorityCount = webScraperWaiting + webScraperPriority;\n\n    // get number of machines active\n    const request = await fetch(\n      \"https://api.machines.dev/v1/apps/firecrawl-scraper-js/machines\",\n      {\n        headers: {\n          Authorization: `Bearer ${process.env.FLY_API_TOKEN}`,\n        },\n      },\n    );\n    const machines = await request.json();\n\n    // Only worker machines\n    const activeMachines = machines.filter(\n      (machine) =>\n        (machine.state === \"started\" ||\n          machine.state === \"starting\" ||\n          machine.state === \"replacing\") &&\n        machine.config.env[\"FLY_PROCESS_GROUP\"] === \"worker\",\n    ).length;\n\n    let targetMachineCount = activeMachines;\n\n    const baseScaleUp = 10;\n    // Slow scale down\n    const baseScaleDown = 2;\n\n    // Scale up logic\n    if (webScraperActive > 9000 || waitingAndPriorityCount > 2000) {\n      targetMachineCount = Math.min(\n        maxNumberOfMachines,\n        activeMachines + baseScaleUp * 3,\n      );\n    } else if (webScraperActive > 5000 || waitingAndPriorityCount > 1000) {\n      targetMachineCount = Math.min(\n        maxNumberOfMachines,\n        activeMachines + baseScaleUp * 2,\n      );\n    } else if (webScraperActive > 1000 || waitingAndPriorityCount > 500) {\n      targetMachineCount = Math.min(\n        maxNumberOfMachines,\n        activeMachines + baseScaleUp,\n      );\n    }\n\n    // Scale down logic\n    if (webScraperActive < 100 && waitingAndPriorityCount < 50) {\n      targetMachineCount = Math.max(\n        minNumberOfMachines,\n        activeMachines - baseScaleDown * 3,\n      );\n    } else if (webScraperActive < 500 && waitingAndPriorityCount < 200) {\n      targetMachineCount = Math.max(\n        minNumberOfMachines,\n        activeMachines - baseScaleDown * 2,\n      );\n    } else if (webScraperActive < 1000 && waitingAndPriorityCount < 500) {\n      targetMachineCount = Math.max(\n        minNumberOfMachines,\n        activeMachines - baseScaleDown,\n      );\n    }\n\n    if (targetMachineCount !== activeMachines) {\n      logger.info(\n        `üêÇ Scaling from ${activeMachines} to ${targetMachineCount} - ${webScraperActive} active, ${webScraperWaiting} waiting`,\n      );\n\n      if (targetMachineCount > activeMachines) {\n        sendSlackWebhook(\n          `üêÇ Scaling from ${activeMachines} to ${targetMachineCount} - ${webScraperActive} active, ${webScraperWaiting} waiting - Current DateTime: ${new Date().toISOString()}`,\n          false,\n          process.env.SLACK_AUTOSCALER ?? \"\",\n        );\n      } else {\n        sendSlackWebhook(\n          `üêÇ Scaling from ${activeMachines} to ${targetMachineCount} - ${webScraperActive} active, ${webScraperWaiting} waiting - Current DateTime: ${new Date().toISOString()}`,\n          false,\n          process.env.SLACK_AUTOSCALER ?? \"\",\n        );\n      }\n      return res.status(200).json({\n        mode: \"scale-descale\",\n        count: targetMachineCount,\n      });\n    }\n\n    return res.status(200).json({\n      mode: \"normal\",\n      count: activeMachines,\n    });\n  } catch (error) {\n    logger.error(error);\n    return res.status(500).send(\"Failed to initialize autoscaler\");\n  }\n}\n"]}