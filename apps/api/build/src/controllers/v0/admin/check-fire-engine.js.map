{"version":3,"file":"check-fire-engine.js","sourceRoot":"","sources":["../../../../../src/controllers/v0/admin/check-fire-engine.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,0CAyEC;AA7ED,gDAA6C;AAC7C,qDAAuC;AAGhC,KAAK,UAAU,eAAe,CAAC,GAAY,EAAE,GAAa;IAC/D,IAAI,CAAC;QACH,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,CAAC;YACtC,eAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;YACnD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBAC1B,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,qCAAqC;aAC7C,CAAC,CAAC;QACL,CAAC;QAED,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAC;QACzC,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,CAAC;QAE5D,MAAM,IAAI,GAAG,CAAC,2BAA2B,EAAE,qBAAqB,CAAC,CAAC;QAClE,IAAI,SAAS,GAAQ,IAAI,CAAC;QAE1B,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,IAAI,CAAC;gBACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAC1B,GAAG,OAAO,CAAC,GAAG,CAAC,oBAAoB,SAAS,EAC5C;oBACE,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE;wBACP,cAAc,EAAE,kBAAkB;wBAClC,iBAAiB,EAAE,MAAM;qBAC1B;oBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;wBACnB,GAAG;wBACH,MAAM,EAAE,YAAY;qBACrB,CAAC;oBACF,MAAM,EAAE,UAAU,CAAC,MAAM;iBAC1B,CACF,CAAC;gBAEF,YAAY,CAAC,OAAO,CAAC,CAAC;gBAEtB,IAAI,QAAQ,CAAC,EAAE,EAAE,CAAC;oBAChB,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;oBAC3C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBAC1B,IAAI,EAAE,YAAY;qBACnB,CAAC,CAAC;gBACL,CAAC;gBACD,SAAS,GAAG,+BAA+B,QAAQ,CAAC,MAAM,EAAE,CAAC;YAC/D,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,KAAK,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;oBAChC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBAC1B,OAAO,EAAE,KAAK;wBACd,KAAK,EAAE,oCAAoC;qBAC5C,CAAC,CAAC;gBACL,CAAC;gBACD,SAAS,GAAG,KAAK,CAAC;YACpB,CAAC;QACH,CAAC;QAED,qCAAqC;QACrC,eAAM,CAAC,KAAK,CAAC,8CAA8C,EAAE;YAC3D,MAAM,EAAE,OAAO;YACf,MAAM,EAAE,iBAAiB;YACzB,KAAK,EAAE,SAAS;SACjB,CAAC,CAAC;QACH,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;QACnC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,mDAAmD;SAC3D,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpB,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC/B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,uBAAuB;SAC/B,CAAC,CAAC;IACL,CAAC;AACH,CAAC","sourcesContent":["import { logger } from \"../../../lib/logger\";\nimport * as Sentry from \"@sentry/node\";\nimport { Request, Response } from \"express\";\n\nexport async function checkFireEngine(req: Request, res: Response) {\n  try {\n    if (!process.env.FIRE_ENGINE_BETA_URL) {\n      logger.warn(\"Fire engine beta URL not configured\");\n      return res.status(500).json({\n        success: false,\n        error: \"Fire engine beta URL not configured\",\n      });\n    }\n\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), 30000);\n\n    const urls = [\"https://roastmywebsite.ai\", \"https://example.com\"];\n    let lastError: any = null;\n\n    for (const url of urls) {\n      try {\n        const response = await fetch(\n          `${process.env.FIRE_ENGINE_BETA_URL}/scrape`,\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"X-Disable-Cache\": \"true\",\n            },\n            body: JSON.stringify({\n              url,\n              engine: \"chrome-cdp\",\n            }),\n            signal: controller.signal,\n          },\n        );\n\n        clearTimeout(timeout);\n\n        if (response.ok) {\n          const responseData = await response.json();\n          return res.status(200).json({\n            data: responseData,\n          });\n        }\n        lastError = `Fire engine returned status ${response.status}`;\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          return res.status(504).json({\n            success: false,\n            error: \"Request timed out after 30 seconds\",\n          });\n        }\n        lastError = error;\n      }\n    }\n\n    // If we get here, all retries failed\n    logger.error(\"An error occurred while checking fire-engine\", {\n      module: \"admin\",\n      method: \"checkFireEngine\",\n      error: lastError,\n    });\n    Sentry.captureException(lastError);\n    return res.status(500).json({\n      success: false,\n      error: \"Internal server error - all retry attempts failed\",\n    });\n  } catch (error) {\n    logger.error(error);\n    Sentry.captureException(error);\n    return res.status(500).json({\n      success: false,\n      error: \"Internal server error\",\n    });\n  }\n}\n"]}