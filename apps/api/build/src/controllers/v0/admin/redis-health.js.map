{"version":3,"file":"redis-health.js","sourceRoot":"","sources":["../../../../../src/controllers/v0/admin/redis-health.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\nimport Redis from \"ioredis\";\nimport { logger } from \"../../../lib/logger\";\nimport { redisRateLimitClient } from \"../../../services/rate-limiter\";\n\nexport async function redisHealthController(req: Request, res: Response) {\n  const retryOperation = async (operation, retries = 3) => {\n    for (let attempt = 1; attempt <= retries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        if (attempt === retries) throw error;\n        logger.warn(`Attempt ${attempt} failed: ${error.message}. Retrying...`);\n        await new Promise((resolve) => setTimeout(resolve, 2000)); // Wait 2 seconds before retrying\n      }\n    }\n  };\n\n  try {\n    const queueRedis = new Redis(process.env.REDIS_URL!);\n\n    const testKey = \"test\";\n    const testValue = \"test\";\n\n    // Test queueRedis\n    let queueRedisHealth;\n    try {\n      await retryOperation(() => queueRedis.set(testKey, testValue));\n      queueRedisHealth = await retryOperation(() => queueRedis.get(testKey));\n      await retryOperation(() => queueRedis.del(testKey));\n    } catch (error) {\n      logger.error(`queueRedis health check failed: ${error}`);\n      queueRedisHealth = null;\n    }\n\n    // Test redisRateLimitClient\n    let redisRateLimitHealth;\n    try {\n      await retryOperation(() => redisRateLimitClient.set(testKey, testValue));\n      redisRateLimitHealth = await retryOperation(() =>\n        redisRateLimitClient.get(testKey),\n      );\n      await retryOperation(() => redisRateLimitClient.del(testKey));\n    } catch (error) {\n      logger.error(`redisRateLimitClient health check failed: ${error}`);\n      redisRateLimitHealth = null;\n    }\n\n    const healthStatus = {\n      queueRedis: queueRedisHealth === testValue ? \"healthy\" : \"unhealthy\",\n      redisRateLimitClient:\n        redisRateLimitHealth === testValue ? \"healthy\" : \"unhealthy\",\n    };\n\n    if (\n      healthStatus.queueRedis === \"healthy\" &&\n      healthStatus.redisRateLimitClient === \"healthy\"\n    ) {\n      logger.info(\"Both Redis instances are healthy\");\n      return res.status(200).json({ status: \"healthy\", details: healthStatus });\n    } else {\n      logger.info(\n        `Redis instances health check: ${JSON.stringify(healthStatus)}`,\n      );\n      // await sendSlackWebhook(\n      //   `[REDIS DOWN] Redis instances health check: ${JSON.stringify(\n      //     healthStatus\n      //   )}`,\n      //   true\n      // );\n      return res\n        .status(500)\n        .json({ status: \"unhealthy\", details: healthStatus });\n    }\n  } catch (error) {\n    logger.error(`Redis health check failed: ${error}`);\n    // await sendSlackWebhook(\n    //   `[REDIS DOWN] Redis instances health check: ${error.message}`,\n    //   true\n    // );\n    return res\n      .status(500)\n      .json({ status: \"unhealthy\", message: error.message });\n  }\n}\n"]}