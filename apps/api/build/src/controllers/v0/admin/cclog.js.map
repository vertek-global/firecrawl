{"version":3,"file":"cclog.js","sourceRoot":"","sources":["../../../../../src/controllers/v0/admin/cclog.ts"],"names":[],"mappings":";;AA8CA,0CAUC;AAxDD,mDAA+D;AAC/D,yDAA8D;AAC9D,gDAAwD;AAGxD,KAAK,UAAU,KAAK;IAChB,MAAM,MAAM,GAAG,eAAO,CAAC,KAAK,CAAC;QACzB,MAAM,EAAE,OAAO;KAClB,CAAC,CAAC;IAEH,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,GAAG,CAAC;QACA,MAAM,MAAM,GAAG,MAAM,4BAAoB,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,uBAAuB,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAC1G,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACjC,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;QAE9D,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;QAE1D,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACpB,MAAM,OAAO,GAIP,EAAE,CAAC;YAET,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE,CAAC;gBACrB,MAAM,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;gBACtB,MAAM,WAAW,GAAG,MAAM,4BAAoB,CAAC,aAAa,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,QAAQ,CAAC,CAAC;gBACtF,IAAI,WAAW,EAAE,CAAC;oBACd,OAAO,CAAC,IAAI,CAAC;wBACT,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACxB,WAAW,EAAE,WAAW,CAAC,MAAM;wBAC/B,UAAU,EAAE,EAAE;qBACjB,CAAC,CAAC;gBACP,CAAC;YACL,CAAC;YAED,IAAI,CAAC;gBACD,MAAM,2BAAgB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACnE,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACT,MAAM,CAAC,KAAK,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;YAClD,CAAC;QACL,CAAC;IACL,CAAC,QAAQ,MAAM,IAAI,CAAC,EAAE;AAC1B,CAAC;AAEM,KAAK,UAAU,eAAe,CAAC,GAAY,EAAE,GAAa;IAC7D,IAAI,CAAC;QACD,MAAM,KAAK,EAAE,CAAA;QACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;IACvC,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACT,eAAO,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QACtD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACjB,OAAO,EAAE,OAAO;SACnB,CAAC,CAAC;IACP,CAAC;AACL,CAAC","sourcesContent":["import { redisEvictConnection } from \"../../../services/redis\";\nimport { supabase_service } from \"../../../services/supabase\";\nimport { logger as _logger } from \"../../../lib/logger\";\nimport { Request, Response } from \"express\";\n\nasync function cclog() {\n    const logger = _logger.child({\n        module: \"cclog\",\n    });\n\n    let cursor = 0;\n    do {\n        const result = await redisEvictConnection.scan(cursor, \"MATCH\", \"concurrency-limiter:*\", \"COUNT\", 100000);\n        cursor = parseInt(result[0], 10);\n        const usable = result[1].filter(x => !x.includes(\"preview_\"));\n\n        logger.info(\"Stepped\", { cursor, usable: usable.length });\n\n        if (usable.length > 0) {\n            const entries: {\n                team_id: string;\n                concurrency: number;\n                created_at: Date;\n            }[] = [];\n\n            for (const x of usable) {\n                const at = new Date();\n                const concurrency = await redisEvictConnection.zrangebyscore(x, Date.now(), Infinity);\n                if (concurrency) {\n                    entries.push({\n                        team_id: x.split(\":\")[1],\n                        concurrency: concurrency.length,\n                        created_at: at,\n                    });\n                }\n            }\n\n            try {\n                await supabase_service.from(\"concurrency_log\").insert(entries);\n            } catch (e) {\n                logger.error(\"Error inserting\", { error: e });\n            }\n        }\n    } while (cursor != 0);\n}\n\nexport async function cclogController(req: Request, res: Response) {\n    try {\n        await cclog()\n        res.status(200).json({ ok: true });\n    } catch (e) {\n        _logger.error(\"Error\", { module: \"cclog\", error: e });\n        res.status(500).json({\n            message: \"Error\",\n        });\n    }\n}\n"]}