{"version":3,"file":"zdrcleaner.js","sourceRoot":"","sources":["../../../../../src/controllers/v0/admin/zdrcleaner.ts"],"names":[],"mappings":"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","sourcesContent":["import \"dotenv/config\";\nimport { supabase_service } from \"../../../services/supabase\";\nimport { removeJobFromGCS } from \"../../../lib/gcs-jobs\";\nimport { Request, Response } from \"express\";\nimport { logger as _logger } from \"../../../lib/logger\";\nimport type { Logger } from \"winston\";\n\nasync function cleanUpJob(jobId: string) {\n    await removeJobFromGCS(jobId);\n}\n\nasync function cleanUp(specificTeamId: string | null, _logger: Logger) {\n    const logger = _logger.child({\n        ...(specificTeamId ? { teamId: specificTeamId } : {}),\n        method: \"cleanUp\",\n    });\n\n    const cleanedUp: number[] = [];\n\n    try {\n        for (let i = 0; ; i++) {\n            let selector = supabase_service.from(\"firecrawl_jobs\")\n                .select(\"id, job_id\");\n            \n            if (specificTeamId) {\n                selector = selector.eq(\"team_id\", specificTeamId).not(\"dr_clean_by\", \"is\", null);\n            } else {\n                selector = selector\n                    .lte(\"dr_clean_by\", new Date().toISOString())\n                    .gte(\"dr_clean_by\", new Date(Date.now() - 1000 * 60 * 60 * 24 * 7).toISOString());\n                // Explanation for the gte: since the cleaner should run every 5 minutes, it is very unlikely that\n                // the cleaner will be down for 7 days without anyone noticing.\n                // Since the firecrawl_jobs table is incredibly large, even with the index on dr_clean_by,\n                // not giving the select a lower bound guarantees that the select will not run with an empty result\n                // in reasonable time.\n                // Therefore, we give it a lower bound which should never cause problems.\n            }\n\n            const { data: jobs } = await selector\n                .range(i * 1000, (i + 1) * 1000)\n                .throwOnError();\n    \n            if (jobs?.length === 0) {\n                break;\n            }\n\n            for (let i = 0; i < Math.ceil((jobs?.length ?? 0) / 50); i++) {\n                const theseJobs = (jobs ?? []).slice(i * 50, (i + 1) * 50);\n                await Promise.allSettled(theseJobs.map(async (job) => {\n                    try {\n                        await cleanUpJob(job.job_id);\n                        cleanedUp.push(job.id);\n                    } catch (error) {\n                        logger.error(`Error cleaning up job`, {\n                            method: \"cleanUpJob\",\n                            jobId: job.job_id,\n                            scrapeId: job.job_id,\n                            error,\n                        });\n                        throw error;\n                    }\n                }) ?? []);\n            }\n    \n            if ((jobs ?? []).length < 1000) {\n                break;\n            }\n        }\n    } catch (error) {\n        logger.error(`Error looping through jobs`, {\n            error,\n        });\n    }\n\n    if (cleanedUp.length > 0) {\n        try {\n            await supabase_service.from(\"firecrawl_jobs\")\n                .update({\n                    dr_clean_by: null,\n                })\n                .in(\"id\", cleanedUp)\n                .throwOnError();\n        } catch (error) {\n            logger.error(`Error setting cleanup value on team`, {\n                error,\n            });\n        }\n    }\n}\n\nexport async function zdrcleanerController(req: Request, res: Response) {\n    const logger = _logger.child({\n        module: \"zdrcleaner\",\n        method: \"zdrcleanerController\",\n    });\n\n    await cleanUp((req.query.teamId as string | undefined) ?? null, logger);\n\n    logger.info(\"ZDR Cleaner finished!\");\n\n    res.json({ ok: true })\n}"]}