{"version":3,"file":"crawl-status.js","sourceRoot":"","sources":["../../../../src/controllers/v0/crawl-status.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\nimport { authenticateUser } from \"../auth\";\nimport { RateLimiterMode } from \"../../../src/types\";\nimport { getScrapeQueue } from \"../../../src/services/queue-service\";\nimport { redisEvictConnection } from \"../../../src/services/redis\";\nimport { logger } from \"../../../src/lib/logger\";\nimport { getCrawl, getCrawlJobs } from \"../../../src/lib/crawl-redis\";\nimport { supabaseGetJobsByCrawlId } from \"../../../src/lib/supabase-jobs\";\nimport * as Sentry from \"@sentry/node\";\nimport { configDotenv } from \"dotenv\";\nimport { Job } from \"bullmq\";\nimport { toLegacyDocument } from \"../v1/types\";\nimport type { DBJob, PseudoJob } from \"../v1/crawl-status\";\nimport { getJobFromGCS } from \"../../lib/gcs-jobs\";\nconfigDotenv();\n\nexport async function getJobs(crawlId: string, ids: string[]): Promise<PseudoJob<any>[]> {\n   const [bullJobs, dbJobs, gcsJobs] = await Promise.all([\n      Promise.all(ids.map((x) => getScrapeQueue().getJob(x))).then(x => x.filter(x => x)) as Promise<(Job<any, any, string> & { id: string })[]>,\n      process.env.USE_DB_AUTHENTICATION === \"true\" ? await supabaseGetJobsByCrawlId(crawlId) : [],\n      process.env.GCS_BUCKET_NAME ? Promise.all(ids.map(async (x) => ({ id: x, job: await getJobFromGCS(x) }))).then(x => x.filter(x => x.job)) as Promise<({ id: string, job: any | null })[]> : [],\n    ]);\n  \n    const bullJobMap = new Map<string, PseudoJob<any>>();\n    const dbJobMap = new Map<string, DBJob>();\n    const gcsJobMap = new Map<string, any>();\n  \n    for (const job of bullJobs) {\n      bullJobMap.set(job.id, job);\n    }\n  \n    for (const job of dbJobs) {\n      dbJobMap.set(job.job_id, job);\n    }\n\n    for (const job of gcsJobs) {\n      gcsJobMap.set(job.id, job.job);\n    }\n  \n    const jobs: PseudoJob<any>[] = [];\n  \n    for (const id of ids) {\n      const bullJob = bullJobMap.get(id);\n      const dbJob = dbJobMap.get(id);\n      const gcsJob = gcsJobMap.get(id);\n  \n      if (!bullJob && !dbJob) continue;\n  \n      const data = gcsJob ?? dbJob?.docs ?? bullJob?.returnvalue;\n      if (gcsJob === null && data) {\n        logger.warn(\"GCS Job not found\", {\n          jobId: id,\n        });\n      }\n  \n      const job: PseudoJob<any> = {\n        id,\n        getState: bullJob ? (() => bullJob.getState()) : (() => dbJob!.success ? \"completed\" : \"failed\"),\n        returnvalue: Array.isArray(data)\n          ? data[0]\n          : data,\n        data: {\n          scrapeOptions: bullJob ? bullJob.data.scrapeOptions : dbJob!.page_options,\n        },\n        timestamp: bullJob ? bullJob.timestamp : new Date(dbJob!.date_added).valueOf(),\n        failedReason: (bullJob ? bullJob.failedReason : dbJob!.message) || undefined,\n      }\n\n      jobs.push(job);\n    }\n  \n    return jobs;\n}\n\nexport async function crawlStatusController(req: Request, res: Response) {\n  try {\n    const auth = await authenticateUser(req, res, RateLimiterMode.CrawlStatus);\n    if (!auth.success) {\n      return res.status(auth.status).json({ error: auth.error });\n    }\n\n    if (auth.chunk?.flags?.forceZDR) {\n      return res.status(400).json({ error: \"Your team has zero data retention enabled. This is not supported on the v0 API. Please update your code to use the v1 API.\" });\n    }\n\n    const { team_id } = auth;\n\n    redisEvictConnection.sadd(\"teams_using_v0\", team_id)\n      .catch(error => logger.error(\"Failed to add team to teams_using_v0\", { error, team_id }));\n\n    const sc = await getCrawl(req.params.jobId);\n    if (!sc) {\n      return res.status(404).json({ error: \"Job not found\" });\n    }\n\n    if (sc.team_id !== team_id) {\n      return res.status(403).json({ error: \"Forbidden\" });\n    }\n    let jobIDs = await getCrawlJobs(req.params.jobId);\n    let jobs = await getJobs(req.params.jobId, jobIDs);\n    let jobStatuses = await Promise.all(jobs.map((x) => x.getState()));\n\n    // Combine jobs and jobStatuses into a single array of objects\n    let jobsWithStatuses = jobs.map((job, index) => ({\n      job,\n      status: jobStatuses[index],\n    }));\n\n    // Filter out failed jobs\n    jobsWithStatuses = jobsWithStatuses.filter(\n      (x) => x.status !== \"failed\" && x.status !== \"unknown\",\n    );\n\n    // Sort jobs by timestamp\n    jobsWithStatuses.sort((a, b) => a.job.timestamp - b.job.timestamp);\n\n    // Extract sorted jobs and statuses\n    jobs = jobsWithStatuses.map((x) => x.job);\n    jobStatuses = jobsWithStatuses.map((x) => x.status);\n\n    const jobStatus = sc.cancelled\n      ? \"failed\"\n      : jobStatuses.every((x) => x === \"completed\")\n        ? \"completed\"\n        : \"active\";\n\n    const data = jobs\n      .filter(\n        (x) =>\n          x.failedReason !== \"Concurreny limit hit\" && x.returnvalue !== null,\n      )\n      .map((x) =>\n        Array.isArray(x.returnvalue) ? x.returnvalue[0] : x.returnvalue,\n      );\n\n    if (\n      jobs.length > 0 &&\n      jobs[0].data &&\n      jobs[0].data.scrapeOptions &&\n      jobs[0].data.scrapeOptions.formats &&\n      !jobs[0].data.scrapeOptions.formats.includes(\"rawHtml\")\n    ) {\n      data.forEach((item) => {\n        if (item) {\n          delete item.rawHtml;\n        }\n      });\n    }\n\n    res.json({\n      status: jobStatus,\n      current: jobStatuses.filter((x) => x === \"completed\" || x === \"failed\")\n        .length,\n      total: jobs.length,\n      data:\n        jobStatus === \"completed\"\n          ? data.map((x) => toLegacyDocument(x, sc.internalOptions))\n          : null,\n      partial_data:\n        jobStatus === \"completed\"\n          ? []\n          : data\n              .filter((x) => x !== null)\n              .map((x) => toLegacyDocument(x, sc.internalOptions)),\n    });\n  } catch (error) {\n    Sentry.captureException(error);\n    logger.error(error);\n    return res.status(500).json({ error: error.message });\n  }\n}\n"]}