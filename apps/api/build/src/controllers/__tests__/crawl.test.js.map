{"version":3,"file":"crawl.test.js","sourceRoot":"","sources":["../../../../src/controllers/__tests__/crawl.test.ts"],"names":[],"mappings":";;AAAA,uCAA8C;AAI9C,kEAA6E;AAC7E,+BAAoC;AAEpC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;IAC1B,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;QAC5C,OAAO,EAAE,IAAI;QACb,OAAO,EAAE,SAAS;QAClB,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,GAAG;KACZ,CAAC;IACF,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;CAClB,CAAC,CAAC,CAAC;AACJ,IAAI,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;AAEjD,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,EAAE,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;QAChF,MAAM,GAAG,GAAG;YACV,OAAO,EAAE;gBACP,mBAAmB,EAAE,MAAM,IAAA,SAAM,GAAE;gBACnC,aAAa,EAAE,UAAU,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE;aACpD;YACD,IAAI,EAAE;gBACJ,GAAG,EAAE,qBAAqB;aAC3B;SACoB,CAAC;QACxB,MAAM,GAAG,GAAG;YACV,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YAClC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;SACO,CAAC;QAEzB,0EAA0E;QACzE,iCAAoC;aAClC,qBAAqB,CAAC,IAAI,CAAC;aAC3B,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAEhC,+BAA+B;QAC/B,MAAM,IAAA,uBAAe,EAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAChC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QAEjD,+CAA+C;QAC/C,MAAM,IAAA,uBAAe,EAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAChC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QAC7C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC;YACpC,KAAK,EAAE,8BAA8B;SACtC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { crawlController } from \"../v0/crawl\";\nimport { Request, Response } from \"express\";\nimport { authenticateUser } from \"../auth\"; // Ensure this import is correct\nimport { createIdempotencyKey } from \"../../services/idempotency/create\";\nimport { validateIdempotencyKey } from \"../../services/idempotency/validate\";\nimport { v4 as uuidv4 } from \"uuid\";\n\njest.mock(\"../auth\", () => ({\n  authenticateUser: jest.fn().mockResolvedValue({\n    success: true,\n    team_id: \"team123\",\n    error: null,\n    status: 200,\n  }),\n  reduce: jest.fn(),\n}));\njest.mock(\"../../services/idempotency/validate\");\n\ndescribe(\"crawlController\", () => {\n  it(\"should prevent duplicate requests using the same idempotency key\", async () => {\n    const req = {\n      headers: {\n        \"x-idempotency-key\": await uuidv4(),\n        Authorization: `Bearer ${process.env.TEST_API_KEY}`,\n      },\n      body: {\n        url: \"https://mendable.ai\",\n      },\n    } as unknown as Request;\n    const res = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn(),\n    } as unknown as Response;\n\n    // Mock the idempotency key validation to return false for the second call\n    (validateIdempotencyKey as jest.Mock)\n      .mockResolvedValueOnce(true)\n      .mockResolvedValueOnce(false);\n\n    // First request should succeed\n    await crawlController(req, res);\n    expect(res.status).not.toHaveBeenCalledWith(409);\n\n    // Second request with the same key should fail\n    await crawlController(req, res);\n    expect(res.status).toHaveBeenCalledWith(409);\n    expect(res.json).toHaveBeenCalledWith({\n      error: \"Idempotency key already used\",\n    });\n  });\n});\n"]}