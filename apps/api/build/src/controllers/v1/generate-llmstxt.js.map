{"version":3,"file":"generate-llmstxt.js","sourceRoot":"","sources":["../../../../src/controllers/v1/generate-llmstxt.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,gEAoEC;AAzFD,mCAKiB;AACjB,gEAAuE;AACvE,qDAAuC;AACvC,8FAAyF;AAOzF;;;;;GAKG;AACI,KAAK,UAAU,0BAA0B,CAC9C,GAA2E,EAC3E,GAAuC;IAEvC,IAAI,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;QAC9B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,4IAA4I,EAAE,CAAC,CAAC;IACvM,CAAC;IAED,GAAG,CAAC,IAAI,GAAG,qCAA6B,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAEzD,MAAM,YAAY,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;IACzC,MAAM,OAAO,GAAG;QACd,OAAO,EAAE,GAAG,CAAC,IAAI;QACjB,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO;QACxB,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,MAAM;QACvB,YAAY;KACb,CAAC;IAEF,MAAM,IAAA,6CAAoB,EAAC,YAAY,EAAE;QACvC,EAAE,EAAE,YAAY;QAChB,OAAO,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO;QACzB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;QACrB,MAAM,EAAE,YAAY;QACpB,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG;QACjB,OAAO,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO;QACzB,YAAY,EAAE,GAAG,CAAC,IAAI,CAAC,YAAY;QACnC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK;QACrB,aAAa,EAAE,EAAE;QACjB,QAAQ,EAAE,EAAE;KACb,CAAC,CAAC;IAEH,IAAI,MAAM,CAAC,aAAa,EAAE,EAAE,CAAC;QAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;QAC5C,MAAM,MAAM,CAAC,SAAS,CACpB;YACE,IAAI,EAAE,4BAA4B;YAClC,EAAE,EAAE,eAAe;YACnB,UAAU,EAAE;gBACV,sBAAsB,EAAE,YAAY;gBACpC,4BAA4B,EAAE,IAAA,uCAAuB,GAAE,CAAC,IAAI;gBAC5D,6BAA6B,EAAE,IAAI;aACpC;SACF,EACD,KAAK,EAAE,IAAI,EAAE,EAAE;YACb,MAAM,IAAA,uCAAuB,GAAE,CAAC,GAAG,CACjC,YAAY,EACZ;gBACE,GAAG,OAAO;gBACV,MAAM,EAAE;oBACN,KAAK,EAAE,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC;oBACrC,OAAO,EAAE,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC;oBACzC,IAAI;iBACL;aACF,EACD,EAAE,KAAK,EAAE,YAAY,EAAE,CACxB,CAAC;QACJ,CAAC,CACF,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,MAAM,IAAA,uCAAuB,GAAE,CAAC,GAAG,CAAC,YAAY,EAAE,OAAO,EAAE;YACzD,KAAK,EAAE,YAAY;SACpB,CAAC,CAAC;IACL,CAAC;IAED,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QAC1B,OAAO,EAAE,IAAI;QACb,EAAE,EAAE,YAAY;KACjB,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { Response } from \"express\";\nimport {\n  ErrorResponse,\n  GenerateLLMsTextRequest,\n  generateLLMsTextRequestSchema,\n  RequestWithAuth,\n} from \"./types\";\nimport { getGenerateLlmsTxtQueue } from \"../../services/queue-service\";\nimport * as Sentry from \"@sentry/node\";\nimport { saveGeneratedLlmsTxt } from \"../../lib/generate-llmstxt/generate-llmstxt-redis\";\n\nexport type GenerateLLMsTextResponse = ErrorResponse | {\n  success: boolean;\n  id: string;\n};\n\n/**\n * Initiates a text generation job based on the provided URL.\n * @param req - The request object containing authentication and generation parameters.\n * @param res - The response object to send the generation job ID.\n * @returns A promise that resolves when the generation job is queued.\n */\nexport async function generateLLMsTextController(\n  req: RequestWithAuth<{}, GenerateLLMsTextResponse, GenerateLLMsTextRequest>,\n  res: Response<GenerateLLMsTextResponse>,\n) {\n  if (req.acuc?.flags?.forceZDR) {\n    return res.status(400).json({ success: false, error: \"Your team has zero data retention enabled. This is not supported on llmstxt. Please contact support@firecrawl.com to unblock this feature.\" });\n  }\n\n  req.body = generateLLMsTextRequestSchema.parse(req.body);\n\n  const generationId = crypto.randomUUID();\n  const jobData = {\n    request: req.body,\n    teamId: req.auth.team_id,\n    subId: req.acuc?.sub_id,\n    generationId,\n  };\n\n  await saveGeneratedLlmsTxt(generationId, {\n    id: generationId,\n    team_id: req.auth.team_id,\n    createdAt: Date.now(),\n    status: \"processing\",\n    url: req.body.url,\n    maxUrls: req.body.maxUrls,\n    showFullText: req.body.showFullText,\n    cache: req.body.cache,\n    generatedText: \"\",\n    fullText: \"\",\n  });\n\n  if (Sentry.isInitialized()) {\n    const size = JSON.stringify(jobData).length;\n    await Sentry.startSpan(\n      {\n        name: \"Add LLMstxt generation job\",\n        op: \"queue.publish\",\n        attributes: {\n          \"messaging.message.id\": generationId,\n          \"messaging.destination.name\": getGenerateLlmsTxtQueue().name,\n          \"messaging.message.body.size\": size,\n        },\n      },\n      async (span) => {\n        await getGenerateLlmsTxtQueue().add(\n          generationId,\n          {\n            ...jobData,\n            sentry: {\n              trace: Sentry.spanToTraceHeader(span),\n              baggage: Sentry.spanToBaggageHeader(span),\n              size,\n            },\n          },\n          { jobId: generationId },\n        );\n      },\n    );\n  } else {\n    await getGenerateLlmsTxtQueue().add(generationId, jobData, {\n      jobId: generationId,\n    });\n  }\n\n  return res.status(200).json({\n    success: true,\n    id: generationId,\n  });\n}\n"]}