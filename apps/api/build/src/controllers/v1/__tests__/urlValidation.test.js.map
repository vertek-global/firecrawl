{"version":3,"file":"urlValidation.test.js","sourceRoot":"","sources":["../../../../../src/controllers/v1/__tests__/urlValidation.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { url } from \"../types\";\nimport { BLOCKLISTED_URL_MESSAGE } from \"../../../lib/strings\";\n\ndescribe(\"URL Schema Validation\", () => {\n  beforeEach(() => {\n    jest.resetAllMocks();\n  });\n\n  it(\"should prepend http:// to URLs without a protocol\", () => {\n    const result = url.parse(\"example.com\");\n    expect(result).toBe(\"http://example.com\");\n  });\n\n  it(\"should allow valid URLs with http or https\", () => {\n    expect(() => url.parse(\"http://example.com\")).not.toThrow();\n    expect(() => url.parse(\"https://example.com\")).not.toThrow();\n  });\n\n  it(\"should allow valid URLs with http or https\", () => {\n    expect(() => url.parse(\"example.com\")).not.toThrow();\n  });\n\n  it(\"should reject URLs with unsupported protocols\", () => {\n    expect(() => url.parse(\"ftp://example.com\")).toThrow();\n  });\n\n  it(\"should reject URLs without a valid top-level domain\", () => {\n    expect(() => url.parse(\"http://example\")).toThrow();\n  });\n\n  it(\"should handle URLs with subdomains correctly\", () => {\n    expect(() => url.parse(\"http://sub.example.com\")).not.toThrow();\n    expect(() => url.parse(\"https://blog.example.com\")).not.toThrow();\n  });\n\n  it(\"should handle URLs with paths correctly\", () => {\n    expect(() => url.parse(\"http://example.com/path\")).not.toThrow();\n    expect(() => url.parse(\"https://example.com/another/path\")).not.toThrow();\n  });\n\n  it(\"should reject malformed URLs starting with 'http://http'\", () => {\n    expect(() => url.parse(\"http://http://example.com\")).toThrow();\n  });\n\n  it(\"should reject malformed URLs containing multiple 'http://'\", () => {\n    expect(() =>\n      url.parse(\"http://example.com/http://example.com\"),\n    ).not.toThrow();\n  });\n\n  it(\"should reject malformed URLs containing multiple 'http://'\", () => {\n    expect(() => url.parse(\"http://ex ample.com/\")).toThrow(\"Invalid URL\");\n  });\n\n  it(\"should accept URLs with international domain names\", () => {\n    expect(() => url.parse(\"http://xn--1lqv92a901a.xn--ses554g/\")).not.toThrow();\n  });\n\n  it(\"should accept various IDN domains with different scripts\", () => {\n    expect(() => url.parse(\"http://xn--fsq.xn--0zwm56d\")).not.toThrow();\n    expect(() => url.parse(\"https://xn--mgbh0fb.xn--kgbechtv\")).not.toThrow();\n    expect(() => url.parse(\"http://xn--e1afmkfd.xn--p1ai\")).not.toThrow();\n    expect(() => url.parse(\"https://xn--wgbl6a.xn--mgberp4a5d4ar\")).not.toThrow();\n  });\n\n  it(\"should accept IDN domains with paths and query parameters\", () => {\n    expect(() => url.parse(\"http://xn--1lqv92a901a.xn--ses554g/path/to/page\")).not.toThrow();\n    expect(() => url.parse(\"https://xn--fsq.xn--0zwm56d/search?q=test\")).not.toThrow();\n    expect(() => url.parse(\"http://xn--mgbh0fb.xn--kgbechtv/page#section\")).not.toThrow();\n  });\n\n  it(\"should accept IDN subdomains\", () => {\n    expect(() => url.parse(\"http://sub.xn--1lqv92a901a.xn--ses554g\")).not.toThrow();\n    expect(() => url.parse(\"https://www.xn--fsq.xn--0zwm56d\")).not.toThrow();\n    expect(() => url.parse(\"http://api.xn--mgbh0fb.xn--kgbechtv\")).not.toThrow();\n  });\n\n});\n"]}