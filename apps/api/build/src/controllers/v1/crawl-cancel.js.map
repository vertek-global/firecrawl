{"version":3,"file":"crawl-cancel.js","sourceRoot":"","sources":["../../../../src/controllers/v1/crawl-cancel.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,sDA2CC;AAnDD,sDAA2D;AAC3D,6CAA0C;AAC1C,uDAA4D;AAC5D,qDAAuC;AACvC,mCAAsC;AAEtC,IAAA,qBAAY,GAAE,CAAC;AAER,KAAK,UAAU,qBAAqB,CACzC,GAAuC,EACvC,GAAa;IAEb,IAAI,CAAC;QACH,MAAM,mBAAmB,GAAG,OAAO,CAAC,GAAG,CAAC,qBAAqB,KAAK,MAAM,CAAC;QAEzE,MAAM,EAAE,GAAG,MAAM,IAAA,sBAAQ,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5C,IAAI,CAAC,EAAE,EAAE,CAAC;YACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,CAAC;QAC1D,CAAC;QAED,uCAAuC;QACvC,IAAI,mBAAmB,EAAE,CAAC;YACxB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,MAAM,2BAAgB;iBACtD,IAAI,CAAC,gBAAgB,CAAC;iBACtB,MAAM,CAAC,GAAG,CAAC;iBACX,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;iBAC9B,EAAE,CAAC,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACnC,IAAI,SAAS,EAAE,CAAC;gBACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;YAC5D,CAAC;YAED,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACtB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;YACzD,CAAC;QACH,CAAC;QAED,IAAI,CAAC;YACH,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC;YACpB,MAAM,IAAA,uBAAS,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACxC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACtB,CAAC;QAED,GAAG,CAAC,IAAI,CAAC;YACP,MAAM,EAAE,WAAW;SACpB,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC/B,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACxD,CAAC;AACH,CAAC","sourcesContent":["import { Response } from \"express\";\nimport { supabase_service } from \"../../services/supabase\";\nimport { logger } from \"../../lib/logger\";\nimport { getCrawl, saveCrawl } from \"../../lib/crawl-redis\";\nimport * as Sentry from \"@sentry/node\";\nimport { configDotenv } from \"dotenv\";\nimport { RequestWithAuth } from \"./types\";\nconfigDotenv();\n\nexport async function crawlCancelController(\n  req: RequestWithAuth<{ jobId: string }>,\n  res: Response,\n) {\n  try {\n    const useDbAuthentication = process.env.USE_DB_AUTHENTICATION === \"true\";\n\n    const sc = await getCrawl(req.params.jobId);\n    if (!sc) {\n      return res.status(404).json({ error: \"Job not found\" });\n    }\n\n    // check if the job belongs to the team\n    if (useDbAuthentication) {\n      const { data, error: supaError } = await supabase_service\n        .from(\"bulljobs_teams\")\n        .select(\"*\")\n        .eq(\"job_id\", req.params.jobId)\n        .eq(\"team_id\", req.auth.team_id);\n      if (supaError) {\n        return res.status(500).json({ error: supaError.message });\n      }\n\n      if (data.length === 0) {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n    }\n\n    try {\n      sc.cancelled = true;\n      await saveCrawl(req.params.jobId, sc);\n    } catch (error) {\n      logger.error(error);\n    }\n\n    res.json({\n      status: \"cancelled\",\n    });\n  } catch (error) {\n    Sentry.captureException(error);\n    logger.error(error);\n    return res.status(500).json({ error: error.message });\n  }\n}\n"]}