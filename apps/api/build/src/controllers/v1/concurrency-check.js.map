{"version":3,"file":"concurrency-check.js","sourceRoot":"","sources":["../../../../src/controllers/v1/concurrency-check.ts"],"names":[],"mappings":";;AASA,gEAiBC;AApBD,uDAAmE;AAEnE,+CAA+C;AACxC,KAAK,UAAU,0BAA0B,CAC9C,GAAkE,EAClE,GAAuC;IAEvC,MAAM,qBAAqB,GAAG,sBAAsB,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IACxE,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACvB,MAAM,gBAAgB,GAAG,MAAM,4BAAoB,CAAC,aAAa,CAC/D,qBAAqB,EACrB,GAAG,EACH,QAAQ,CACT,CAAC;IAEF,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QAC1B,OAAO,EAAE,IAAI;QACb,WAAW,EAAE,gBAAgB,CAAC,MAAM;QACpC,cAAc,EAAE,GAAG,CAAC,IAAI,CAAC,WAAW;KACrC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import {\n  ConcurrencyCheckParams,\n  ConcurrencyCheckResponse,\n  RequestWithAuth,\n} from \"./types\";\nimport { Response } from \"express\";\nimport { redisEvictConnection } from \"../../../src/services/redis\";\n\n// Basically just middleware and error wrapping\nexport async function concurrencyCheckController(\n  req: RequestWithAuth<ConcurrencyCheckParams, undefined, undefined>,\n  res: Response<ConcurrencyCheckResponse>,\n) {\n  const concurrencyLimiterKey = \"concurrency-limiter:\" + req.auth.team_id;\n  const now = Date.now();\n  const activeJobsOfTeam = await redisEvictConnection.zrangebyscore(\n    concurrencyLimiterKey,\n    now,\n    Infinity,\n  );\n\n  return res.status(200).json({\n    success: true,\n    concurrency: activeJobsOfTeam.length,\n    maxConcurrency: req.acuc.concurrency,\n  });\n}\n"]}