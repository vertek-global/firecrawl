{"version":3,"file":"token-usage.js","sourceRoot":"","sources":["../../../../src/controllers/v1/token-usage.ts"],"names":[],"mappings":";;AAMA,oDAuCC;AA3CD,kCAA+C;AAC/C,6CAA0C;AAC1C,uCAA8C;AAEvC,KAAK,UAAU,oBAAoB,CACxC,GAAoB,EACpB,GAAa;IAEb,IAAI,CAAC;QACH,4DAA4D;QAC5D,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;YACb,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE;oBACJ,gBAAgB,EAAE,GAAG,CAAC,IAAI,CAAC,iBAAiB;iBAC7C;aACF,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,6BAA6B;QAC7B,MAAM,KAAK,GAAG,MAAM,IAAA,kBAAW,EAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,uBAAe,CAAC,OAAO,CAAC,CAAC;QACzF,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,wCAAwC;aAChD,CAAC,CAAC;YACH,OAAO;QACT,CAAC;QAED,GAAG,CAAC,IAAI,CAAC;YACP,OAAO,EAAE,IAAI;YACb,IAAI,EAAE;gBACJ,gBAAgB,EAAE,KAAK,CAAC,iBAAiB;aAC1C;SACF,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;QACxD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,kDAAkD;SAC1D,CAAC,CAAC;IACL,CAAC;AACH,CAAC","sourcesContent":["import { Request, Response } from \"express\";\nimport { RequestWithAuth } from \"./types\";\nimport { getACUC, getACUCTeam } from \"../auth\";\nimport { logger } from \"../../lib/logger\";\nimport { RateLimiterMode } from \"../../types\";\n\nexport async function tokenUsageController(\n  req: RequestWithAuth,\n  res: Response,\n): Promise<void> {\n  try {\n    // If we already have the token usage info from auth, use it\n    if (req.acuc) {\n      res.json({\n        success: true,\n        data: {\n          remaining_tokens: req.acuc.remaining_credits,\n        },\n      });\n      return;\n    }\n\n    // Otherwise fetch fresh data\n    const chunk = await getACUCTeam(req.auth.team_id, false, false, RateLimiterMode.Extract);\n    if (!chunk) {\n      res.status(404).json({\n        success: false,\n        error: \"Could not find token usage information\",\n      });\n      return;\n    }\n\n    res.json({\n      success: true,\n      data: {\n        remaining_tokens: chunk.remaining_credits,\n      },\n    });\n  } catch (error) {\n    logger.error(\"Error in token usage controller:\", error);\n    res.status(500).json({\n      success: false,\n      error: \"Internal server error while fetching token usage\",\n    });\n  }\n}\n"]}