{"version":3,"file":"crawl-ongoing.js","sourceRoot":"","sources":["../../../../src/controllers/v1/crawl-ongoing.ts"],"names":[],"mappings":";;AAaA,0DAoBC;AAhCD,mCAIiB;AACjB,uDAG+B;AAC/B,mCAAsC;AACtC,IAAA,qBAAY,GAAE,CAAC;AAER,KAAK,UAAU,uBAAuB,CAC3C,GAA0D,EAC1D,GAAoC;IAEpC,MAAM,GAAG,GAAG,MAAM,IAAA,+BAAiB,EAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAEtD,MAAM,MAAM,GAAG,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,IAAA,sBAAQ,EAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;IAEzK,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QACnB,OAAO,EAAE,IAAI;QACb,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACvB,EAAE,EAAE,CAAC,CAAC,EAAE;YACR,MAAM,EAAE,CAAC,CAAC,OAAQ;YAClB,GAAG,EAAE,CAAC,CAAC,SAAU;YACjB,OAAO,EAAE;gBACP,GAAG,IAAA,2BAAmB,EAAC,CAAC,CAAC,cAAc,CAAC;gBACxC,aAAa,EAAE,CAAC,CAAC,aAAa;aAC/B;SACF,CAAC,CAAC;KACJ,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { Response } from \"express\";\nimport {\n  OngoingCrawlsResponse,\n  RequestWithAuth,\n  toNewCrawlerOptions,\n} from \"./types\";\nimport {\n  getCrawl,\n  getCrawlsByTeamId,\n} from \"../../lib/crawl-redis\";\nimport { configDotenv } from \"dotenv\";\nconfigDotenv();\n\nexport async function ongoingCrawlsController(\n  req: RequestWithAuth<{}, undefined, OngoingCrawlsResponse>,\n  res: Response<OngoingCrawlsResponse>,\n) {\n  const ids = await getCrawlsByTeamId(req.auth.team_id);\n\n  const crawls = (await Promise.all(ids.map(async id => ({ ...(await getCrawl(id)), id })))).filter((crawl) => crawl !== null && !crawl.cancelled && crawl.crawlerOptions);\n\n  res.status(200).json({\n    success: true,\n    crawls: crawls.map(x => ({\n      id: x.id,\n      teamId: x.team_id!,\n      url: x.originUrl!,\n      options: {\n        ...toNewCrawlerOptions(x.crawlerOptions),\n        scrapeOptions: x.scrapeOptions,\n      },\n    })),\n  });\n}\n"]}