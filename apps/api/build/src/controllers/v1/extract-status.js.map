{"version":3,"file":"extract-status.js","sourceRoot":"","sources":["../../../../src/controllers/v1/extract-status.ts"],"names":[],"mappings":"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","sourcesContent":["import { Response } from \"express\";\nimport { RequestWithAuth } from \"./types\";\nimport { getExtract, getExtractExpiry } from \"../../lib/extract/extract-redis\";\nimport { DBJob, PseudoJob } from \"./crawl-status\";\nimport { getExtractQueue } from \"../../services/queue-service\";\nimport { ExtractResult } from \"../../lib/extract/extraction-service\";\nimport { supabaseGetJobById } from \"../../lib/supabase-jobs\";\n\nexport async function getExtractJob(id: string): Promise<PseudoJob<ExtractResult> | null> {\n  const [bullJob, dbJob] = await Promise.all([\n    getExtractQueue().getJob(id),\n    (process.env.USE_DB_AUTHENTICATION === \"true\" ? supabaseGetJobById(id) : null) as Promise<DBJob | null>,\n  ]);\n\n  if (!bullJob && !dbJob) return null;\n\n  const data = dbJob?.docs ?? bullJob?.returnvalue?.data;\n\n  const job: PseudoJob<any> = {\n    id,\n    getState: bullJob ? bullJob.getState.bind(bullJob) : (() => dbJob!.success ? \"completed\" : \"failed\"),\n    returnvalue: data,\n    data: {\n      scrapeOptions: bullJob ? bullJob.data.scrapeOptions : dbJob!.page_options,\n      teamId: bullJob ? bullJob.data.teamId : dbJob!.team_id,\n    },\n    timestamp: bullJob ? bullJob.timestamp : new Date(dbJob!.date_added).valueOf(),\n    failedReason: (bullJob ? bullJob.failedReason : dbJob!.message) || undefined,\n  }\n\n  return job;\n}\n\nexport async function extractStatusController(\n  req: RequestWithAuth<{ jobId: string }, any, any>,\n  res: Response,\n) {\n  const extract = await getExtract(req.params.jobId);\n\n  let status = extract?.status;\n\n  if (extract && extract.team_id !== req.auth.team_id) {\n    return res.status(404).json({\n      success: false,\n      error: \"Extract job not found\",\n    });\n  }\n\n  let data: ExtractResult | [] = [];\n\n  if (!extract || extract.status === \"completed\") {\n    const jobData = await getExtractJob(req.params.jobId);\n    if ((!jobData && !extract) || (jobData && jobData.data.teamId !== req.auth.team_id)) {\n      return res.status(404).json({\n        success: false,\n        error: \"Extract job not found\",\n      });\n    }\n\n    if (jobData) {\n      const jobStatus = await jobData.getState();\n\n      if (jobStatus === \"completed\") {\n        status = \"completed\";\n      } else if (jobStatus === \"failed\") {\n        status = \"failed\";\n      } else {\n        status = \"processing\";\n      }\n    }\n\n    if (!jobData?.returnvalue) {\n      // if we got in the split-second where the redis is updated but the bull isn't\n      // just pretend it's still processing - MG\n      status = \"processing\";\n    } else {\n      data = jobData.returnvalue ?? [];\n    }\n  }\n\n  return res.status(200).json({\n    success: status === \"failed\" ? false : true,\n    data,\n    status,\n    error: extract?.error ?? undefined,\n    expiresAt: (await getExtractExpiry(req.params.jobId)).toISOString(),\n    steps: extract?.showSteps ? extract.steps : undefined,\n    llmUsage: extract?.showLLMUsage ? extract.llmUsage : undefined,\n    sources: extract?.showSources ? extract.sources : undefined,\n    costTracking: extract?.showCostTracking ? extract.costTracking : undefined,\n    sessionIds: extract?.sessionIds ? extract.sessionIds : undefined,\n    tokensUsed: extract?.tokensBilled ? extract.tokensBilled : undefined,\n  });\n}\n"]}