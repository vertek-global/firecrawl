{"version":3,"file":"crawl-status.js","sourceRoot":"","sources":["../../../../src/controllers/v1/crawl-status.ts"],"names":[],"mappings":";;AA0CA,wBA8BC;AAED,0BAwDC;AAED,sDAsRC;AAnZD,uDAO+B;AAC/B,gEAA8D;AAC9D,2DAGiC;AACjC,mCAAsC;AAEtC,6CAA0C;AAC1C,sDAAgF;AAChF,mEAA4G;AAC5G,iDAAmD;AACnD,IAAA,qBAAY,GAAE,CAAC;AAgBR,KAAK,UAAU,MAAM,CAAC,EAAU;IACrC,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QACjD,IAAA,8BAAc,GAAE,CAAC,MAAM,CAAC,EAAE,CAAC;QAC3B,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,KAAK,MAAM,CAAC,CAAC,CAAC,IAAA,kCAAkB,EAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAA0B;QACvG,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,IAAA,wBAAa,EAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAwB;KAChF,CAAC,CAAC;IAEH,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK;QAAE,OAAO,IAAI,CAAC;IAEpC,MAAM,IAAI,GAAG,MAAM,IAAI,KAAK,EAAE,IAAI,IAAI,OAAO,EAAE,WAAW,CAAC;IAC3D,IAAI,MAAM,KAAK,IAAI,IAAI,IAAI,EAAE,CAAC;QAC5B,eAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC/B,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;IACL,CAAC;IAED,MAAM,GAAG,GAAmB;QAC1B,EAAE;QACF,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,KAAM,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC;QACtF,WAAW,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;YAC9B,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACT,CAAC,CAAC,IAAI;QACR,IAAI,EAAE;YACJ,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAM,CAAC,YAAY;SAC1E;QACD,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAM,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE;QAC9E,YAAY,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,KAAM,CAAC,OAAO,CAAC,IAAI,SAAS;KAC7E,CAAA;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAEM,KAAK,UAAU,OAAO,CAAC,GAAa;IACzC,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QACpD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,8BAAc,GAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAwD;QAC1I,OAAO,CAAC,GAAG,CAAC,qBAAqB,KAAK,MAAM,CAAC,CAAC,CAAC,IAAA,mCAAmB,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;QAC5E,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,IAAA,wBAAa,EAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAiD,CAAC,CAAC,CAAC,EAAE;KAC/L,CAAC,CAAC;IAEH,MAAM,UAAU,GAAG,IAAI,GAAG,EAA0B,CAAC;IACrD,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAiB,CAAC;IAC1C,MAAM,SAAS,GAAG,IAAI,GAAG,EAAe,CAAC;IAEzC,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;QAC3B,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;QACzB,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAChC,CAAC;IAED,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE,CAAC;QAC1B,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAED,MAAM,IAAI,GAAqB,EAAE,CAAC;IAElC,KAAK,MAAM,EAAE,IAAI,GAAG,EAAE,CAAC;QACrB,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACnC,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC/B,MAAM,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAEjC,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK;YAAE,SAAS;QAEjC,MAAM,IAAI,GAAG,MAAM,IAAI,KAAK,EAAE,IAAI,IAAI,OAAO,EAAE,WAAW,CAAC;QAC3D,IAAI,MAAM,KAAK,IAAI,IAAI,IAAI,EAAE,CAAC;YAC5B,eAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC/B,KAAK,EAAE,EAAE;aACV,CAAC,CAAC;QACL,CAAC;QAED,MAAM,GAAG,GAAmB;YAC1B,EAAE;YACF,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,KAAM,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC;YAChG,WAAW,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;gBAC9B,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACT,CAAC,CAAC,IAAI;YACR,IAAI,EAAE;gBACJ,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAM,CAAC,YAAY;aAC1E;YACD,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAM,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE;YAC9E,YAAY,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,KAAM,CAAC,OAAO,CAAC,IAAI,SAAS;SAC7E,CAAA;QAED,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjB,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAEM,KAAK,UAAU,qBAAqB,CACzC,GAAuE,EACvE,GAAkC,EAClC,OAAO,GAAG,KAAK;IAEf,MAAM,KAAK,GACP,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxE,MAAM,GAAG,GACP,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,KAAK,QAAQ;QACjC,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC;QAC3C,CAAC,CAAC,SAAS,CAAC;IAElB,MAAM,EAAE,GAAG,MAAM,IAAA,sBAAQ,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAE5C,IAAI,MAA6D,CAAC;IAClE,IAAI,cAAsB,CAAC;IAC3B,IAAI,aAAuB,CAAC;IAC5B,IAAI,UAAkB,CAAC;IACvB,IAAI,WAAmB,CAAC;IAExB,IAAI,EAAE,EAAE,CAAC;QACP,IAAI,EAAE,CAAC,OAAO,KAAK,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YACpC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC;QACtE,CAAC;QAED,IAAI,MAAM,GAAG,MAAM,IAAA,0BAAY,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAClD,IAAI,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CACjC,MAAM,CAAC,GAAG,CACR,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,MAAM,IAAA,8BAAc,GAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAU,CACjE,CACF,CAAC;QAEF,MAAM,gBAAgB,GAAG,IAAI,GAAG,CAAC,MAAM,IAAA,6CAAyB,EAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACpF,MAAM,aAAa,GAAG,IAAI,GAAG,CAAC,MAAM,IAAA,sDAAkC,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAE1F,MAAM,gBAAgB,GAAqC,EAAE,CAAC;QAC9D,MAAM,WAAW,GAAa,EAAE,CAAC;QAEjC,KAAK,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,IAAI,WAAW,EAAE,CAAC;YACvC,IAAI,gBAAgB,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;gBAC7B,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC,CAAC;gBAC3C,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACvB,CAAC;iBAAM,IAAI,MAAM,KAAK,SAAS,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;gBACzD,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACtC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACvB,CAAC;iBAAM,IACL,MAAM,KAAK,QAAQ;gBACnB,MAAM,KAAK,SAAS,EACpB,CAAC;gBACD,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;gBACpC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACvB,CAAC;QACH,CAAC;QAED,MAAM;YACJ,EAAE,CAAC,SAAS;gBACV,CAAC,CAAC,WAAW;gBACb,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,WAAW,CAAC;oBACjD,CAAC,EAAE,CAAC,cAAc;wBAChB,CAAC,CAAC,MAAM,IAAA,oCAAsB,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;wBAChD,CAAC,CAAC,IAAI,CAAC;oBACX,CAAC,CAAC,WAAW;oBACb,CAAC,CAAC,UAAU,CAAC;QAEnB,2DAA2D;QAC3D,MAAM,GAAG,WAAW,CAAC;QAErB,cAAc,GAAG,MAAM,IAAA,sCAAwB,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAClE,aAAa,GAAG,MAAM,IAAA,gCAAkB,EACtC,GAAG,CAAC,MAAM,CAAC,KAAK,EAChB,KAAK,EACL,GAAG,IAAI,CAAC,CAAC,CACV,CAAC;QAEF,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC;QAE3B,IAAI,UAAU,KAAK,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,qBAAqB,KAAK,MAAM,EAAE,CAAC;YACrE,MAAM,CAAC,GAAG,MAAM,8BAAmB;iBAChC,IAAI,CAAC,gBAAgB,CAAC;iBACtB,MAAM,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;iBAC3C,EAAE,CAAC,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;iBAChC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;YAEtB,UAAU,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;QAC5B,CAAC;QAED,IAAI,OAAO,CAAC,GAAG,CAAC,qBAAqB,KAAK,MAAM,EAAE,CAAC;YACjD,MAAM,UAAU,GAAG,MAAM,8BAAmB;iBACzC,GAAG,CAAC,8BAA8B,EAAE;gBACnC,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK;aAC7B,CAAC,CAAC;YAEL,WAAW,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,cAAc,IAAI,CAAC,UAAU,GAAG,CAClE,EAAE,CAAC,aAAa,EAAE,OAAO;gBACvB,CAAC,CAAC,CAAC;gBACH,CAAC,CAAC,CAAC,CACN,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,WAAW,GAAG,UAAU,GAAG,CACzB,EAAE,CAAC,aAAa,EAAE,OAAO;gBACvB,CAAC,CAAC,CAAC;gBACH,CAAC,CAAC,CAAC,CACN,CAAA;QACH,CAAC;IACH,CAAC;SAAM,IAAI,OAAO,CAAC,GAAG,CAAC,qBAAqB,KAAK,MAAM,EAAE,CAAC;QACxD,6BAA6B;QAC7B,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG,MAAM,2BAAgB;aAC5E,GAAG,CAAC,0BAA0B,EAAE,EAAE,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAElG,IAAI,cAAc,IAAI,CAAC,eAAe,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACvE,eAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;YAC1E,MAAM,cAAc,CAAC;QACvB,CAAC;QAED,MAAM,cAAc,GAAW,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;QAE7D,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG,MAAM,8BAAmB;aACxE,IAAI,CAAC,gBAAgB,CAAC;aACtB,MAAM,CAAC,GAAG,CAAC;aACX,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;aAC9B,KAAK,CAAC,CAAC,CAAC;aACR,YAAY,EAAE,CAAC;QAElB,IAAI,aAAa,EAAE,CAAC;YAClB,eAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC;YAClE,MAAM,aAAa,CAAC;QACtB,CAAC;QAED,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACzC,IAAI,cAAc,KAAK,CAAC,EAAE,CAAC;gBACzB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,CAAC;YAC1E,CAAC;iBAAM,CAAC;gBACN,MAAM,GAAG,WAAW,CAAC,CAAC,mCAAmC;YAC3D,CAAC;QACH,CAAC;aAAM,CAAC;YACN,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC;QACzD,CAAC;QAED,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAE9B,IAAI,QAAQ,IAAI,QAAQ,CAAC,OAAO,KAAK,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YACtD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC;QACtE,CAAC;QAED,MAAM,kBAAkB,GAAG,sCAAsC,CAAC;QAElE,IACE,QAAQ;eACL,QAAQ,CAAC,OAAO,KAAK,kBAAkB;eACvC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EACvF,CAAC;YACD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC;QACxE,CAAC;QAED,cAAc,GAAG,cAAe,CAAC;QACjC,aAAa,GAAG,EAAE,CAAC;QAEnB,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,OAAO,IAAI,EAAE,CAAC;YACZ,MAAM,UAAU,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;YACtC,IAAI,QAAQ,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;YACxC,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;gBACtB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YACrC,CAAC;YAED,MAAM,WAAW,GAAG,MAAM,8BAAmB;iBAC1C,IAAI,CAAC,gBAAgB,CAAC;iBACtB,MAAM,CAAC,QAAQ,CAAC;iBAChB,EAAE,CAAC,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;iBAChC,EAAE,CAAC,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;iBAC/B,KAAK,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;iBACxC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC;iBAC3B,YAAY,EAAE,CAAC;YAElB,MAAM,WAAW,GAAG,QAAQ,GAAG,UAAU,CAAC;YAE1C,MAAM,IAAI,GAAG,WAAW,CAAC,IAAI,IAAI,EAAE,CAAC;YAEpC,aAAa,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YAE/C,IAAI,IAAI,CAAC,MAAM,GAAG,WAAW,EAAE,CAAC;gBAC9B,MAAM;YACR,CAAC;YAED,IAAI,QAAQ,KAAK,GAAG,EAAE,CAAC;gBACrB,MAAM;YACR,CAAC;YAED,CAAC,EAAE,CAAA;QACL,CAAC;QAED,UAAU,GAAG,cAAc,IAAI,CAAC,CAAC;QACjC,WAAW,GAAG,QAAQ,EAAE,cAAc,IAAI,UAAU,CAAC;IACvD,CAAC;SAAM,CAAC;QACN,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,CAAC;IAC1E,CAAC;IAED,IAAI,QAAQ,GAAqB,EAAE,CAAC;IAEpC,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;QACtB,8BAA8B;QAC9B,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,MAAM,UAAU,GAAG,QAAQ,CAAC,CAAC,kBAAkB;QAC/C,MAAM,MAAM,GAAG,GAAG,CAAC,CAAC,gCAAgC;QAEpD,KACE,IAAI,CAAC,GAAG,CAAC,EACT,CAAC,GAAG,aAAa,CAAC,MAAM,IAAI,KAAK,GAAG,UAAU,EAC9C,CAAC,IAAI,MAAM,EACX,CAAC;YACD,sCAAsC;YACtC,MAAM,UAAU,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC;YACtD,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,CAAC;YAEvC,qEAAqE;YACrE,uDAAuD;YACvD,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,MAAM,IAAI,KAAK,GAAG,UAAU,EAAE,EAAE,EAAE,EAAE,CAAC;gBAC9D,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;gBACrB,MAAM,KAAK,GAAG,MAAM,GAAG,CAAC,QAAQ,EAAE,CAAC;gBAEnC,IAAI,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,QAAQ,EAAE,CAAC;oBAC7C,sEAAsE;oBACtE,SAAS;gBACX,CAAC;gBAED,IAAI,GAAG,CAAC,WAAW,KAAK,SAAS,IAAI,GAAG,CAAC,WAAW,KAAK,IAAI,EAAE,CAAC;oBAC9D,eAAM,CAAC,IAAI,CACT,wDAAwD,EACxD,EAAE,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,CAAC,WAAW,EAAE,CACvD,CAAC;oBACF,SAAS;gBACX,CAAC;gBACD,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACnB,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,MAAM,CAAC;YAC1D,CAAC;QACH,CAAC;QAED,6FAA6F;QAC7F,IAAI,KAAK,GAAG,UAAU,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAChD,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1C,CAAC;IACH,CAAC;SAAM,CAAC;QACN,QAAQ,GAAG,CACT,MAAM,OAAO,CAAC,GAAG,CACf,CAAC,MAAM,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAC7C,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAC7C,CACF,CACF,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,IAAI,CAAqB,CAAC;IAClD,CAAC;IAED,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;IAEhD,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC;IACtE,MAAM,OAAO,GAAG,IAAI,GAAG,CACrB,GAAG,QAAQ,MAAM,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,IAAI,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,CAChG,CAAC;IAEF,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;IAEnE,IAAI,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;QACxC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACrD,CAAC;IAED,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QACnB,OAAO,EAAE,IAAI;QACb,MAAM;QACN,SAAS,EAAE,cAAc;QACzB,KAAK,EAAE,UAAU;QACjB,WAAW;QACX,SAAS,EAAE,CAAC,MAAM,IAAA,4BAAc,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,EAAE;QACjE,IAAI,EACF,MAAM,KAAK,UAAU,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,KAAK,cAAc,CAAC,mDAAmD;YACjH,CAAC,CAAC,SAAS;YACX,CAAC,CAAC,OAAO,CAAC,IAAI;QAClB,IAAI,EAAE,IAAI;KACX,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { Response } from \"express\";\nimport {\n  CrawlStatusParams,\n  CrawlStatusResponse,\n  ErrorResponse,\n  RequestWithAuth,\n} from \"./types\";\nimport {\n  getCrawl,\n  getCrawlExpiry,\n  getCrawlJobs,\n  getDoneJobsOrdered,\n  getDoneJobsOrderedLength,\n  isCrawlKickoffFinished,\n} from \"../../lib/crawl-redis\";\nimport { getScrapeQueue } from \"../../services/queue-service\";\nimport {\n  supabaseGetJobById,\n  supabaseGetJobsById,\n} from \"../../lib/supabase-jobs\";\nimport { configDotenv } from \"dotenv\";\nimport type { Job, JobState, Queue } from \"bullmq\";\nimport { logger } from \"../../lib/logger\";\nimport { supabase_rr_service, supabase_service } from \"../../services/supabase\";\nimport { getConcurrencyLimitedJobs, getCrawlConcurrencyLimitActiveJobs } from \"../../lib/concurrency-limit\";\nimport { getJobFromGCS } from \"../../lib/gcs-jobs\";\nconfigDotenv();\n\nexport type PseudoJob<T> = {\n  id: string,\n  getState(): Promise<JobState | \"unknown\"> | JobState | \"unknown\",\n  returnvalue: T | null,\n  timestamp: number,\n  data: {\n    scrapeOptions: any,\n    teamId?: string,\n  },\n  failedReason?: string,\n}\n\nexport type DBJob = { docs: any, success: boolean, page_options: any, date_added: any, message: string | null, team_id: string}\n\nexport async function getJob(id: string): Promise<PseudoJob<any> | null> {\n  const [bullJob, dbJob, gcsJob] = await Promise.all([\n    getScrapeQueue().getJob(id),\n    (process.env.USE_DB_AUTHENTICATION === \"true\" ? supabaseGetJobById(id) : null) as Promise<DBJob | null>,\n    (process.env.GCS_BUCKET_NAME ? getJobFromGCS(id) : null) as Promise<any | null>,\n  ]);\n\n  if (!bullJob && !dbJob) return null;\n\n  const data = gcsJob ?? dbJob?.docs ?? bullJob?.returnvalue;\n  if (gcsJob === null && data) {\n    logger.warn(\"GCS Job not found\", {\n      jobId: id,\n    });\n  }\n\n  const job: PseudoJob<any> = {\n    id,\n    getState: bullJob ? bullJob.getState : (() => dbJob!.success ? \"completed\" : \"failed\"),\n    returnvalue: Array.isArray(data)\n      ? data[0]\n      : data,\n    data: {\n      scrapeOptions: bullJob ? bullJob.data.scrapeOptions : dbJob!.page_options,\n    },\n    timestamp: bullJob ? bullJob.timestamp : new Date(dbJob!.date_added).valueOf(),\n    failedReason: (bullJob ? bullJob.failedReason : dbJob!.message) || undefined,\n  }\n\n  return job;\n}\n\nexport async function getJobs(ids: string[]): Promise<PseudoJob<any>[]> {\n  const [bullJobs, dbJobs, gcsJobs] = await Promise.all([\n    Promise.all(ids.map((x) => getScrapeQueue().getJob(x))).then(x => x.filter(x => x)) as Promise<(Job<any, any, string> & { id: string })[]>,\n    process.env.USE_DB_AUTHENTICATION === \"true\" ? supabaseGetJobsById(ids) : [],\n    process.env.GCS_BUCKET_NAME ? Promise.all(ids.map(async (x) => ({ id: x, job: await getJobFromGCS(x) }))).then(x => x.filter(x => x.job)) as Promise<({ id: string, job: any | null })[]> : [],\n  ]);\n\n  const bullJobMap = new Map<string, PseudoJob<any>>();\n  const dbJobMap = new Map<string, DBJob>();\n  const gcsJobMap = new Map<string, any>();\n\n  for (const job of bullJobs) {\n    bullJobMap.set(job.id, job);\n  }\n\n  for (const job of dbJobs) {\n    dbJobMap.set(job.job_id, job);\n  }\n\n  for (const job of gcsJobs) {\n    gcsJobMap.set(job.id, job.job);\n  }\n\n  const jobs: PseudoJob<any>[] = [];\n\n  for (const id of ids) {\n    const bullJob = bullJobMap.get(id);\n    const dbJob = dbJobMap.get(id);\n    const gcsJob = gcsJobMap.get(id);\n\n    if (!bullJob && !dbJob) continue;\n\n    const data = gcsJob ?? dbJob?.docs ?? bullJob?.returnvalue;\n    if (gcsJob === null && data) {\n      logger.warn(\"GCS Job not found\", {\n        jobId: id,\n      });\n    }\n\n    const job: PseudoJob<any> = {\n      id,\n      getState: bullJob ? (() => bullJob.getState()) : (() => dbJob!.success ? \"completed\" : \"failed\"),\n      returnvalue: Array.isArray(data)\n        ? data[0]\n        : data,\n      data: {\n        scrapeOptions: bullJob ? bullJob.data.scrapeOptions : dbJob!.page_options,\n      },\n      timestamp: bullJob ? bullJob.timestamp : new Date(dbJob!.date_added).valueOf(),\n      failedReason: (bullJob ? bullJob.failedReason : dbJob!.message) || undefined,\n    }\n\n    jobs.push(job);\n  }\n\n  return jobs;\n}\n\nexport async function crawlStatusController(\n  req: RequestWithAuth<CrawlStatusParams, undefined, CrawlStatusResponse>,\n  res: Response<CrawlStatusResponse>,\n  isBatch = false,\n) {\n  const start =\n      typeof req.query.skip === \"string\" ? parseInt(req.query.skip, 10) : 0;\n    const end =\n      typeof req.query.limit === \"string\"\n        ? start + parseInt(req.query.limit, 10) - 1\n        : undefined;\n  \n  const sc = await getCrawl(req.params.jobId);\n\n  let status: Exclude<CrawlStatusResponse, ErrorResponse>[\"status\"];\n  let doneJobsLength: number;\n  let doneJobsOrder: string[];\n  let totalCount: number;\n  let creditsUsed: number;\n\n  if (sc) {\n    if (sc.team_id !== req.auth.team_id) {\n      return res.status(403).json({ success: false, error: \"Forbidden\" });\n    }\n\n    let jobIDs = await getCrawlJobs(req.params.jobId);\n    let jobStatuses = await Promise.all(\n      jobIDs.map(\n        async (x) => [x, await getScrapeQueue().getJobState(x)] as const,\n      ),\n    );\n\n    const throttledJobsSet = new Set(await getConcurrencyLimitedJobs(req.auth.team_id));\n    const activeJobsSet = new Set(await getCrawlConcurrencyLimitActiveJobs(req.params.jobId));\n\n    const validJobStatuses: [string, JobState | \"unknown\"][] = [];\n    const validJobIDs: string[] = [];\n\n    for (const [id, status] of jobStatuses) {\n      if (throttledJobsSet.has(id)) {\n        validJobStatuses.push([id, \"prioritized\"]);\n        validJobIDs.push(id);\n      } else if (status === \"unknown\" && activeJobsSet.has(id)) {\n        validJobStatuses.push([id, \"active\"]);\n        validJobIDs.push(id);\n      } else if (\n        status !== \"failed\" &&\n        status !== \"unknown\"\n      ) {\n        validJobStatuses.push([id, status]);\n        validJobIDs.push(id);\n      }\n    }\n\n    status =\n      sc.cancelled\n        ? \"cancelled\"\n        : validJobStatuses.every((x) => x[1] === \"completed\") &&\n            (sc.crawlerOptions\n              ? await isCrawlKickoffFinished(req.params.jobId)\n              : true)\n          ? \"completed\"\n          : \"scraping\";\n\n    // Use validJobIDs instead of jobIDs for further processing\n    jobIDs = validJobIDs;\n\n    doneJobsLength = await getDoneJobsOrderedLength(req.params.jobId);\n    doneJobsOrder = await getDoneJobsOrdered(\n      req.params.jobId,\n      start,\n      end ?? -1,\n    );\n\n    totalCount = jobIDs.length;\n\n    if (totalCount === 0 && process.env.USE_DB_AUTHENTICATION === \"true\") {\n      const x = await supabase_rr_service\n        .from('firecrawl_jobs')\n        .select('*', { count: 'exact', head: true })\n        .eq(\"crawl_id\", req.params.jobId)\n        .eq(\"success\", true)\n      \n      totalCount = x.count ?? 0;\n    }\n\n    if (process.env.USE_DB_AUTHENTICATION === \"true\") {\n      const creditsRpc = await supabase_rr_service\n        .rpc(\"credits_billed_by_crawl_id_1\", {\n          i_crawl_id: req.params.jobId,\n        });\n      \n      creditsUsed = creditsRpc.data?.[0]?.credits_billed ?? (totalCount * (\n        sc.scrapeOptions?.extract\n          ? 5\n          : 1\n      ));\n    } else {\n      creditsUsed = totalCount * (\n        sc.scrapeOptions?.extract\n          ? 5\n          : 1\n      )\n    }\n  } else if (process.env.USE_DB_AUTHENTICATION === \"true\") {\n    // TODO: move to read replica\n    const { data: scrapeJobCounts, error: scrapeJobError } = await supabase_service\n      .rpc(\"count_jobs_of_crawl_team\", { i_crawl_id: req.params.jobId, i_team_id: req.auth.team_id });\n\n    if (scrapeJobError || !scrapeJobCounts || scrapeJobCounts.length === 0) {\n      logger.error(\"Error getting scrape job count\", { error: scrapeJobError });\n      throw scrapeJobError;\n    }\n\n    const scrapeJobCount: number = scrapeJobCounts[0].count ?? 0;\n\n    const { data: crawlJobs, error: crawlJobError } = await supabase_rr_service\n      .from(\"firecrawl_jobs\")\n      .select(\"*\")\n      .eq(\"job_id\", req.params.jobId)\n      .limit(1)\n      .throwOnError();\n    \n    if (crawlJobError) {\n      logger.error(\"Error getting crawl job\", { error: crawlJobError });\n      throw crawlJobError;\n    }\n\n    if (!crawlJobs || crawlJobs.length === 0) {\n      if (scrapeJobCount === 0) {\n        return res.status(404).json({ success: false, error: \"Job not found\" });\n      } else {\n        status = \"completed\"; // fake completed to cut the losses\n      }\n    } else {\n      status = crawlJobs[0].success ? \"completed\" : \"failed\";\n    }\n\n    const crawlJob = crawlJobs[0];\n\n    if (crawlJob && crawlJob.team_id !== req.auth.team_id) {\n      return res.status(403).json({ success: false, error: \"Forbidden\" });\n    }\n\n    const TEMP_FAIRE_TEAM_ID = \"f96ad1a4-8102-4b35-9904-36fd517d3616\";\n    \n    if (\n      crawlJob\n      && crawlJob.team_id !== TEMP_FAIRE_TEAM_ID\n      && new Date().valueOf() - new Date(crawlJob.date_added).valueOf() > 24 * 60 * 60 * 1000\n    ) {\n      return res.status(404).json({ success: false, error: \"Job expired\" });\n    }\n\n    doneJobsLength = scrapeJobCount!;\n    doneJobsOrder = [];\n\n    const step = 1000;\n    let i = 0;\n    while (true) {\n      const rangeStart = start + (i * step);\n      let rangeEnd = start + ((i + 1) * step);\n      if (end !== undefined) {\n        rangeEnd = Math.min(end, rangeEnd);\n      }\n\n      const currentJobs = await supabase_rr_service\n        .from(\"firecrawl_jobs\")\n        .select(\"job_id\")\n        .eq(\"crawl_id\", req.params.jobId)\n        .eq(\"team_id\", req.acuc.team_id)\n        .order(\"date_added\", { ascending: true })\n        .range(rangeStart, rangeEnd)\n        .throwOnError();\n\n      const rangeLength = rangeEnd - rangeStart;\n\n      const data = currentJobs.data ?? [];\n\n      doneJobsOrder.push(...data.map(x => x.job_id));\n\n      if (data.length < rangeLength) {\n        break;\n      }\n\n      if (rangeEnd === end) {\n        break;\n      }\n\n      i++\n    }\n\n    totalCount = scrapeJobCount ?? 0;\n    creditsUsed = crawlJob?.credits_billed ?? totalCount;\n  } else {\n    return res.status(404).json({ success: false, error: \"Job not found\" });\n  }\n\n  let doneJobs: PseudoJob<any>[] = [];\n\n  if (end === undefined) {\n    // determine 10 megabyte limit\n    let bytes = 0;\n    const bytesLimit = 10485760; // 10 MiB in bytes\n    const factor = 100; // chunking for faster retrieval\n\n    for (\n      let i = 0;\n      i < doneJobsOrder.length && bytes < bytesLimit;\n      i += factor\n    ) {\n      // get current chunk and retrieve jobs\n      const currentIDs = doneJobsOrder.slice(i, i + factor);\n      const jobs = await getJobs(currentIDs);\n\n      // iterate through jobs and add them one them one to the byte counter\n      // both loops will break once we cross the byte counter\n      for (let ii = 0; ii < jobs.length && bytes < bytesLimit; ii++) {\n        const job = jobs[ii];\n        const state = await job.getState();\n\n        if (state === \"failed\" || state === \"active\") {\n          // TODO: why is active here? race condition? shouldn't matter tho - MG\n          continue;\n        }\n\n        if (job.returnvalue === undefined || job.returnvalue === null) {\n          logger.warn(\n            \"Job was considered done, but returnvalue is undefined!\",\n            { jobId: job.id, state, returnvalue: job.returnvalue },\n          );\n          continue;\n        }\n        doneJobs.push(job);\n        bytes += JSON.stringify(job.returnvalue ?? null).length;\n      }\n    }\n\n    // if we ran over the bytes limit, remove the last document, except if it's the only document\n    if (bytes > bytesLimit && doneJobs.length !== 1) {\n      doneJobs.splice(doneJobs.length - 1, 1);\n    }\n  } else {\n    doneJobs = (\n      await Promise.all(\n        (await getJobs(doneJobsOrder)).map(async (x) =>\n          (await x.getState()) === \"failed\" ? null : x,\n        ),\n      )\n    ).filter((x) => x !== null) as PseudoJob<any>[];\n  }\n\n  const data = doneJobs.map((x) => x.returnvalue);\n\n  const protocol = process.env.ENV === \"local\" ? req.protocol : \"https\";\n  const nextURL = new URL(\n    `${protocol}://${req.get(\"host\")}/v1/${isBatch ? \"batch/scrape\" : \"crawl\"}/${req.params.jobId}`,\n  );\n\n  nextURL.searchParams.set(\"skip\", (start + data.length).toString());\n\n  if (typeof req.query.limit === \"string\") {\n    nextURL.searchParams.set(\"limit\", req.query.limit);\n  }\n\n  res.status(200).json({\n    success: true,\n    status,\n    completed: doneJobsLength,\n    total: totalCount,\n    creditsUsed,\n    expiresAt: (await getCrawlExpiry(req.params.jobId)).toISOString(),\n    next:\n      status !== \"scraping\" && start + data.length === doneJobsLength // if there's not gonna be any documents after this\n        ? undefined\n        : nextURL.href,\n    data: data,\n  });\n}\n"]}