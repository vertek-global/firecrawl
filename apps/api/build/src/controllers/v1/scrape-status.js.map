{"version":3,"file":"scrape-status.js","sourceRoot":"","sources":["../../../../src/controllers/v1/scrape-status.ts"],"names":[],"mappings":";;AAKA,wDAgDC;AApDD,2DAAqE;AACrE,iDAAwC;AACxC,6CAAqD;AAE9C,KAAK,UAAU,sBAAsB,CAAC,GAAQ,EAAE,GAAQ;IAC7D,MAAM,MAAM,GAAG,eAAO,CAAC,KAAK,CAAC;QAC3B,MAAM,EAAE,eAAe;QACvB,MAAM,EAAE,wBAAwB;QAChC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO;QACxB,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK;QACvB,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK;QAC1B,iBAAiB,EAAE,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ;KAC7C,CAAC,CAAC;IAEH,IAAI,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;QAC9B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,kJAAkJ,EAAE,CAAC,CAAC;IAC7M,CAAC;IAED,MAAM,GAAG,GAAG,MAAM,IAAA,0CAA0B,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAEvE,IAAI,CAAC,GAAG,EAAE,CAAC;QACT,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,gBAAgB;SACxB,CAAC,CAAC;IACL,CAAC;IAED,IACE,GAAG,EAAE,OAAO,KAAK,GAAG,CAAC,IAAI,CAAC,OAAO,EACjC,CAAC;QACD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,8CAA8C;SACtD,CAAC,CAAC;IACL,CAAC;IAED,MAAM,OAAO,GAAG,MAAM,IAAA,qBAAM,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/C,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,WAAW,CAAC;QAC9C,CAAC,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;QACzB,CAAC,CAAC,OAAO,EAAE,WAAW,CAAC;IAEzB,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC1B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,gBAAgB;SACxB,CAAC,CAAC;IACL,CAAC;IAED,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QAC1B,OAAO,EAAE,IAAI;QACb,IAAI;KACL,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { Response } from \"express\";\nimport { supabaseGetJobByIdOnlyData } from \"../../lib/supabase-jobs\";\nimport { getJob } from \"./crawl-status\";\nimport { logger as _logger } from \"../../lib/logger\";\n\nexport async function scrapeStatusController(req: any, res: any) {\n  const logger = _logger.child({\n    module: \"scrape-status\",\n    method: \"scrapeStatusController\",\n    teamId: req.auth.team_id,\n    jobId: req.params.jobId,\n    scrapeId: req.params.jobId,\n    zeroDataRetention: req.acuc?.flags?.forceZDR,\n  });\n\n  if (req.acuc?.flags?.forceZDR) {\n    return res.status(400).json({ success: false, error: \"Your team has zero data retention enabled. This is not supported on scrape status. Please contact support@firecrawl.com to unblock this feature.\" });\n  }\n\n  const job = await supabaseGetJobByIdOnlyData(req.params.jobId, logger);\n\n  if (!job) {\n    return res.status(404).json({\n      success: false,\n      error: \"Job not found.\",\n    });\n  }\n\n  if (\n    job?.team_id !== req.auth.team_id\n  ) {\n    return res.status(403).json({\n      success: false,\n      error: \"You are not allowed to access this resource.\",\n    });\n  }\n\n  const jobData = await getJob(req.params.jobId);\n  const data = Array.isArray(jobData?.returnvalue)\n    ? jobData?.returnvalue[0]\n    : jobData?.returnvalue;\n  \n  if (!data) {\n    return res.status(404).json({\n      success: false,\n      error: \"Job not found.\",\n    });\n  }\n\n  return res.status(200).json({\n    success: true,\n    data,\n  });\n}\n"]}