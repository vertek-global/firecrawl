{"version":3,"file":"crawl-errors.js","sourceRoot":"","sources":["../../../../src/controllers/v1/crawl-errors.ts"],"names":[],"mappings":";;AAgBA,wBAKC;AAED,0BAMC;AAED,sDAyCC;AAlED,uDAG+B;AAC/B,gEAA8D;AAC9D,uDAAmE;AACnE,mCAAsC;AAEtC,IAAA,qBAAY,GAAE,CAAC;AAER,KAAK,UAAU,MAAM,CAAC,EAAU;IACrC,MAAM,GAAG,GAAG,MAAM,IAAA,8BAAc,GAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC9C,IAAI,CAAC,GAAG;QAAE,OAAO,GAAG,CAAC;IAErB,OAAO,GAAG,CAAC;AACb,CAAC;AAEM,KAAK,UAAU,OAAO,CAAC,GAAa;IACzC,MAAM,IAAI,GAA6B,CACrC,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,8BAAc,GAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAC9D,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAA6B,CAAC;IAE/C,OAAO,IAAI,CAAC;AACd,CAAC;AAEM,KAAK,UAAU,qBAAqB,CACzC,GAAuE,EACvE,GAAkC;IAElC,MAAM,EAAE,GAAG,MAAM,IAAA,sBAAQ,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC5C,IAAI,CAAC,EAAE,EAAE,CAAC;QACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,CAAC;IAC1E,CAAC;IAED,IAAI,EAAE,CAAC,OAAO,KAAK,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QACpC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC;IACtE,CAAC;IAED,IAAI,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CACjC,CAAC,MAAM,IAAA,0BAAY,EAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CACxC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,MAAM,IAAA,8BAAc,GAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAU,CACjE,CACF,CAAC;IAEF,MAAM,YAAY,GAAa,EAAE,CAAC;IAElC,KAAK,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,IAAI,WAAW,EAAE,CAAC;QACvC,IAAI,MAAM,KAAK,QAAQ,EAAE,CAAC;YACxB,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACxB,CAAC;IACH,CAAC;IAED,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QACnB,MAAM,EAAE,CAAC,MAAM,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAChD,EAAE,EAAE,CAAC,CAAC,EAAE;YACR,SAAS,EACP,CAAC,CAAC,UAAU,KAAK,SAAS;gBACxB,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE;gBACtC,CAAC,CAAC,SAAS;YACf,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG;YACf,KAAK,EAAE,CAAC,CAAC,YAAY;SACtB,CAAC,CAAC;QACH,aAAa,EAAE,MAAM,4BAAoB,CAAC,QAAQ,CAChD,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,iBAAiB,CAChD;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { Response } from \"express\";\nimport {\n  CrawlErrorsResponse,\n  CrawlStatusParams,\n  RequestWithAuth,\n} from \"./types\";\nimport {\n  getCrawl,\n  getCrawlJobs,\n} from \"../../lib/crawl-redis\";\nimport { getScrapeQueue } from \"../../services/queue-service\";\nimport { redisEvictConnection } from \"../../../src/services/redis\";\nimport { configDotenv } from \"dotenv\";\nimport { Job } from \"bullmq\";\nconfigDotenv();\n\nexport async function getJob(id: string) {\n  const job = await getScrapeQueue().getJob(id);\n  if (!job) return job;\n\n  return job;\n}\n\nexport async function getJobs(ids: string[]) {\n  const jobs: (Job & { id: string })[] = (\n    await Promise.all(ids.map((x) => getScrapeQueue().getJob(x)))\n  ).filter((x) => x) as (Job & { id: string })[];\n\n  return jobs;\n}\n\nexport async function crawlErrorsController(\n  req: RequestWithAuth<CrawlStatusParams, undefined, CrawlErrorsResponse>,\n  res: Response<CrawlErrorsResponse>,\n) {\n  const sc = await getCrawl(req.params.jobId);\n  if (!sc) {\n    return res.status(404).json({ success: false, error: \"Job not found\" });\n  }\n\n  if (sc.team_id !== req.auth.team_id) {\n    return res.status(403).json({ success: false, error: \"Forbidden\" });\n  }\n\n  let jobStatuses = await Promise.all(\n    (await getCrawlJobs(req.params.jobId)).map(\n      async (x) => [x, await getScrapeQueue().getJobState(x)] as const,\n    ),\n  );\n\n  const failedJobIDs: string[] = [];\n\n  for (const [id, status] of jobStatuses) {\n    if (status === \"failed\") {\n      failedJobIDs.push(id);\n    }\n  }\n\n  res.status(200).json({\n    errors: (await getJobs(failedJobIDs)).map((x) => ({\n      id: x.id,\n      timestamp:\n        x.finishedOn !== undefined\n          ? new Date(x.finishedOn).toISOString()\n          : undefined,\n      url: x.data.url,\n      error: x.failedReason,\n    })),\n    robotsBlocked: await redisEvictConnection.smembers(\n      \"crawl:\" + req.params.jobId + \":robots_blocked\",\n    ),\n  });\n}\n"]}