{"version":3,"file":"runWebScraper.js","sourceRoot":"","sources":["../../../src/main/runWebScraper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Job } from \"bullmq\";\nimport {\n  WebScraperOptions,\n  RunWebScraperParams,\n  RunWebScraperResult,\n} from \"../types\";\nimport { billTeam } from \"../services/billing/credit_billing\";\nimport { Document } from \"../controllers/v1/types\";\nimport { supabase_service } from \"../services/supabase\";\nimport { logger as _logger } from \"../lib/logger\";\nimport { configDotenv } from \"dotenv\";\nimport {\n  EngineResultsTracker,\n  scrapeURL,\n  ScrapeUrlResponse,\n} from \"../scraper/scrapeURL\";\nimport { Engine } from \"../scraper/scrapeURL/engines\";\nimport { CostTracking } from \"../lib/extract/extraction-service\";\nconfigDotenv();\n\nexport async function startWebScraperPipeline({\n  job,\n  token,\n  costTracking,\n}: {\n  job: Job<WebScraperOptions> & { id: string };\n  token: string;\n  costTracking: CostTracking;\n}) {\n  return await runWebScraper({\n    url: job.data.url,\n    mode: job.data.mode,\n    scrapeOptions: {\n      ...job.data.scrapeOptions,\n      ...(job.data.crawl_id\n        ? {\n            formats: job.data.scrapeOptions.formats.concat([\"rawHtml\"]),\n          }\n        : {}),\n    },\n    internalOptions: job.data.internalOptions,\n    // onSuccess: (result, mode) => {\n    //   logger.debug(`üêÇ Job completed ${job.id}`);\n    //   saveJob(job, result, token, mode);\n    // },\n    // onError: (error) => {\n    //   logger.error(`üêÇ Job failed ${job.id}`);\n    //   ScrapeEvents.logJobEvent(job, \"failed\");\n    // },\n    team_id: job.data.team_id,\n    bull_job_id: job.id.toString(),\n    priority: job.opts.priority,\n    is_scrape: job.data.is_scrape ?? false,\n    is_crawl: !!(job.data.crawl_id && job.data.crawlerOptions !== null),\n    urlInvisibleInCurrentCrawl: job.data.crawlerOptions?.urlInvisibleInCurrentCrawl ?? false,\n    costTracking,\n  });\n}\n\nexport async function runWebScraper({\n  url,\n  mode,\n  scrapeOptions,\n  internalOptions,\n  // onSuccess,\n  // onError,\n  team_id,\n  bull_job_id,\n  priority,\n  is_scrape = false,\n  is_crawl = false,\n  urlInvisibleInCurrentCrawl = false,\n  costTracking,\n}: RunWebScraperParams): Promise<ScrapeUrlResponse> {\n  const logger = _logger.child({\n    method: \"runWebScraper\",\n    module: \"runWebscraper\",\n    scrapeId: bull_job_id,\n    jobId: bull_job_id,\n  });\n  const tries = is_crawl ? 3 : 1;\n\n  let response: ScrapeUrlResponse | undefined = undefined;\n  let engines: EngineResultsTracker = {};\n  let error: any = undefined;\n\n  for (let i = 0; i < tries; i++) {\n    if (i > 0) {\n      logger.debug(\"Retrying scrape...\", {\n        tries,\n        i,\n        previousStatusCode: (response as any)?.document?.metadata?.statusCode,\n        previousError: error,\n      });\n    }\n\n    response = undefined;\n    engines = {};\n    error = undefined;\n\n    try {\n      response = await scrapeURL(bull_job_id, url, scrapeOptions, {\n        priority,\n        ...internalOptions,\n        urlInvisibleInCurrentCrawl,\n        teamId: internalOptions?.teamId ?? team_id,\n      }, costTracking);\n      if (!response.success) {\n        if (response.error instanceof Error) {\n          throw response.error;\n        } else {\n          throw new Error(\n            \"scrapeURL error: \" +\n              (Array.isArray(response.error)\n                ? JSON.stringify(response.error)\n                : typeof response.error === \"object\"\n                  ? JSON.stringify({ ...response.error })\n                  : response.error),\n          );\n        }\n      }\n\n      // This is where the returnvalue from the job is set\n      // onSuccess(response.document, mode);\n\n      engines = response.engines;\n\n      if (\n        (response.document.metadata.statusCode >= 200 &&\n          response.document.metadata.statusCode < 300) ||\n        response.document.metadata.statusCode === 304\n      ) {\n        // status code is good -- do not attempt retry\n        break;\n      }\n    } catch (_error) {\n      error = _error;\n      engines =\n        response !== undefined\n          ? response.engines\n          : typeof error === \"object\" && error !== null\n            ? ((error as any).results ?? {})\n            : {};\n    }\n  }\n\n  // const engineOrder = Object.entries(engines)\n  //   .sort((a, b) => a[1].startedAt - b[1].startedAt)\n  //   .map((x) => x[0]) as Engine[];\n\n  // for (const engine of engineOrder) {\n  //   const result = engines[engine] as Exclude<\n  //     EngineResultsTracker[Engine],\n  //     undefined\n  //   >;\n  //   ScrapeEvents.insert(bull_job_id, {\n  //     type: \"scrape\",\n  //     url,\n  //     method: engine,\n  //     result: {\n  //       success: result.state === \"success\",\n  //       response_code:\n  //         result.state === \"success\" ? result.result.statusCode : undefined,\n  //       response_size:\n  //         result.state === \"success\" ? result.result.html.length : undefined,\n  //       error:\n  //         result.state === \"error\"\n  //           ? result.error\n  //           : result.state === \"timeout\"\n  //             ? \"Timed out\"\n  //             : undefined,\n  //       time_taken: result.finishedAt - result.startedAt,\n  //     },\n  //   });\n  // }\n\n  if (error === undefined && response?.success) {\n    return response;\n  } else {\n    if (response !== undefined) {\n      return {\n        ...response,\n        success: false,\n        error,\n      };\n    } else {\n      return {\n        success: false,\n        error,\n        logs: [\"no logs -- error coming from runWebScraper\"],\n        engines,\n      };\n    }\n  }\n}\n\nconst saveJob = async (\n  job: Job,\n  result: any,\n  token: string,\n  mode: string,\n  engines?: EngineResultsTracker,\n) => {\n  try {\n    const useDbAuthentication = process.env.USE_DB_AUTHENTICATION === \"true\";\n    if (useDbAuthentication) {\n      const { data, error } = await supabase_service\n        .from(\"firecrawl_jobs\")\n        .update({ docs: result })\n        .eq(\"job_id\", job.id);\n\n      if (error) throw new Error(error.message);\n      // try {\n      //   if (mode === \"crawl\") {\n      //     await job.moveToCompleted(null, token, false);\n      //   } else {\n      //     await job.moveToCompleted(result, token, false);\n      //   }\n      // } catch (error) {\n      //   // I think the job won't exist here anymore\n      // }\n      // } else {\n      //   try {\n      //     await job.moveToCompleted(result, token, false);\n      //   } catch (error) {\n      //     // I think the job won't exist here anymore\n      //   }\n    }\n    // ScrapeEvents.logJobEvent(job, \"completed\");\n  } catch (error) {\n    _logger.error(`üêÇ Failed to update job status`, {\n      module: \"runWebScraper\",\n      method: \"saveJob\",\n      jobId: job.id,\n      scrapeId: job.id,\n    });\n  }\n};\n"]}