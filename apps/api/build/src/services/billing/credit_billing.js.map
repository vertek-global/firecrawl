{"version":3,"file":"credit_billing.js","sourceRoot":"","sources":["../../../../src/services/billing/credit_billing.ts"],"names":[],"mappings":"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","sourcesContent":["import { NotificationType } from \"../../types\";\nimport { withAuth } from \"../../lib/withAuth\";\nimport { sendNotification } from \"../notification/email_notification\";\nimport { supabase_rr_service, supabase_service } from \"../supabase\";\nimport { logger } from \"../../lib/logger\";\nimport * as Sentry from \"@sentry/node\";\nimport { AuthCreditUsageChunk } from \"../../controllers/v1/types\";\nimport { autoCharge } from \"./auto_charge\";\nimport { getValue, setValue } from \"../redis\";\nimport { queueBillingOperation } from \"./batch_billing\";\nimport type { Logger } from \"winston\";\n\n// Deprecated, done via rpc\nconst FREE_CREDITS = 500;\n\n/**\n * If you do not know the subscription_id in the current context, pass subscription_id as undefined.\n */\nexport async function billTeam(\n  team_id: string,\n  subscription_id: string | null | undefined,\n  credits: number,\n  logger?: Logger,\n  is_extract: boolean = false,\n) {\n  // Maintain the withAuth wrapper for authentication\n  return withAuth(\n    async (team_id, subscription_id, credits, logger, is_extract) => {\n      // Within the authenticated context, queue the billing operation\n      return queueBillingOperation(team_id, subscription_id, credits, is_extract);\n    }, \n    { success: true, message: \"No DB, bypassed.\" }\n  )(team_id, subscription_id, credits, logger, is_extract);\n}\n\nexport async function supaBillTeam(\n  team_id: string,\n  subscription_id: string | null | undefined,\n  credits: number,\n  __logger?: Logger,\n  is_extract: boolean = false,\n) {\n  // This function should no longer be called directly\n  // It has been moved to batch_billing.ts\n  const _logger = (__logger ?? logger).child({\n    module: \"credit_billing\",\n    method: \"supaBillTeam\",\n    teamId: team_id,\n    subscriptionId: subscription_id,\n    credits,\n  });\n\n  _logger.warn(\"supaBillTeam was called directly. This function is deprecated and should only be called from batch_billing.ts\");\n  queueBillingOperation(team_id, subscription_id, credits, is_extract).catch((err) => {\n    _logger.error(\"Error queuing billing operation\", { err });\n    Sentry.captureException(err);\n  });\n  // Forward to the batch billing system\n  return {\n    success: true,\n    message: \"Billing operation queued\",\n  };\n}\n\nexport type CheckTeamCreditsResponse = {\n  success: boolean;\n  message: string;\n  remainingCredits: number;\n  chunk?: AuthCreditUsageChunk;\n};\n\nexport async function checkTeamCredits(\n  chunk: AuthCreditUsageChunk | null,\n  team_id: string,\n  credits: number,\n): Promise<CheckTeamCreditsResponse> {\n  return withAuth(supaCheckTeamCredits, {\n    success: true,\n    message: \"No DB, bypassed\",\n    remainingCredits: Infinity,\n  })(chunk, team_id, credits);\n}\n\n// if team has enough credits for the operation, return true, else return false\nexport async function supaCheckTeamCredits(\n  chunk: AuthCreditUsageChunk | null,\n  team_id: string,\n  credits: number,\n): Promise<CheckTeamCreditsResponse> {\n  // WARNING: chunk will be null if team_id is preview -- do not perform operations on it under ANY circumstances - mogery\n  if (team_id === \"preview\" || team_id.startsWith(\"preview_\")) {\n    return {\n      success: true,\n      message: \"Preview team, no credits used\",\n      remainingCredits: Infinity,\n    };\n  } else if (chunk === null) {\n    throw new Error(\"NULL ACUC passed to supaCheckTeamCredits\");\n  }\n\n  const creditsWillBeUsed = chunk.adjusted_credits_used + credits;\n\n  // In case chunk.price_credits is undefined, set it to a large number to avoid mistakes\n  const totalPriceCredits = chunk.total_credits_sum ?? 100000000;\n  // Removal of + credits\n  const creditUsagePercentage = chunk.adjusted_credits_used / totalPriceCredits;\n\n  let isAutoRechargeEnabled = false,\n    autoRechargeThreshold = 1000;\n  const cacheKey = `team_auto_recharge_${team_id}`;\n  let cachedData = await getValue(cacheKey);\n  if (cachedData) {\n    const parsedData = JSON.parse(cachedData);\n    isAutoRechargeEnabled = parsedData.auto_recharge;\n    autoRechargeThreshold = parsedData.auto_recharge_threshold;\n  } else {\n    const { data, error } = await supabase_rr_service\n      .from(\"teams\")\n      .select(\"auto_recharge, auto_recharge_threshold\")\n      .eq(\"id\", team_id)\n      .single();\n\n    if (data) {\n      isAutoRechargeEnabled = data.auto_recharge;\n      autoRechargeThreshold = data.auto_recharge_threshold;\n      await setValue(cacheKey, JSON.stringify(data), 300); // Cache for 5 minutes (300 seconds)\n    }\n  }\n\n  if (\n    isAutoRechargeEnabled &&\n    chunk.remaining_credits < autoRechargeThreshold &&\n    !chunk.is_extract\n  ) {\n    logger.info(\"Auto-recharge triggered\", {\n      team_id,\n      teamId: team_id,\n      autoRechargeThreshold,\n      remainingCredits: chunk.remaining_credits,\n    });\n    const autoChargeResult = await autoCharge(chunk, autoRechargeThreshold);\n    if (autoChargeResult.success) {\n      return {\n        success: true,\n        message: autoChargeResult.message,\n        remainingCredits: autoChargeResult.remainingCredits,\n        chunk: autoChargeResult.chunk,\n      };\n    }\n  }\n\n  // Compare the adjusted total credits used with the credits allowed by the plan\n  if (creditsWillBeUsed > totalPriceCredits) {\n    // Only notify if their actual credits (not what they will use) used is greater than the total price credits\n    if (chunk.adjusted_credits_used > totalPriceCredits) {\n      sendNotification(\n        team_id,\n        NotificationType.LIMIT_REACHED,\n        chunk.sub_current_period_start,\n        chunk.sub_current_period_end,\n        chunk,\n      );\n    }\n    return {\n      success: false,\n      message:\n        \"Insufficient credits to perform this request. For more credits, you can upgrade your plan at https://firecrawl.dev/pricing.\",\n      remainingCredits: chunk.remaining_credits,\n      chunk,\n    };\n  } else if (creditUsagePercentage >= 0.8 && creditUsagePercentage < 1) {\n    // Send email notification for approaching credit limit\n    sendNotification(\n      team_id,\n      NotificationType.APPROACHING_LIMIT,\n      chunk.sub_current_period_start,\n      chunk.sub_current_period_end,\n      chunk,\n    );\n  }\n\n  return {\n    success: true,\n    message: \"Sufficient credits available\",\n    remainingCredits: chunk.remaining_credits,\n    chunk,\n  };\n}\n\n// Count the total credits used by a team within the current billing period and return the remaining credits.\nexport async function countCreditsAndRemainingForCurrentBillingPeriod(\n  team_id: string,\n) {\n  // 1. Retrieve the team's active subscription based on the team_id.\n  const { data: subscription, error: subscriptionError } =\n    await supabase_service\n      .from(\"subscriptions\")\n      .select(\"id, price_id, current_period_start, current_period_end\")\n      .eq(\"team_id\", team_id)\n      .single();\n\n  const { data: coupons } = await supabase_service\n    .from(\"coupons\")\n    .select(\"credits\")\n    .eq(\"team_id\", team_id)\n    .eq(\"status\", \"active\");\n\n  let couponCredits = 0;\n  if (coupons && coupons.length > 0) {\n    couponCredits = coupons.reduce(\n      (total, coupon) => total + coupon.credits,\n      0,\n    );\n  }\n\n  if (subscriptionError || !subscription) {\n    // Free\n    const { data: creditUsages, error: creditUsageError } =\n      await supabase_service\n        .from(\"credit_usage\")\n        .select(\"credits_used\")\n        .is(\"subscription_id\", null)\n        .eq(\"team_id\", team_id);\n\n    if (creditUsageError || !creditUsages) {\n      throw new Error(\n        `Failed to retrieve credit usage for team_id: ${team_id}`,\n      );\n    }\n\n    const totalCreditsUsed = creditUsages.reduce(\n      (acc, usage) => acc + usage.credits_used,\n      0,\n    );\n\n    const remainingCredits = FREE_CREDITS + couponCredits - totalCreditsUsed;\n    return {\n      totalCreditsUsed: totalCreditsUsed,\n      remainingCredits,\n      totalCredits: FREE_CREDITS + couponCredits,\n    };\n  }\n\n  const { data: creditUsages, error: creditUsageError } = await supabase_service\n    .from(\"credit_usage\")\n    .select(\"credits_used\")\n    .eq(\"subscription_id\", subscription.id)\n    .gte(\"created_at\", subscription.current_period_start)\n    .lte(\"created_at\", subscription.current_period_end);\n\n  if (creditUsageError || !creditUsages) {\n    throw new Error(\n      `Failed to retrieve credit usage for subscription_id: ${subscription.id}`,\n    );\n  }\n\n  const totalCreditsUsed = creditUsages.reduce(\n    (acc, usage) => acc + usage.credits_used,\n    0,\n  );\n\n  const { data: price, error: priceError } = await supabase_service\n    .from(\"prices\")\n    .select(\"credits\")\n    .eq(\"id\", subscription.price_id)\n    .single();\n\n  if (priceError || !price) {\n    throw new Error(\n      `Failed to retrieve price for price_id: ${subscription.price_id}`,\n    );\n  }\n\n  const remainingCredits = price.credits + couponCredits - totalCreditsUsed;\n\n  return {\n    totalCreditsUsed,\n    remainingCredits,\n    totalCredits: price.credits,\n  };\n}\n"]}