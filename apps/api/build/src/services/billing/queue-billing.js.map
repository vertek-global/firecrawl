{"version":3,"file":"queue-billing.js","sourceRoot":"","sources":["../../../../src/services/billing/queue-billing.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,gDA0BC;AAMD,wEAOC;AAhDD,6CAA0C;AAC1C,oDAAmD;AACnD,+BAAoC;AACpC,qDAAuC;AAEvC;;;GAGG;AACI,KAAK,UAAU,kBAAkB;IACtC,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,IAAA,SAAM,GAAE,CAAC;QACvB,eAAM,CAAC,IAAI,CAAC,mCAAmC,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QAE5D,MAAM,IAAA,+BAAe,GAAE,CAAC,GAAG,CACzB,eAAe,EACf;YACE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,EACD;YACE,KAAK;YACL,QAAQ,EAAE,EAAE;SACb,CACF,CAAC;QAEF,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IAClC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QAC1D,MAAM,CAAC,gBAAgB,CAAC,KAAK,EAAE;YAC7B,IAAI,EAAE;gBACJ,SAAS,EAAE,uBAAuB;aACnC;SACF,CAAC,CAAC;QACH,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;IACnC,CAAC;AACH,CAAC;AAED;;;GAGG;AACI,KAAK,UAAU,8BAA8B;IAClD,IAAI,CAAC;QACH,OAAO,MAAM,kBAAkB,EAAE,CAAC;IACpC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CAAC,4CAA4C,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACtE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;IACnC,CAAC;AACH,CAAC","sourcesContent":["import { logger } from \"../../lib/logger\";\nimport { getBillingQueue } from \"../queue-service\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport * as Sentry from \"@sentry/node\";\n\n/**\n * Adds a job to the billing queue to trigger batch processing\n * This can be used when we want to ensure billing is processed without waiting for the next interval\n */\nexport async function addBillingBatchJob() {\n  try {\n    const jobId = uuidv4();\n    logger.info(\"Adding billing batch job to queue\", { jobId });\n    \n    await getBillingQueue().add(\n      \"process-batch\",\n      {\n        timestamp: new Date().toISOString(),\n      },\n      {\n        jobId,\n        priority: 10,\n      }\n    );\n    \n    return { success: true, jobId };\n  } catch (error) {\n    logger.error(\"Error adding billing batch job\", { error });\n    Sentry.captureException(error, {\n      data: {\n        operation: \"add_billing_batch_job\"\n      }\n    });\n    return { success: false, error };\n  }\n}\n\n/**\n * Trigger immediate processing of any pending billing operations\n * This is useful for ensuring billing operations are processed without delay\n */\nexport async function triggerImmediateBillingProcess() {\n  try {\n    return await addBillingBatchJob();\n  } catch (error) {\n    logger.error(\"Error triggering immediate billing process\", { error });\n    return { success: false, error };\n  }\n} "]}