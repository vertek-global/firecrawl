{"version":3,"file":"stripe.js","sourceRoot":"","sources":["../../../../src/services/billing/stripe.ts"],"names":[],"mappings":";;;;;AAaA,kDA6CC;AA1DD,6CAA0C;AAC1C,oDAA4B;AAE5B,MAAM,MAAM,GAAG,IAAI,gBAAM,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC;AAE/D,KAAK,UAAU,+BAA+B,CAAC,UAAkB;IAC/D,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,UAAU,EAAE;QAC3E,KAAK,EAAE,CAAC;KACT,CAAC,CAAC;IACH,OAAO,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;AACxC,CAAC;AAGM,KAAK,UAAU,mBAAmB,CACvC,OAAe,EACf,WAAmB;IAEnB,IAAI,CAAC;QACH,MAAM,oBAAoB,GACxB,MAAM,+BAA+B,CAAC,WAAW,CAAC,CAAC;QACrD,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC1B,eAAM,CAAC,KAAK,CACV,iDAAiD,WAAW,EAAE,CAC/D,CAAC;YACF,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC;QACpD,CAAC;QACD,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC;YACvD,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE,KAAK;YACf,QAAQ,EAAE,WAAW;YACrB,WAAW,EAAE,2CAA2C;YACxD,oBAAoB,EAAE,CAAC,oBAAoB,EAAE,IAAI,IAAI,MAAM,CAAC;YAC5D,cAAc,EAAE,oBAAoB,EAAE,EAAE;YACxC,WAAW,EAAE,IAAI;YACjB,OAAO,EAAE,IAAI;SACd,CAAC,CAAC;QAEH,IAAI,aAAa,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC;YACzC,eAAM,CAAC,IAAI,CAAC,+BAA+B,OAAO,EAAE,CAAC,CAAC;YACtD,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,SAAS,EAAE,aAAa,CAAC,EAAE,EAAE,CAAC;QACrE,CAAC;aAAM,IACL,aAAa,CAAC,MAAM,KAAK,iBAAiB;YAC1C,aAAa,CAAC,MAAM,KAAK,YAAY;YACrC,aAAa,CAAC,MAAM,KAAK,kBAAkB,EAC3C,CAAC;YACD,eAAM,CAAC,IAAI,CAAC,6CAA6C,OAAO,EAAE,CAAC,CAAC;YACpE,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAE,SAAS,EAAE,aAAa,CAAC,EAAE,EAAE,CAAC;QAC3E,CAAC;aAAM,CAAC;YACN,eAAM,CAAC,KAAK,CAAC,4BAA4B,OAAO,EAAE,CAAC,CAAC;YACpD,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,EAAE,aAAa,CAAC,EAAE,EAAE,CAAC;QAClE,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CACV,uDAAuD,OAAO,EAAE,CACjE,CAAC;QACF,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrB,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC;IACpD,CAAC;AACH,CAAC","sourcesContent":["import { logger } from \"../../lib/logger\";\nimport Stripe from \"stripe\";\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY ?? \"\");\n\nasync function getCustomerDefaultPaymentMethod(customerId: string) {\n  const paymentMethods = await stripe.customers.listPaymentMethods(customerId, {\n    limit: 3,\n  });\n  return paymentMethods.data[0] ?? null;\n}\n\ntype ReturnStatus = \"succeeded\" | \"requires_action\" | \"failed\";\nexport async function createPaymentIntent(\n  team_id: string,\n  customer_id: string,\n): Promise<{ return_status: ReturnStatus; charge_id: string }> {\n  try {\n    const defaultPaymentMethod =\n      await getCustomerDefaultPaymentMethod(customer_id);\n    if (!defaultPaymentMethod) {\n      logger.error(\n        `No default payment method found for customer: ${customer_id}`,\n      );\n      return { return_status: \"failed\", charge_id: \"\" };\n    }\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount: 1100,\n      currency: \"usd\",\n      customer: customer_id,\n      description: \"Firecrawl: Auto re-charge of 1000 credits\",\n      payment_method_types: [defaultPaymentMethod?.type ?? \"card\"],\n      payment_method: defaultPaymentMethod?.id,\n      off_session: true,\n      confirm: true,\n    });\n\n    if (paymentIntent.status === \"succeeded\") {\n      logger.info(`Payment succeeded for team: ${team_id}`);\n      return { return_status: \"succeeded\", charge_id: paymentIntent.id };\n    } else if (\n      paymentIntent.status === \"requires_action\" ||\n      paymentIntent.status === \"processing\" ||\n      paymentIntent.status === \"requires_capture\"\n    ) {\n      logger.warn(`Payment requires further action for team: ${team_id}`);\n      return { return_status: \"requires_action\", charge_id: paymentIntent.id };\n    } else {\n      logger.error(`Payment failed for team: ${team_id}`);\n      return { return_status: \"failed\", charge_id: paymentIntent.id };\n    }\n  } catch (error) {\n    logger.error(\n      `Failed to create or confirm PaymentIntent for team: ${team_id}`,\n    );\n    console.error(error);\n    return { return_status: \"failed\", charge_id: \"\" };\n  }\n}\n"]}