{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/services/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { createClient, SupabaseClient } from \"@supabase/supabase-js\";\nimport { logger as _logger } from \"../lib/logger\";\nimport { configDotenv } from \"dotenv\";\nimport { ApiError, Storage } from \"@google-cloud/storage\";\nimport crypto from \"crypto\";\nimport { redisEvictConnection } from \"./redis\";\nimport type { Logger } from \"winston\";\nimport psl from \"psl\";\nconfigDotenv();\n\n// SupabaseService class initializes the Supabase client conditionally based on environment variables.\nclass IndexSupabaseService {\n  private client: SupabaseClient | null = null;\n\n  constructor() {\n    const supabaseUrl = process.env.INDEX_SUPABASE_URL;\n    const supabaseServiceToken = process.env.INDEX_SUPABASE_SERVICE_TOKEN;\n    // Only initialize the Supabase client if both URL and Service Token are provided.\n    if (!supabaseUrl || !supabaseServiceToken) {\n      // Warn the user that Authentication is disabled by setting the client to null\n      _logger.warn(\n        \"Index supabase client will not be initialized.\",\n      );\n      this.client = null;\n    } else {\n      this.client = createClient(supabaseUrl, supabaseServiceToken);\n    }\n  }\n\n  // Provides access to the initialized Supabase client, if available.\n  getClient(): SupabaseClient | null {\n    return this.client;\n  }\n}\n\nconst serv = new IndexSupabaseService();\n\n// Using a Proxy to handle dynamic access to the Supabase client or service methods.\n// This approach ensures that if Supabase is not configured, any attempt to use it will result in a clear error.\nexport const index_supabase_service: SupabaseClient = new Proxy(\n  serv,\n  {\n    get: function (target, prop, receiver) {\n      const client = target.getClient();\n      // If the Supabase client is not initialized, intercept property access to provide meaningful error feedback.\n      if (client === null) {\n        return () => {\n          throw new Error(\"Index supabase client is not configured.\");\n        };\n      }\n      // Direct access to SupabaseService properties takes precedence.\n      if (prop in target) {\n        return Reflect.get(target, prop, receiver);\n      }\n      // Otherwise, delegate access to the Supabase client.\n      return Reflect.get(client, prop, receiver);\n    },\n  },\n) as unknown as SupabaseClient;\n\nconst credentials = process.env.GCS_CREDENTIALS ? JSON.parse(atob(process.env.GCS_CREDENTIALS)) : undefined;\n\nexport async function getIndexFromGCS(url: string, logger?: Logger): Promise<any | null> {\n    //   logger.info(`Getting f-engine document from GCS`, {\n    //     url,\n    //   });\n    try {\n        if (!process.env.GCS_INDEX_BUCKET_NAME) {\n            return null;\n        }\n\n        const storage = new Storage({ credentials });\n        const bucket = storage.bucket(process.env.GCS_INDEX_BUCKET_NAME);\n        const blob = bucket.file(`${url}`);\n        const [blobContent] = await blob.download();\n        const parsed = JSON.parse(blobContent.toString());\n        return parsed;\n    } catch (error) {\n        if (error instanceof ApiError && error.code === 404 && error.message.includes(\"No such object:\")) {\n          // Object does not exist\n          return null;\n        }\n\n        (logger ?? _logger).error(`Error getting Index document from GCS`, {\n            error,\n            url,\n        });\n        return null;\n    }\n}\n\n\nexport async function saveIndexToGCS(id: string, doc: {\n  url: string;\n  html: string;\n  statusCode: number;\n  error?: string;\n  screenshot?: string;\n  numPages?: number;\n}): Promise<void> {\n  try {\n      if (!process.env.GCS_INDEX_BUCKET_NAME) {\n          return;\n      }\n\n      const storage = new Storage({ credentials });\n      const bucket = storage.bucket(process.env.GCS_INDEX_BUCKET_NAME);\n      const blob = bucket.file(`${id}.json`);\n      for (let i = 0; i < 3; i++) {\n          try {\n              await blob.save(JSON.stringify(doc), { \n                  contentType: \"application/json\",\n              });\n              break;\n          } catch (error) {\n              if (i === 2) {\n                  throw error;\n              } else {\n                  _logger.error(`Error saving index document to GCS, retrying`, {\n                      error,\n                      indexId: id,\n                      i,\n                  });\n              }\n          }\n      }\n  } catch (error) {\n    throw new Error(\"Error saving index document to GCS\", {\n      cause: error,\n    });\n  }\n}\n\nexport const useIndex =\n    process.env.INDEX_SUPABASE_URL !== \"\" &&\n    process.env.INDEX_SUPABASE_URL !== undefined;\n\nexport function normalizeURLForIndex(url: string): string {\n    const urlObj = new URL(url);\n    urlObj.hash = \"\";\n    urlObj.protocol = \"https\";\n\n    if (urlObj.port === \"80\" || urlObj.port === \"443\") {\n        urlObj.port = \"\";\n    }\n\n    if (urlObj.hostname.startsWith(\"www.\")) {\n        urlObj.hostname = urlObj.hostname.slice(4);\n    }\n\n    if (urlObj.pathname.endsWith(\"/index.html\")) {\n        urlObj.pathname = urlObj.pathname.slice(0, -10);\n    } else if (urlObj.pathname.endsWith(\"/index.php\")) {\n        urlObj.pathname = urlObj.pathname.slice(0, -9);\n    } else if (urlObj.pathname.endsWith(\"/index.htm\")) {\n        urlObj.pathname = urlObj.pathname.slice(0, -9);\n    } else if (urlObj.pathname.endsWith(\"/index.shtml\")) {\n        urlObj.pathname = urlObj.pathname.slice(0, -11);\n    } else if (urlObj.pathname.endsWith(\"/index.xml\")) {\n        urlObj.pathname = urlObj.pathname.slice(0, -9);\n    }\n\n    if (urlObj.pathname.endsWith(\"/\")) {\n        urlObj.pathname = urlObj.pathname.slice(0, -1);\n    }\n\n    return urlObj.toString();\n}\n\nexport function hashURL(url: string): string {\n    return \"\\\\x\" + crypto.createHash(\"sha256\").update(url).digest(\"hex\");\n}\n\nexport function generateURLSplits(url: string): string[] {\n  const urls: string[] = [];\n  const urlObj = new URL(url);\n  urlObj.hash = \"\";\n  urlObj.search = \"\";\n  const pathnameParts = urlObj.pathname.split(\"/\");\n\n  for (let i = 0; i <= pathnameParts.length; i++) {\n      urlObj.pathname = pathnameParts.slice(0, i).join(\"/\");\n      urls.push(urlObj.href);\n  }\n\n  urls.push(url);\n\n  return [...new Set(urls.map(x => normalizeURLForIndex(x)))];\n}\n\nexport function generateDomainSplits(hostname: string): string[] {\n  const parsed = psl.parse(hostname);\n  if (parsed === null) {\n    return [];\n  }\n\n  const subdomains: string[] = (parsed.subdomain ?? \"\").split(\".\").filter(x => x !== \"\");\n  if (subdomains.length === 1 && subdomains[0] === \"www\") {\n    return [parsed.domain];\n  }\n\n  const domains: string[] = [];\n  for (let i = subdomains.length; i >= 0; i--) {\n    domains.push(subdomains.slice(i).concat([parsed.domain]).join(\".\"));\n  }\n\n  return domains;\n}\n\nconst INDEX_INSERT_QUEUE_KEY = \"index-insert-queue\";\nconst INDEX_INSERT_BATCH_SIZE = 1000;\n\nexport async function addIndexInsertJob(data: any) {\n  await redisEvictConnection.rpush(INDEX_INSERT_QUEUE_KEY, JSON.stringify(data));\n}\n\nexport async function getIndexInsertJobs(): Promise<any[]> {\n  const jobs = (await redisEvictConnection.lpop(INDEX_INSERT_QUEUE_KEY, INDEX_INSERT_BATCH_SIZE)) ?? [];\n  return jobs.map(x => JSON.parse(x));\n}\n\nexport async function processIndexInsertJobs() {\n  const jobs = await getIndexInsertJobs();\n  if (jobs.length === 0) {\n    return;\n  }\n  _logger.info(`Index inserter found jobs to insert`, { jobCount: jobs.length });\n  try {\n    await index_supabase_service.from(\"index\").insert(jobs);\n    _logger.info(`Index inserter inserted jobs`, { jobCount: jobs.length });\n  } catch (error) {\n    _logger.error(`Index inserter failed to insert jobs`, { error, jobCount: jobs.length });\n  }\n}\n\nexport async function getIndexInsertQueueLength(): Promise<number> {\n  return await redisEvictConnection.llen(INDEX_INSERT_QUEUE_KEY) ?? 0;\n}\n\nexport async function queryIndexAtSplitLevel(url: string, limit: number, maxAge = 2 * 24 * 60 * 60 * 1000): Promise<string[]> {\n  if (!useIndex || process.env.FIRECRAWL_INDEX_WRITE_ONLY === \"true\") {\n    return [];\n  }\n\n  const urlObj = new URL(url);\n  urlObj.search = \"\";\n\n  const urlSplitsHash = generateURLSplits(urlObj.href).map(x => hashURL(x));\n\n  const level = urlSplitsHash.length - 1;\n\n  let links: Set<string> = new Set();\n  let iteration = 0;\n\n  while (true) {\n    // Query the index for the next set of links\n    const { data: _data, error } = await index_supabase_service\n      .rpc(\"query_index_at_split_level\", {\n        i_level: level,\n        i_url_hash: urlSplitsHash[level],\n        i_newer_than: new Date(Date.now() - maxAge).toISOString(),\n      })\n      .range(iteration * 1000, (iteration + 1) * 1000)\n\n    // If there's an error, return the links we have\n    if (error) {\n      _logger.warn(\"Error querying index\", { error, url, limit });\n      return [...links].slice(0, limit);\n    }\n\n    // Add the links to the set\n    const data = _data ?? [];\n    data.forEach((x) => links.add(x.resolved_url));\n\n    // If we have enough links, return them\n    if (links.size >= limit) {\n      return [...links].slice(0, limit);\n    }\n\n    // If we get less than 1000 links from the query, we're done\n    if (data.length < 1000) {\n      return [...links].slice(0, limit);\n    }\n\n    iteration++;\n  }\n}\n\nexport async function queryIndexAtDomainSplitLevel(hostname: string, limit: number, maxAge = 2 * 24 * 60 * 60 * 1000): Promise<string[]> {\n  if (!useIndex || process.env.FIRECRAWL_INDEX_WRITE_ONLY === \"true\") {\n    return [];\n  }\n\n  const domainSplitsHash = generateDomainSplits(hostname).map(x => hashURL(x));\n\n  const level = domainSplitsHash.length - 1;\n  if (domainSplitsHash.length === 0) {\n    return [];\n  }\n\n  let links: Set<string> = new Set();\n  let iteration = 0;\n\n  while (true) {\n    // Query the index for the next set of links\n    const { data: _data, error } = await index_supabase_service\n      .rpc(\"query_index_at_domain_split_level\", {\n        i_level: level,\n        i_domain_hash: domainSplitsHash[level],\n        i_newer_than: new Date(Date.now() - maxAge).toISOString(),\n      })\n      .range(iteration * 1000, (iteration + 1) * 1000)\n\n    // If there's an error, return the links we have\n    if (error) {\n      _logger.warn(\"Error querying index\", { error, hostname, limit });\n      return [...links].slice(0, limit);\n    }\n\n    // Add the links to the set\n    const data = _data ?? [];\n    data.forEach((x) => links.add(x.resolved_url));\n\n    // If we have enough links, return them\n    if (links.size >= limit) {\n      return [...links].slice(0, limit);\n    }\n\n    // If we get less than 1000 links from the query, we're done\n    if (data.length < 1000) {\n      return [...links].slice(0, limit);\n    }\n\n    iteration++;\n  }\n}\n"]}