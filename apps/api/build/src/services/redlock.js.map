{"version":3,"file":"redlock.js","sourceRoot":"","sources":["../../../src/services/redlock.ts"],"names":[],"mappings":";;;;;;AAAA,sDAA8B;AAC9B,sDAA6B;AAEhB,QAAA,OAAO,GAAG,IAAI,iBAAO;AAChC,6DAA6D;AAC7D,cAAc;AACd,CAAC,IAAI,iBAAM,CAAC,OAAO,CAAC,GAAG,CAAC,oBAAqB,CAAC,CAAC,EAC/C;IACE,kDAAkD;IAClD,kCAAkC;IAClC,WAAW,EAAE,IAAI,EAAE,iDAAiD;IAEpE,UAAU,EAAE,GAAG;IAEf,UAAU,EAAE,GAAG;IAEf,+CAA+C;IAC/C,+CAA+C;IAC/C,+DAA+D;IAC/D,WAAW,EAAE,GAAG,EAAE,aAAa;IAE/B,4EAA4E;IAC5E,kCAAkC;IAClC,2BAA2B,EAAE,GAAG,EAAE,aAAa;CAChD,CACF,CAAC","sourcesContent":["import Redlock from \"redlock\";\nimport Client from \"ioredis\";\n\nexport const redlock = new Redlock(\n  // You should have one client for each independent redis node\n  // or cluster.\n  [new Client(process.env.REDIS_RATE_LIMIT_URL!)],\n  {\n    // The expected clock drift; for more details see:\n    // http://redis.io/topics/distlock\n    driftFactor: 0.01, // multiplied by lock ttl to determine drift time\n\n    retryCount: 200,\n\n    retryDelay: 100,\n\n    // the max time in ms randomly added to retries\n    // to improve performance under high contention\n    // see https://www.awsarchitectureblog.com/2015/03/backoff.html\n    retryJitter: 200, // time in ms\n\n    // The minimum remaining time on a lock before an extension is automatically\n    // attempted with the `using` API.\n    automaticExtensionThreshold: 500, // time in ms\n  },\n);\n"]}