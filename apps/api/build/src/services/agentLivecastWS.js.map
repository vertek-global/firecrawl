{"version":3,"file":"agentLivecastWS.js","sourceRoot":"","sources":["../../../src/services/agentLivecastWS.ts"],"names":[],"mappings":";;AAUA,sCA6CC;AAvDD,mCAAsC;AACtC,0CAAuC;AAGvC,IAAA,qBAAY,GAAE,CAAC;AAEf;;;GAGG;AACH,SAAgB,aAAa,CAAC,GAAQ;IACpC,eAAM,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;IAExD,+CAA+C;IAC/C,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;QACZ,eAAM,CAAC,KAAK,CAAC,4FAA4F,CAAC,CAAC;QAC3G,OAAO;IACT,CAAC;IAED,6BAA6B;IAC7B,GAAG,CAAC,EAAE,CAAC,iBAAiB,EAAE,CAAC,QAAqB,EAAE,GAAY,EAAE,EAAE;QAChE,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACrB,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,EAAE,EAAE,qBAAqB,CAAC,CAAC;YAC1D,MAAM,cAAc,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;YAEpE,MAAM,WAAW,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,mBAAmB,cAAc,EAAE,CAAC;YAClH,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;YACxB,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,CAAC;YAE5C,QAAQ,CAAC,MAAM,GAAG,GAAG,EAAE;gBACnB,yCAAyC;gBACzC,kCAAkC;gBAElC,2CAA2C;gBAC3C,QAAQ,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,cAAc,EAAE,EAAE;oBACxC,QAAQ,CAAC,IAAI,CAAC,cAAmC,CAAC,CAAC;gBACrD,CAAC,CAAC,CAAC;gBAEH,2CAA2C;gBAC3C,QAAQ,CAAC,SAAS,GAAG,CAAC,KAAK,EAAE,EAAE;oBAC7B,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC5B,CAAC,CAAC;gBAEF,eAAe;gBACf,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC7C,QAAQ,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;YAC5C,CAAC,CAAC;QACN,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClD,QAAQ,CAAC,KAAK,EAAE,CAAC;QACnB,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,eAAM,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;AACtE,CAAC","sourcesContent":["import { configDotenv } from 'dotenv';\nimport { logger } from '../lib/logger';\nimport type { Request } from 'express';\nimport WSWebSocket from 'ws';\nconfigDotenv();\n\n/**\n * Attaches WebSocket proxying logic to the Express application\n * This function should be called after creating the Express app but before starting the server\n */\nexport function attachWsProxy(app: any) {\n  logger.info('Attaching WebSocket proxy to Express app');\n  \n  // Make sure express-ws is properly initialized\n  if (!app.ws) {\n    logger.error('Express app does not have WebSocket support. Make sure express-ws is properly initialized.');\n    return;\n  }\n  \n  // Define the WebSocket route\n  app.ws('/agent-livecast', (clientWs: WSWebSocket, req: Request) => {\n    try {\n      console.log(req.url);\n      const url = new URL(req.url ?? '', 'http://placeholder/');\n      const sessionIdParam = url.searchParams.get('userProvidedId') || '';\n\n      const workerWsUrl = `${process.env.FIRE_ENGINE_BETA_URL?.replace('http', 'ws')}?userProvidedId=${sessionIdParam}`;\n      console.log(workerWsUrl)\n      const wsWorker = new WebSocket(workerWsUrl);\n\n      wsWorker.onopen = () => {\n          // clientWs is your user's browser socket\n          // wsWorker is the worker's socket\n\n          // Forward messages from the user -> worker\n          clientWs.on('message', (dataFromClient) => {\n            wsWorker.send(dataFromClient as unknown as string);\n          });\n\n          // Forward messages from the worker -> user\n          wsWorker.onmessage = (event) => {\n            clientWs.send(event.data);\n          };\n\n          // Close events\n          clientWs.on('close', () => wsWorker.close());\n          wsWorker.onclose = () => clientWs.close();\n        };\n    } catch (error) {\n      console.error('Error in wsProxy upgrade:', error);\n      clientWs.close();\n    }\n  });\n  \n  logger.info('WebSocket proxy successfully attached to Express app');\n}\n"]}