{"version":3,"file":"tracking.js","sourceRoot":"","sources":["../../../../src/services/ledger/tracking.ts"],"names":[],"mappings":";;AAYA,gCA2DC;AAtED,2CAA2C;AAC3C,uDAA4D;AAC5D,oCAA8C;AAC9C,6CAA0C;AAE1C;;;;;GAKG;AACI,KAAK,UAAU,UAAU,CAC9B,cAAiB,EACjB,IAAqB;IAErB,IAAI,CAAC;QACH,wDAAwD;QACxD,MAAM,QAAQ,GAAG,uBAAuB,cAAc,GAAG,CAAC;QAC1D,IAAI,kBAAkB,GAAQ,IAAI,CAAC;QACnC,IAAI,eAAe,GAAQ,IAAI,CAAC;QAEhC,oCAAoC;QACpC,MAAM,UAAU,GAAG,MAAM,IAAA,gBAAQ,EAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,UAAU,EAAE,CAAC;YACf,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAC9C,CAAC;aAAM,CAAC;YACN,uCAAuC;YACvC,MAAM,MAAM,GAAG,MAAM,yCAAuB;iBACzC,IAAI,CAAC,sBAAsB,CAAC;iBAC5B,MAAM,CAAC,IAAI,CAAC;iBACZ,EAAE,CAAC,MAAM,EAAE,cAAc,CAAC;iBAC1B,MAAM,EAAE,CAAC;YAEZ,eAAe,GAAG,MAAM,CAAC,KAAK,CAAC;YAC/B,kBAAkB,GAAG,MAAM,CAAC,IAAI,CAAC;YAEjC,+CAA+C;YAC/C,IAAI,CAAC,eAAe,IAAI,kBAAkB,EAAE,CAAC;gBAC3C,MAAM,IAAA,gBAAQ,EAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;YAC9E,CAAC;QACH,CAAC;QAED,IAAI,eAAe,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC3C,eAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE,eAAe,CAAC,CAAC;YACpE,OAAO,IAAI,CAAC;QACd,CAAC;QAED,mBAAmB;QACnB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,MAAM,yCAAuB;aACrE,IAAI,CAAC,QAAQ,CAAC;YACf,YAAY;aACX,MAAM,CAAC;YACN,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACpC,YAAY;YACZ,sBAAsB,EAAE,kBAAkB,CAAC,EAAE;YAC7C,IAAI,EAAE,IAAI;SACX,CAAC;aACD,MAAM,CAAC,MAAM,CAAC;aACd,MAAM,EAAE,CAAC;QAEZ,IAAI,UAAU,IAAI,CAAC,KAAK,EAAE,CAAC;YACzB,eAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,UAAU,CAAC,CAAC;YAClD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,YAAY;QACZ,OAAO,KAAK,CAAC,IAAI,CAAC;IACpB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC;AAED,gBAAgB;AAChB,iDAAiD","sourcesContent":["import { EventDataMap, EventDefinitionSlug } from \"./data-schemas\";\n// @ts-nocheck - Schema not in types_db yet\nimport { supabase_ledger_service } from \"./supabase-ledger\";\nimport { getValue, setValue } from \"../redis\";\nimport { logger } from \"../../lib/logger\";\n\n/**\n * Track an event in the ledger system\n * @param definitionSlug The provider definition slug\n * @param data Additional data to store with the track\n * @returns The tracked event ID or null if tracking failed\n */\nexport async function trackEvent<T extends EventDefinitionSlug>(\n  definitionSlug: T,\n  data: EventDataMap[T],\n): Promise<string | null> {\n  try {\n    // Get the provider definition ID from cache or database\n    const cacheKey = `provider_definition_${definitionSlug}_`;\n    let providerDefinition: any = null;\n    let definitionError: any = null;\n\n    // Try to get from Redis cache first\n    const cachedData = await getValue(cacheKey);\n    if (cachedData) {\n      providerDefinition = JSON.parse(cachedData);\n    } else {\n      // If not in cache, fetch from database\n      const result = await supabase_ledger_service\n        .from(\"provider_definitions\")\n        .select(\"id\")\n        .eq(\"slug\", definitionSlug)\n        .single();\n\n      definitionError = result.error;\n      providerDefinition = result.data;\n\n      // Cache the result for 24 hours (1440 minutes)\n      if (!definitionError && providerDefinition) {\n        await setValue(cacheKey, JSON.stringify(providerDefinition), 600 * 60 * 24);\n      }\n    }\n\n    if (definitionError || !providerDefinition) {\n      logger.error(\"Error finding provider definition:\", definitionError);\n      return null;\n    }\n\n    // Create the track\n    const { data: track, error: trackError } = await supabase_ledger_service\n      .from(\"tracks\")\n      //@ts-ignore\n      .insert({\n        created_at: new Date().toISOString(),\n        //@ts-ignore\n        provider_definition_id: providerDefinition.id,\n        data: data,\n      })\n      .select(\"uuid\")\n      .single();\n\n    if (trackError || !track) {\n      logger.error(\"Error creating track:\", trackError);\n      return null;\n    }\n    //@ts-ignore\n    return track.uuid;\n  } catch (error) {\n    logger.error(\"Error tracking event:\", error);\n    return null;\n  }\n}\n\n// data schemas?\n// everything that sends an email, move to tracks\n"]}