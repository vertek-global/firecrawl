{"version":3,"file":"supabase-ledger.js","sourceRoot":"","sources":["../../../../src/services/ledger/supabase-ledger.ts"],"names":[],"mappings":";;;AAAA,uDAAqE;AACrE,6CAA0C;AAC1C,mCAAsC;AACtC,IAAA,qBAAY,GAAE,CAAC;AAEf,oFAAoF;AACpF,MAAM,qBAAqB;IACjB,MAAM,GAA8C,IAAI,CAAC;IACzD,QAAQ,GAA8C,IAAI,CAAC;IAEnE;QACE,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;QAC7C,MAAM,kBAAkB,GAAG,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC;QAC5D,MAAM,oBAAoB,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC;QAChE,MAAM,mBAAmB,GAAG,OAAO,CAAC,GAAG,CAAC,qBAAqB,KAAK,MAAM,CAAC;QAEzE,kFAAkF;QAClF,IAAI,CAAC,mBAAmB,EAAE,CAAC;YACzB,8EAA8E;YAC9E,eAAM,CAAC,IAAI,CACT,6EAA6E,CAC9E,CAAC;YACF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACrB,CAAC;aAAM,IAAI,CAAC,WAAW,IAAI,CAAC,oBAAoB,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACxE,eAAM,CAAC,KAAK,CACV,wMAAwM,CACzM,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,MAAM,GAAG,IAAA,0BAAY,EAAC,WAAW,EAAE,oBAAoB,EAAE;gBAC5D,MAAM,EAAE;oBACN,OAAO,EAAE;wBACP,oBAAoB,EAAE,oBAAoB;qBAC3C;iBACF;gBACD,EAAE,EAAE;oBACF,YAAY;oBACZ,MAAM,EAAE,QAAQ;iBACjB;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,GAAG,IAAA,0BAAY,EAAC,kBAAkB,EAAE,oBAAoB,EAAE;gBACrE,EAAE,EAAE;oBACF,YAAY;oBACZ,MAAM,EAAE,QAAQ;iBACjB;aACF,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,oEAAoE;IACpE,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;CACF;AAED,MAAM,UAAU,GAAG,IAAI,qBAAqB,EAAE,CAAC;AAE/C,2FAA2F;AAC3F,gHAAgH;AACnG,QAAA,uBAAuB,GAAuC,IAAI,KAAK,CAClF,UAAU,EACV;IACE,GAAG,EAAE,UAAU,MAAM,EAAE,IAAI,EAAE,QAAQ;QACnC,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QAClC,6GAA6G;QAC7G,IAAI,MAAM,KAAK,IAAI,EAAE,CAAC;YACpB,OAAO,GAAG,EAAE;gBACV,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;YAC/D,CAAC,CAAC;QACJ,CAAC;QACD,sEAAsE;QACtE,IAAI,IAAI,IAAI,MAAM,EAAE,CAAC;YACnB,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC7C,CAAC;QACD,qDAAqD;QACrD,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC7C,CAAC;CACF,CAC+C,CAAC","sourcesContent":["import { createClient, SupabaseClient } from \"@supabase/supabase-js\";\nimport { logger } from \"../../lib/logger\";\nimport { configDotenv } from \"dotenv\";\nconfigDotenv();\n\n// SupabaseLedgerService class initializes the Supabase client for the ledger schema\nclass SupabaseLedgerService {\n  private client: SupabaseClient<any, \"ledger\", any> | null = null;\n  private rrClient: SupabaseClient<any, \"ledger\", any> | null = null;\n\n  constructor() {\n    const supabaseUrl = process.env.SUPABASE_URL;\n    const supabaseReplicaUrl = process.env.SUPABASE_REPLICA_URL;\n    const supabaseServiceToken = process.env.SUPABASE_SERVICE_TOKEN;\n    const useDbAuthentication = process.env.USE_DB_AUTHENTICATION === \"true\";\n    \n    // Only initialize the Supabase client if both URL and Service Token are provided.\n    if (!useDbAuthentication) {\n      // Warn the user that Authentication is disabled by setting the client to null\n      logger.warn(\n        \"Authentication is disabled. Supabase ledger client will not be initialized.\",\n      );\n      this.client = null;\n    } else if (!supabaseUrl || !supabaseServiceToken || !supabaseReplicaUrl) {\n      logger.error(\n        \"Supabase environment variables aren't configured correctly. Supabase ledger client will not be initialized. Fix ENV configuration or disable DB authentication with USE_DB_AUTHENTICATION env variable\",\n      );\n    } else {\n      this.client = createClient(supabaseUrl, supabaseServiceToken, {\n        global: {\n          headers: {\n            \"sb-lb-routing-mode\": \"alpha-all-services\",\n          },\n        },\n        db: {\n          //@ts-ignore\n          schema: \"ledger\",\n        },\n      });\n\n      this.rrClient = createClient(supabaseReplicaUrl, supabaseServiceToken, {\n        db: {\n          //@ts-ignore\n          schema: \"ledger\",\n        },\n      });\n    }\n  }\n\n  // Provides access to the initialized Supabase client, if available.\n  getClient(): SupabaseClient<any, \"ledger\", any> | null {\n    return this.client;\n  }\n\n  getRRClient(): SupabaseClient<any, \"ledger\", any> | null {\n    return this.rrClient;\n  }\n}\n\nconst ledgerServ = new SupabaseLedgerService();\n\n// Using a Proxy to handle dynamic access to the Supabase ledger client or service methods.\n// This approach ensures that if Supabase is not configured, any attempt to use it will result in a clear error.\nexport const supabase_ledger_service: SupabaseClient<any, \"ledger\", any> = new Proxy(\n  ledgerServ,\n  {\n    get: function (target, prop, receiver) {\n      const client = target.getClient();\n      // If the Supabase client is not initialized, intercept property access to provide meaningful error feedback.\n      if (client === null) {\n        return () => {\n          throw new Error(\"Supabase ledger client is not configured.\");\n        };\n      }\n      // Direct access to SupabaseLedgerService properties takes precedence.\n      if (prop in target) {\n        return Reflect.get(target, prop, receiver);\n      }\n      // Otherwise, delegate access to the Supabase client.\n      return Reflect.get(client, prop, receiver);\n    },\n  },\n) as unknown as SupabaseClient<any, \"ledger\", any>;"]}