{"version":3,"file":"redis.js","sourceRoot":"","sources":["../../../src/services/redis.ts"],"names":[],"mappings":";;;;;;AAAA,sDAA8B;AAC9B,iDAAsD;AACtD,0CAAuC;AAEvC,mDAAmD;AACnD,mCAAoB,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;IACzC,IAAI,CAAC;QACH,IAAI,KAAK,CAAC,OAAO,KAAK,YAAY,EAAE,CAAC;YACnC,eAAM,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAC;QAC1E,CAAC;aAAM,IAAI,KAAK,CAAC,OAAO,KAAK,cAAc,EAAE,CAAC;YAC5C,eAAM,CAAC,KAAK,CAAC,uDAAuD,CAAC,CAAC;QACxE,CAAC;;YAAM,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC,CAAA,CAAC;AACpB,CAAC,CAAC,CAAC;AAEH,0CAA0C;AAC1C,mCAAoB,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,GAAG,EAAE,EAAE;IAC9C,IAAI,CAAC;QACH,IAAI,mCAAoB,CAAC,MAAM,KAAK,cAAc;YAChD,eAAM,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;;YAC9D,eAAM,CAAC,KAAK,CAAC,uDAAuD,CAAC,CAAC;IAC7E,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC,CAAA,CAAC;AACpB,CAAC,CAAC,CAAC;AAEH,yCAAyC;AACzC,mCAAoB,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE;IACzC,IAAI,CAAC;QACH,IAAI,CAAC,GAAG;YAAE,eAAM,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;IACxE,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC,CAAA,CAAC;AACpB,CAAC,CAAC,CAAC;AAEH;;;;;GAKG;AACH,MAAM,QAAQ,GAAG,KAAK,EACpB,GAAW,EACX,KAAa,EACb,MAAe,EACf,EAAE,GAAG,KAAK,EACV,EAAE;IACF,IAAI,MAAM,IAAI,CAAC,EAAE,EAAE,CAAC;QAClB,MAAM,mCAAoB,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IAC3D,CAAC;SAAM,CAAC;QACN,MAAM,mCAAoB,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAC;IACD,IAAI,MAAM,IAAI,EAAE,EAAE,CAAC;QACjB,MAAM,mCAAoB,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC;AACH,CAAC,CAAC;AAoBO,4BAAQ;AAlBjB;;;;GAIG;AACH,MAAM,QAAQ,GAAG,KAAK,EAAE,GAAW,EAA0B,EAAE;IAC7D,MAAM,KAAK,GAAG,MAAM,mCAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAClD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAUiB,4BAAQ;AAR3B;;;GAGG;AACH,MAAM,SAAS,GAAG,KAAK,EAAE,GAAW,EAAE,EAAE;IACtC,MAAM,mCAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACtC,CAAC,CAAC;AAE2B,8BAAS;AAEtC,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC;AACzE,QAAA,oBAAoB,GAAG,IAAI,iBAAO,CAAC,aAAc,CAAC,CAAC","sourcesContent":["import IORedis from \"ioredis\";\nimport { redisRateLimitClient } from \"./rate-limiter\";\nimport { logger } from \"../lib/logger\";\n\n// Listen to 'error' events to the Redis connection\nredisRateLimitClient.on(\"error\", (error) => {\n  try {\n    if (error.message === \"ECONNRESET\") {\n      logger.error(\"Connection to Redis Session Rate Limit Store timed out.\");\n    } else if (error.message === \"ECONNREFUSED\") {\n      logger.error(\"Connection to Redis Session Rate Limit Store refused!\");\n    } else logger.error(error);\n  } catch (error) {}\n});\n\n// Listen to 'reconnecting' event to Redis\nredisRateLimitClient.on(\"reconnecting\", (err) => {\n  try {\n    if (redisRateLimitClient.status === \"reconnecting\")\n      logger.info(\"Reconnecting to Redis Session Rate Limit Store...\");\n    else logger.error(\"Error reconnecting to Redis Session Rate Limit Store.\");\n  } catch (error) {}\n});\n\n// Listen to the 'connect' event to Redis\nredisRateLimitClient.on(\"connect\", (err) => {\n  try {\n    if (!err) logger.info(\"Connected to Redis Session Rate Limit Store!\");\n  } catch (error) {}\n});\n\n/**\n * Set a value in Redis with an optional expiration time.\n * @param {string} key The key under which to store the value.\n * @param {string} value The value to store.\n * @param {number} [expire] Optional expiration time in seconds.\n */\nconst setValue = async (\n  key: string,\n  value: string,\n  expire?: number,\n  nx = false,\n) => {\n  if (expire && !nx) {\n    await redisRateLimitClient.set(key, value, \"EX\", expire);\n  } else {\n    await redisRateLimitClient.set(key, value);\n  }\n  if (expire && nx) {\n    await redisRateLimitClient.expire(key, expire, \"NX\");\n  }\n};\n\n/**\n * Get a value from Redis.\n * @param {string} key The key of the value to retrieve.\n * @returns {Promise<string|null>} The value, if found, otherwise null.\n */\nconst getValue = async (key: string): Promise<string | null> => {\n  const value = await redisRateLimitClient.get(key);\n  return value;\n};\n\n/**\n * Delete a key from Redis.\n * @param {string} key The key to delete.\n */\nconst deleteKey = async (key: string) => {\n  await redisRateLimitClient.del(key);\n};\n\nexport { setValue, getValue, deleteKey };\n\nconst redisEvictURL = process.env.REDIS_EVICT_URL ?? process.env.REDIS_RATE_LIMIT_URL;\nexport const redisEvictConnection = new IORedis(redisEvictURL!);\n"]}