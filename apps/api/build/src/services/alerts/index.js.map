{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/services/alerts/index.ts"],"names":[],"mappings":";;AAIA,kCAyDC;AA7DD,oDAAiD;AACjD,oDAAkD;AAClD,mCAA2C;AAEpC,KAAK,UAAU,WAAW;IAC/B,IAAI,CAAC;QACH,IACE,OAAO,CAAC,GAAG,CAAC,iBAAiB;YAC7B,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,YAAY;YAChC,OAAO,CAAC,GAAG,CAAC,qBAAqB;YACjC,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAClC,CAAC;YACD,eAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACnC,MAAM,eAAe,GAAG,KAAK,IAAI,EAAE;gBACjC,IAAI,CAAC;oBACH,MAAM,WAAW,GAAG,IAAA,8BAAc,GAAE,CAAC;oBACrC,MAAM,UAAU,GAAG,MAAM,WAAW,CAAC,cAAc,EAAE,CAAC;oBACtD,IAAI,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,EAAE,CAAC;wBAC3D,eAAM,CAAC,IAAI,CACT,wCAAwC,OAAO,CAAC,GAAG,CAAC,qBAAqB,0BAA0B,UAAU,GAAG,CACjH,CAAC;wBACF,IAAA,wBAAgB,EACd,wCAAwC,OAAO,CAAC,GAAG,CAAC,qBAAqB,0BAA0B,UAAU,EAAE,EAC/G,IAAI,CACL,CAAC;oBACJ,CAAC;yBAAM,CAAC;wBACN,eAAM,CAAC,IAAI,CACT,kCAAkC,OAAO,CAAC,GAAG,CAAC,qBAAqB,0BAA0B,UAAU,EAAE,CAC1G,CAAC;oBACJ,CAAC;gBACH,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,eAAM,CAAC,KAAK,CAAC,gCAAgC,KAAK,EAAE,CAAC,CAAC;gBACxD,CAAC;YACH,CAAC,CAAC;YAEF,MAAM,iBAAiB,GAAG,KAAK,IAAI,EAAE;gBACnC,MAAM,WAAW,GAAG,IAAA,8BAAc,GAAE,CAAC;gBACrC,MAAM,WAAW,GAAG,MAAM,WAAW,CAAC,eAAe,EAAE,CAAC;gBAExD,IAAI,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,EAAE,CAAC;oBAC7D,eAAM,CAAC,IAAI,CACT,yCAAyC,OAAO,CAAC,GAAG,CAAC,sBAAsB,2BAA2B,WAAW,GAAG,CACrH,CAAC;oBACF,IAAA,wBAAgB,EACd,yCAAyC,OAAO,CAAC,GAAG,CAAC,sBAAsB,2BAA2B,WAAW,iEAAiE,EAClL,IAAI,CACL,CAAC;gBACJ,CAAC;YACH,CAAC,CAAC;YAEF,MAAM,QAAQ,GAAG,KAAK,IAAI,EAAE;gBAC1B,MAAM,eAAe,EAAE,CAAC;gBACxB,MAAM,iBAAiB,EAAE,CAAC;YAC5B,CAAC,CAAC;YAEF,MAAM,QAAQ,EAAE,CAAC;YACjB,6CAA6C;QAC/C,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CAAC,gCAAgC,KAAK,EAAE,CAAC,CAAC;IACxD,CAAC;AACH,CAAC","sourcesContent":["import { logger } from \"../../../src/lib/logger\";\nimport { getScrapeQueue } from \"../queue-service\";\nimport { sendSlackWebhook } from \"./slack\";\n\nexport async function checkAlerts() {\n  try {\n    if (\n      process.env.SLACK_WEBHOOK_URL &&\n      process.env.ENV === \"production\" &&\n      process.env.ALERT_NUM_ACTIVE_JOBS &&\n      process.env.ALERT_NUM_WAITING_JOBS\n    ) {\n      logger.info(\"Initializing alerts\");\n      const checkActiveJobs = async () => {\n        try {\n          const scrapeQueue = getScrapeQueue();\n          const activeJobs = await scrapeQueue.getActiveCount();\n          if (activeJobs > Number(process.env.ALERT_NUM_ACTIVE_JOBS)) {\n            logger.warn(\n              `Alert: Number of active jobs is over ${process.env.ALERT_NUM_ACTIVE_JOBS}. Current active jobs: ${activeJobs}.`,\n            );\n            sendSlackWebhook(\n              `Alert: Number of active jobs is over ${process.env.ALERT_NUM_ACTIVE_JOBS}. Current active jobs: ${activeJobs}`,\n              true,\n            );\n          } else {\n            logger.info(\n              `Number of active jobs is under ${process.env.ALERT_NUM_ACTIVE_JOBS}. Current active jobs: ${activeJobs}`,\n            );\n          }\n        } catch (error) {\n          logger.error(`Failed to check active jobs: ${error}`);\n        }\n      };\n\n      const checkWaitingQueue = async () => {\n        const scrapeQueue = getScrapeQueue();\n        const waitingJobs = await scrapeQueue.getWaitingCount();\n\n        if (waitingJobs > Number(process.env.ALERT_NUM_WAITING_JOBS)) {\n          logger.warn(\n            `Alert: Number of waiting jobs is over ${process.env.ALERT_NUM_WAITING_JOBS}. Current waiting jobs: ${waitingJobs}.`,\n          );\n          sendSlackWebhook(\n            `Alert: Number of waiting jobs is over ${process.env.ALERT_NUM_WAITING_JOBS}. Current waiting jobs: ${waitingJobs}. Scale up the number of workers with fly scale count worker=20`,\n            true,\n          );\n        }\n      };\n\n      const checkAll = async () => {\n        await checkActiveJobs();\n        await checkWaitingQueue();\n      };\n\n      await checkAll();\n      // setInterval(checkAll, 10000); // Run every\n    }\n  } catch (error) {\n    logger.error(`Failed to initialize alerts: ${error}`);\n  }\n}\n"]}