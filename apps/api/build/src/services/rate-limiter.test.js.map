{"version":3,"file":"rate-limiter.test.js","sourceRoot":"","sources":["../../../src/services/rate-limiter.test.ts"],"names":[],"mappings":"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","sourcesContent":["// import {\n//   getRateLimiter,\n//   serverRateLimiter,\n//   redisRateLimitClient,\n// } from \"./rate-limiter\";\n// import { RateLimiterMode } from \"../../src/types\";\n// import { RateLimiterRedis } from \"rate-limiter-flexible\";\n\n// describe(\"Rate Limiter Service\", () => {\n//   beforeAll(async () => {\n//     try {\n//       await redisRateLimitClient.connect();\n//       // if (process.env.REDIS_RATE_LIMIT_URL === \"redis://localhost:6379\") {\n//       //   console.log(\"Erasing all keys\");\n//       //   // erase all the keys that start with \"test-prefix\"\n//       //   const keys = await redisRateLimitClient.keys(\"test-prefix:*\");\n//       //   if (keys.length > 0) {\n//       //     await redisRateLimitClient.del(...keys);\n//       //   }\n//       // }\n//     } catch (error) {}\n//   });\n\n//   afterAll(async () => {\n//     try {\n//       // if (process.env.REDIS_RATE_LIMIT_URL === \"redis://localhost:6379\") {\n//       await redisRateLimitClient.disconnect();\n//       // }\n//     } catch (error) {}\n//   });\n\n//   it(\"should return the testSuiteRateLimiter for specific tokens\", () => {\n//     const limiter = getRateLimiter(\n//       \"crawl\" as RateLimiterMode,\n//       \"test-prefix:a01ccae\",\n//     );\n//     expect(limiter).toBe(testSuiteRateLimiter);\n\n//     const limiter2 = getRateLimiter(\n//       \"scrape\" as RateLimiterMode,\n//       \"test-prefix:6254cf9\",\n//     );\n//     expect(limiter2).toBe(testSuiteRateLimiter);\n//   });\n\n//   it(\"should return the serverRateLimiter if mode is not found\", () => {\n//     const limiter = getRateLimiter(\n//       \"nonexistent\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//     );\n//     expect(limiter.points).toBe(serverRateLimiter.points);\n//   });\n\n//   it(\"should return the correct rate limiter based on mode and plan\", () => {\n//     const limiter = getRateLimiter(\n//       \"crawl\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"free\",\n//     );\n//     expect(limiter.points).toBe(2);\n\n//     const limiter2 = getRateLimiter(\n//       \"scrape\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"standard\",\n//     );\n//     expect(limiter2.points).toBe(100);\n\n//     const limiter3 = getRateLimiter(\n//       \"search\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"growth\",\n//     );\n//     expect(limiter3.points).toBe(500);\n\n//     const limiter4 = getRateLimiter(\n//       \"crawlStatus\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"growth\",\n//     );\n//     expect(limiter4.points).toBe(250);\n//   });\n\n//   it(\"should return the default rate limiter if plan is not provided\", () => {\n//     const limiter = getRateLimiter(\n//       \"crawl\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//     );\n//     expect(limiter.points).toBe(3);\n\n//     const limiter2 = getRateLimiter(\n//       \"scrape\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//     );\n//     expect(limiter2.points).toBe(20);\n//   });\n\n//   it(\"should create a new RateLimiterRedis instance with correct parameters\", () => {\n//     const keyPrefix = \"test-prefix\";\n//     const points = 10;\n//     const limiter = new RateLimiterRedis({\n//       storeClient: redisRateLimitClient,\n//       keyPrefix,\n//       points,\n//       duration: 60,\n//     });\n\n//     expect(limiter.keyPrefix).toBe(keyPrefix);\n//     expect(limiter.points).toBe(points);\n//     expect(limiter.duration).toBe(60);\n//   });\n\n//   it(\"should return the correct rate limiter for 'preview' mode\", () => {\n//     const limiter = getRateLimiter(\n//       \"preview\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"free\",\n//     );\n//     expect(limiter.points).toBe(5);\n\n//     const limiter2 = getRateLimiter(\n//       \"preview\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//     );\n//     expect(limiter2.points).toBe(5);\n//   });\n\n//   it(\"should return the correct rate limiter for 'account' mode\", () => {\n//     const limiter = getRateLimiter(\n//       \"account\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"free\",\n//     );\n//     expect(limiter.points).toBe(100);\n\n//     const limiter2 = getRateLimiter(\n//       \"account\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//     );\n//     expect(limiter2.points).toBe(100);\n//   });\n\n//   it(\"should return the correct rate limiter for 'crawlStatus' mode\", () => {\n//     const limiter = getRateLimiter(\n//       \"crawlStatus\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"free\",\n//     );\n//     expect(limiter.points).toBe(150);\n\n//     const limiter2 = getRateLimiter(\n//       \"crawlStatus\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//     );\n//     expect(limiter2.points).toBe(250);\n//   });\n\n//   it(\"should consume points correctly for 'crawl' mode\", async () => {\n//     const limiter = getRateLimiter(\n//       \"crawl\" as RateLimiterMode,\n//       \"test-prefix:someTokenCRAWL\",\n//       \"free\",\n//     );\n//     const consumePoints = 1;\n\n//     const res = await limiter.consume(\n//       \"test-prefix:someTokenCRAWL\",\n//       consumePoints,\n//     );\n//     expect(res.remainingPoints).toBe(1);\n//   });\n\n//   it(\"should consume points correctly for 'scrape' mode (DEFAULT)\", async () => {\n//     const limiter = getRateLimiter(\n//       \"scrape\" as RateLimiterMode,\n//       \"test-prefix:someTokenX\",\n//     );\n//     const consumePoints = 4;\n\n//     const res = await limiter.consume(\"test-prefix:someTokenX\", consumePoints);\n//     expect(res.remainingPoints).toBe(16);\n//   });\n\n//   it(\"should consume points correctly for 'scrape' mode (HOBBY)\", async () => {\n//     const limiter = getRateLimiter(\n//       \"scrape\" as RateLimiterMode,\n//       \"test-prefix:someTokenXY\",\n//       \"hobby\",\n//     );\n//     expect(limiter.points).toBe(20);\n\n//     const consumePoints = 5;\n\n//     const res = await limiter.consume(\"test-prefix:someTokenXY\", consumePoints);\n//     expect(res.consumedPoints).toBe(5);\n//     expect(res.remainingPoints).toBe(15);\n//   });\n\n//   it(\"should return the correct rate limiter for 'crawl' mode\", () => {\n//     const limiter = getRateLimiter(\n//       \"crawl\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"free\",\n//     );\n//     expect(limiter.points).toBe(2);\n\n//     const limiter2 = getRateLimiter(\n//       \"crawl\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"starter\",\n//     );\n//     expect(limiter2.points).toBe(10);\n\n//     const limiter3 = getRateLimiter(\n//       \"crawl\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"standard\",\n//     );\n//     expect(limiter3.points).toBe(5);\n//   });\n\n//   it(\"should return the correct rate limiter for 'scrape' mode\", () => {\n//     const limiter = getRateLimiter(\n//       \"scrape\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"free\",\n//     );\n//     expect(limiter.points).toBe(10);\n\n//     const limiter2 = getRateLimiter(\n//       \"scrape\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"starter\",\n//     );\n//     expect(limiter2.points).toBe(100);\n\n//     const limiter3 = getRateLimiter(\n//       \"scrape\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"standard\",\n//     );\n//     expect(limiter3.points).toBe(100);\n\n//     const limiter4 = getRateLimiter(\n//       \"scrape\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"growth\",\n//     );\n//     expect(limiter4.points).toBe(1000);\n//   });\n\n//   it(\"should return the correct rate limiter for 'search' mode\", () => {\n//     const limiter = getRateLimiter(\n//       \"search\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"free\",\n//     );\n//     expect(limiter.points).toBe(5);\n\n//     const limiter2 = getRateLimiter(\n//       \"search\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"starter\",\n//     );\n//     expect(limiter2.points).toBe(50);\n\n//     const limiter3 = getRateLimiter(\n//       \"search\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"standard\",\n//     );\n//     expect(limiter3.points).toBe(50);\n//   });\n\n//   it(\"should return the correct rate limiter for 'preview' mode\", () => {\n//     const limiter = getRateLimiter(\n//       \"preview\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"free\",\n//     );\n//     expect(limiter.points).toBe(5);\n\n//     const limiter2 = getRateLimiter(\n//       \"preview\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//     );\n//     expect(limiter2.points).toBe(5);\n//   });\n\n//   it(\"should return the correct rate limiter for 'account' mode\", () => {\n//     const limiter = getRateLimiter(\n//       \"account\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"free\",\n//     );\n//     expect(limiter.points).toBe(100);\n\n//     const limiter2 = getRateLimiter(\n//       \"account\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//     );\n//     expect(limiter2.points).toBe(100);\n//   });\n\n//   it(\"should return the correct rate limiter for 'crawlStatus' mode\", () => {\n//     const limiter = getRateLimiter(\n//       \"crawlStatus\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"free\",\n//     );\n//     expect(limiter.points).toBe(150);\n\n//     const limiter2 = getRateLimiter(\n//       \"crawlStatus\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//     );\n//     expect(limiter2.points).toBe(250);\n//   });\n\n//   it(\"should return the correct rate limiter for 'testSuite' mode\", () => {\n//     const limiter = getRateLimiter(\n//       \"testSuite\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//       \"free\",\n//     );\n//     expect(limiter.points).toBe(10000);\n\n//     const limiter2 = getRateLimiter(\n//       \"testSuite\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//     );\n//     expect(limiter2.points).toBe(10000);\n//   });\n\n//   it(\"should throw an error when consuming more points than available\", async () => {\n//     const limiter = getRateLimiter(\n//       \"crawl\" as RateLimiterMode,\n//       \"test-prefix:someToken\",\n//     );\n//     const consumePoints = limiter.points + 1;\n\n//     try {\n//       await limiter.consume(\"test-prefix:someToken\", consumePoints);\n//     } catch (error) {\n//       // expect remaining points to be 0\n//       const res = await limiter.get(\"test-prefix:someToken\");\n//       expect(res?.remainingPoints).toBe(0);\n//     }\n//   });\n\n//   it(\"should reset points after duration\", async () => {\n//     const keyPrefix = \"test-prefix\";\n//     const points = 10;\n//     const duration = 1; // 1 second\n//     const limiter = new RateLimiterRedis({\n//       storeClient: redisRateLimitClient,\n//       keyPrefix,\n//       points,\n//       duration,\n//     });\n\n//     const consumePoints = 5;\n//     await limiter.consume(\"test-prefix:someToken\", consumePoints);\n//     await new Promise((resolve) => setTimeout(resolve, duration * 1000 + 100)); // Wait for duration + 100ms\n\n//     const res = await limiter.consume(\"test-prefix:someToken\", consumePoints);\n//     expect(res.remainingPoints).toBe(points - consumePoints);\n//   });\n// });\n// TODO: FIX"]}