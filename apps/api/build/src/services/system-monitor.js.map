{"version":3,"file":"system-monitor.js","sourceRoot":"","sources":["../../../src/services/system-monitor.ts"],"names":[],"mappings":"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","sourcesContent":["import si from \"systeminformation\";\nimport { Mutex } from \"async-mutex\";\nimport os from \"os\";\nimport fs from \"fs\";\nimport { logger } from \"../lib/logger\";\n\nconst IS_KUBERNETES = process.env.IS_KUBERNETES === \"true\";\n\nconst MAX_CPU = process.env.MAX_CPU ? parseFloat(process.env.MAX_CPU) : 0.8;\nconst MAX_RAM = process.env.MAX_RAM ? parseFloat(process.env.MAX_RAM) : 0.8;\nconst CACHE_DURATION = process.env.SYS_INFO_MAX_CACHE_DURATION\n  ? parseFloat(process.env.SYS_INFO_MAX_CACHE_DURATION)\n  : 150;\n\nclass SystemMonitor {\n  private static instance: SystemMonitor;\n  private static instanceMutex = new Mutex();\n\n  private cpuUsageCache: number | null = null;\n  private memoryUsageCache: number | null = null;\n  private lastCpuCheck: number = 0;\n  private lastMemoryCheck: number = 0;\n\n  // Variables for CPU usage calculation\n  private previousCpuUsage: number = 0;\n  private previousTime: number = Date.now();\n\n  private constructor() {}\n\n  public static async getInstance(): Promise<SystemMonitor> {\n    if (SystemMonitor.instance) {\n      return SystemMonitor.instance;\n    }\n\n    await this.instanceMutex.runExclusive(async () => {\n      if (!SystemMonitor.instance) {\n        SystemMonitor.instance = new SystemMonitor();\n      }\n    });\n\n    return SystemMonitor.instance;\n  }\n\n  public async checkMemoryUsage() {\n    if (IS_KUBERNETES) {\n      return this._checkMemoryUsageKubernetes();\n    }\n    return this._checkMemoryUsage();\n  }\n\n  private readMemoryCurrent(): number {\n    const data = fs.readFileSync(\"/sys/fs/cgroup/memory.current\", \"utf8\");\n    return parseInt(data.trim(), 10);\n  }\n\n  private readMemoryMax(): number {\n    const data = fs.readFileSync(\"/sys/fs/cgroup/memory.max\", \"utf8\").trim();\n    if (data === \"max\") {\n      return Infinity;\n    }\n    return parseInt(data, 10);\n  }\n  private async _checkMemoryUsageKubernetes() {\n    try {\n      const currentMemoryUsage = this.readMemoryCurrent();\n      const memoryLimit = this.readMemoryMax();\n\n      let memoryUsagePercentage: number;\n\n      if (memoryLimit === Infinity) {\n        // No memory limit set; use total system memory\n        const totalMemory = os.totalmem();\n        memoryUsagePercentage = currentMemoryUsage / totalMemory;\n      } else {\n        memoryUsagePercentage = currentMemoryUsage / memoryLimit;\n      }\n\n      // console.log(\"Memory usage:\", memoryUsagePercentage);\n\n      return memoryUsagePercentage;\n    } catch (error) {\n      logger.error(`Error calculating memory usage: ${error}`);\n      return 0; // Fallback to 0% usage\n    }\n  }\n\n  private async _checkMemoryUsage() {\n    const now = Date.now();\n    if (\n      this.memoryUsageCache !== null &&\n      now - this.lastMemoryCheck < CACHE_DURATION\n    ) {\n      return this.memoryUsageCache;\n    }\n\n    const memoryData = await si.mem();\n    const totalMemory = memoryData.total;\n    const availableMemory = memoryData.available;\n    const usedMemory = totalMemory - availableMemory;\n    const usedMemoryPercentage = usedMemory / totalMemory;\n\n    this.memoryUsageCache = usedMemoryPercentage;\n    this.lastMemoryCheck = now;\n\n    return usedMemoryPercentage;\n  }\n\n  public async checkCpuUsage() {\n    if (IS_KUBERNETES) {\n      return this._checkCpuUsageKubernetes();\n    }\n    return this._checkCpuUsage();\n  }\n  private readCpuUsage(): number {\n    const data = fs.readFileSync(\"/sys/fs/cgroup/cpu.stat\", \"utf8\");\n    const match = data.match(/^usage_usec (\\d+)$/m);\n    if (match) {\n      return parseInt(match[1], 10);\n    }\n    throw new Error(\"Could not read usage_usec from cpu.stat\");\n  }\n\n  private getNumberOfCPUs(): number {\n    let cpus: number[] = [];\n    try {\n      const cpusetPath = \"/sys/fs/cgroup/cpuset.cpus.effective\";\n      const data = fs.readFileSync(cpusetPath, \"utf8\").trim();\n\n      if (!data) {\n        throw new Error(`${cpusetPath} is empty.`);\n      }\n\n      cpus = this.parseCpuList(data);\n\n      if (cpus.length === 0) {\n        throw new Error(\"No CPUs found in cpuset.cpus.effective\");\n      }\n    } catch (error) {\n      logger.warn(\n        `Unable to read cpuset.cpus.effective, defaulting to OS CPUs: ${error}`,\n      );\n      cpus = os.cpus().map((cpu, index) => index);\n    }\n    return cpus.length;\n  }\n\n  private parseCpuList(cpuList: string): number[] {\n    const ranges = cpuList.split(\",\");\n    const cpus: number[] = [];\n    ranges.forEach((range) => {\n      const [startStr, endStr] = range.split(\"-\");\n      const start = parseInt(startStr, 10);\n      const end = endStr !== undefined ? parseInt(endStr, 10) : start;\n      for (let i = start; i <= end; i++) {\n        cpus.push(i);\n      }\n    });\n    return cpus;\n  }\n  private async _checkCpuUsageKubernetes() {\n    try {\n      const usage = this.readCpuUsage(); // In microseconds (µs)\n      const now = Date.now();\n\n      // Check if it's the first run\n      if (this.previousCpuUsage === 0) {\n        // Initialize previous values\n        this.previousCpuUsage = usage;\n        this.previousTime = now;\n        // Return 0% CPU usage on first run\n        return 0;\n      }\n\n      const deltaUsage = usage - this.previousCpuUsage; // In µs\n      const deltaTime = (now - this.previousTime) * 1000; // Convert ms to µs\n\n      const numCPUs = this.getNumberOfCPUs(); // Get the number of CPUs\n\n      // Calculate the CPU usage percentage and normalize by the number of CPUs\n      const cpuUsagePercentage = deltaUsage / deltaTime / numCPUs;\n\n      // Update previous values\n      this.previousCpuUsage = usage;\n      this.previousTime = now;\n\n      // console.log(\"CPU usage:\", cpuUsagePercentage);\n\n      return cpuUsagePercentage;\n    } catch (error) {\n      logger.error(`Error calculating CPU usage: ${error}`);\n      return 0; // Fallback to 0% usage\n    }\n  }\n\n  private async _checkCpuUsage() {\n    const now = Date.now();\n    if (\n      this.cpuUsageCache !== null &&\n      now - this.lastCpuCheck < CACHE_DURATION\n    ) {\n      return this.cpuUsageCache;\n    }\n\n    const cpuData = await si.currentLoad();\n    const cpuLoad = cpuData.currentLoad / 100;\n\n    this.cpuUsageCache = cpuLoad;\n    this.lastCpuCheck = now;\n\n    return cpuLoad;\n  }\n\n  public async acceptConnection() {\n    const cpuUsage = await this.checkCpuUsage();\n    const memoryUsage = await this.checkMemoryUsage();\n\n    return cpuUsage < MAX_CPU && memoryUsage < MAX_RAM;\n  }\n\n  public clearCache() {\n    this.cpuUsageCache = null;\n    this.memoryUsageCache = null;\n    this.lastCpuCheck = 0;\n    this.lastMemoryCheck = 0;\n  }\n}\n\nexport default SystemMonitor.getInstance();\n"]}