{"version":3,"file":"validate.js","sourceRoot":"","sources":["../../../../src/services/idempotency/validate.ts"],"names":[],"mappings":";;AAKA,wDA6BC;AAjCD,0CAAoE;AACpE,+BAA0C;AAC1C,oDAAiD;AAE1C,KAAK,UAAU,sBAAsB,CAAC,GAAY;IACvD,MAAM,cAAc,GAAG,GAAG,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;IACxD,IAAI,CAAC,cAAc,EAAE,CAAC;QACpB,uDAAuD;QACvD,OAAO,IAAI,CAAC;IACd,CAAC;IACD,+CAA+C;IAC/C,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC;QACvC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;QACnB,CAAC,CAAC,cAAc,CAAC;IACnB,IAAI,CAAC,IAAA,eAAM,EAAC,GAAG,CAAC,EAAE,CAAC;QACjB,eAAM,CAAC,KAAK,CAAC,0DAA0D,CAAC,CAAC;QACzE,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,8BAAmB;SAC9C,IAAI,CAAC,kBAAkB,CAAC;SACxB,MAAM,CAAC,KAAK,CAAC;SACb,EAAE,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;IAE7B,IAAI,KAAK,EAAE,CAAC;QACV,eAAM,CAAC,KAAK,CAAC,qCAAqC,KAAK,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { Request } from \"express\";\nimport { supabase_rr_service, supabase_service } from \"../supabase\";\nimport { validate as isUuid } from \"uuid\";\nimport { logger } from \"../../../src/lib/logger\";\n\nexport async function validateIdempotencyKey(req: Request): Promise<boolean> {\n  const idempotencyKey = req.headers[\"x-idempotency-key\"];\n  if (!idempotencyKey) {\n    // // not returning for missing idempotency key for now\n    return true;\n  }\n  // Ensure idempotencyKey is treated as a string\n  const key = Array.isArray(idempotencyKey)\n    ? idempotencyKey[0]\n    : idempotencyKey;\n  if (!isUuid(key)) {\n    logger.debug(\"Invalid idempotency key provided in the request headers.\");\n    return false;\n  }\n\n  const { data, error } = await supabase_rr_service\n    .from(\"idempotency_keys\")\n    .select(\"key\")\n    .eq(\"key\", idempotencyKey);\n\n  if (error) {\n    logger.error(`Error validating idempotency key: ${error}`);\n  }\n\n  if (!data || data.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n"]}