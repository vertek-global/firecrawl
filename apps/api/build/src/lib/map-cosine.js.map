{"version":3,"file":"map-cosine.js","sourceRoot":"","sources":["../../../src/lib/map-cosine.ts"],"names":[],"mappings":";;AAEA,0DA2CC;AA7CD,qCAAkC;AAElC,SAAgB,uBAAuB,CAAC,KAAe,EAAE,WAAmB;IAC1E,IAAI,CAAC;QACH,0CAA0C;QAC1C,MAAM,gBAAgB,GAAG,CAAC,IAAc,EAAE,IAAc,EAAU,EAAE;YAClE,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACxE,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAC1B,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAC9C,CAAC;YACF,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAC1B,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAC9C,CAAC;YACF,IAAI,UAAU,KAAK,CAAC,IAAI,UAAU,KAAK,CAAC;gBAAE,OAAO,CAAC,CAAC;YACnD,OAAO,UAAU,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC;QAChD,CAAC,CAAC;QAEF,qCAAqC;QACrC,MAAM,YAAY,GAAG,CAAC,IAAY,EAAY,EAAE;YAC9C,MAAM,KAAK,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACrD,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACxB,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;qBAClE,MAAM,CAAC;gBACV,OAAO,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,8BAA8B;QAC9B,MAAM,gBAAgB,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YAC1C,MAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,YAAY,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC;YAC/C,OAAO,gBAAgB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,yDAAyD;QACzD,MAAM,CAAC,GAAG,KAAK;aACZ,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;aAChE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;QAErC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnC,OAAO,KAAK,CAAC;IACf,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CAAC,uCAAuC,KAAK,EAAE,CAAC,CAAC;QAC7D,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC","sourcesContent":["import { logger } from \"./logger\";\n\nexport function performCosineSimilarity(links: string[], searchQuery: string) {\n  try {\n    // Function to calculate cosine similarity\n    const cosineSimilarity = (vec1: number[], vec2: number[]): number => {\n      const dotProduct = vec1.reduce((sum, val, i) => sum + val * vec2[i], 0);\n      const magnitude1 = Math.sqrt(\n        vec1.reduce((sum, val) => sum + val * val, 0),\n      );\n      const magnitude2 = Math.sqrt(\n        vec2.reduce((sum, val) => sum + val * val, 0),\n      );\n      if (magnitude1 === 0 || magnitude2 === 0) return 0;\n      return dotProduct / (magnitude1 * magnitude2);\n    };\n\n    // Function to convert text to vector\n    const textToVector = (text: string): number[] => {\n      const words = searchQuery.toLowerCase().split(/\\W+/);\n      return words.map((word) => {\n        const count = (text.toLowerCase().match(new RegExp(word, \"g\")) || [])\n          .length;\n        return count / text.length;\n      });\n    };\n\n    // Calculate similarity scores\n    const similarityScores = links.map((link) => {\n      const linkVector = textToVector(link);\n      const searchVector = textToVector(searchQuery);\n      return cosineSimilarity(linkVector, searchVector);\n    });\n\n    // Sort links based on similarity scores and print scores\n    const a = links\n      .map((link, index) => ({ link, score: similarityScores[index] }))\n      .sort((a, b) => b.score - a.score);\n\n    links = a.map((item) => item.link);\n    return links;\n  } catch (error) {\n    logger.error(`Error performing cosine similarity: ${error}`);\n    return links;\n  }\n}\n"]}