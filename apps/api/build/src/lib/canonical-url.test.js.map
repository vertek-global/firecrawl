{"version":3,"file":"canonical-url.test.js","sourceRoot":"","sources":["../../../src/lib/canonical-url.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { normalizeUrl, normalizeUrlOnlyHostname } from \"./canonical-url\";\n\ndescribe(\"normalizeUrlOnlyHostname\", () => {\n  it(\"should remove protocol and www from URL\", () => {\n    const url = \"https://www.example.com\";\n    const expected = \"example.com\";\n    expect(normalizeUrlOnlyHostname(url)).toBe(expected);\n  });\n\n  it(\"should remove only protocol if www is not present\", () => {\n    const url = \"https://example.com\";\n    const expected = \"example.com\";\n    expect(normalizeUrlOnlyHostname(url)).toBe(expected);\n  });\n\n  it(\"should handle URLs without protocol\", () => {\n    const url = \"www.example.com\";\n    const expected = \"example.com\";\n    expect(normalizeUrlOnlyHostname(url)).toBe(expected);\n  });\n\n  it(\"should handle URLs without protocol and www\", () => {\n    const url = \"example.com\";\n    const expected = \"example.com\";\n    expect(normalizeUrlOnlyHostname(url)).toBe(expected);\n  });\n\n  it(\"should handle URLs with paths\", () => {\n    const url = \"https://www.example.com/path/to/resource\";\n    const expected = \"example.com\";\n    expect(normalizeUrlOnlyHostname(url)).toBe(expected);\n  });\n\n  it(\"should handle invalid URLs gracefully\", () => {\n    const url = \"not a valid url\";\n    const expected = \"not a valid url\";\n    expect(normalizeUrlOnlyHostname(url)).toBe(expected);\n  });\n\n  it(\"should handle URLs with subdomains\", () => {\n    const url = \"https://blog.example.com\";\n    const expected = \"blog.example.com\";\n    expect(normalizeUrlOnlyHostname(url)).toBe(expected);\n  });\n\n  it(\"should handle URLs with multiple subdomains\", () => {\n    const url = \"https://dev.blog.example.com\";\n    const expected = \"dev.blog.example.com\"; \n    expect(normalizeUrlOnlyHostname(url)).toBe(expected);\n  });\n});\n\ndescribe(\"normalizeUrl\", () => {\n  it(\"should remove protocol and www from URL\", () => {\n    const url = \"https://www.example.com\";\n    const expected = \"example.com\";\n    expect(normalizeUrl(url)).toBe(expected);\n  });\n\n  it(\"should remove only protocol if www is not present\", () => {\n    const url = \"https://example.com\";\n    const expected = \"example.com\";\n    expect(normalizeUrl(url)).toBe(expected);\n  });\n\n  it(\"should handle URLs without protocol\", () => {\n    const url = \"www.example.com\";\n    const expected = \"example.com\";\n    expect(normalizeUrl(url)).toBe(expected);\n  });\n\n  it(\"should handle URLs without protocol and www\", () => {\n    const url = \"example.com\";\n    const expected = \"example.com\";\n    expect(normalizeUrl(url)).toBe(expected);\n  });\n\n  it(\"should handle URLs with paths\", () => {\n    const url = \"https://www.example.com/path/to/resource\";\n    const expected = \"example.com/path/to/resource\";\n    expect(normalizeUrl(url)).toBe(expected);\n  });\n\n  it(\"should handle URLs with trailing slash\", () => {\n    const url = \"https://www.example.com/\";\n    const expected = \"example.com\";\n    expect(normalizeUrl(url)).toBe(expected);\n  });\n\n  it(\"should handle URLs with trailing slash and path\", () => {\n    const url = \"https://www.example.com/path/\";\n    const expected = \"example.com/path\";\n    expect(normalizeUrl(url)).toBe(expected);\n  });\n\n  it(\"should handle invalid URLs gracefully\", () => {\n    const url = \"not a valid url\";\n    const expected = \"not a valid url\";\n    expect(normalizeUrl(url)).toBe(expected);\n  });\n});\n"]}