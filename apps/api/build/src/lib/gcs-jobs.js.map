{"version":3,"file":"gcs-jobs.js","sourceRoot":"","sources":["../../../src/lib/gcs-jobs.ts"],"names":[],"mappings":"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","sourcesContent":["import { FirecrawlJob } from \"../types\";\nimport { ApiError, Storage } from \"@google-cloud/storage\";\nimport { logger } from \"./logger\";\nimport { Document } from \"../controllers/v1/types\";\n\nconst credentials = process.env.GCS_CREDENTIALS ? JSON.parse(atob(process.env.GCS_CREDENTIALS)) : undefined;\nconst storage = new Storage({ credentials });\n\nexport async function saveJobToGCS(job: FirecrawlJob): Promise<void> {\n    try {\n        if (!process.env.GCS_BUCKET_NAME) {\n            return;\n        }\n\n        const bucket = storage.bucket(process.env.GCS_BUCKET_NAME);\n        const blob = bucket.file(`${job.job_id}.json`);\n        for (let i = 0; i < 3; i++) {\n            try {\n                await blob.save(JSON.stringify(job.docs), { \n                    contentType: \"application/json\",\n                });\n                break;\n            } catch (error) {\n                if (i === 2) {\n                    throw error;\n                } else {\n                    logger.error(`Error saving job to GCS, retrying`, {\n                        error,\n                        scrapeId: job.job_id,\n                        jobId: job.job_id,\n                        i,\n                    });\n                }\n            }\n        }\n        for (let i = 0; i < 3; i++) {\n            try {\n                await blob.setMetadata({\n                    metadata: {\n                        job_id: job.job_id ?? null,\n                        success: job.success,\n                        message: job.message ?? null,\n                        num_docs: job.num_docs,\n                        time_taken: job.time_taken,\n                        team_id: (job.team_id === \"preview\" || job.team_id?.startsWith(\"preview_\")) ? null : job.team_id,\n                        mode: job.mode,\n                        url: job.url,\n                        crawler_options: JSON.stringify(job.crawlerOptions),\n                        page_options: JSON.stringify(job.scrapeOptions),\n                        origin: job.origin,\n                        integration: job.integration ?? null,\n                        num_tokens: job.num_tokens ?? null,\n                        retry: !!job.retry,\n                        crawl_id: job.crawl_id ?? null,\n                        tokens_billed: job.tokens_billed ?? null,\n                    },\n                });\n                break;\n            } catch (error) {\n                if (i === 2) {\n                    throw error;\n                } else {\n                    logger.error(`Error saving job metadata to GCS, retrying`, {\n                        error,\n                        scrapeId: job.job_id,\n                        jobId: job.job_id,\n                        i,\n                    });\n                }\n            }\n        }\n    } catch (error) {\n        logger.error(`Error saving job to GCS`, {\n            error,\n            scrapeId: job.job_id,\n            jobId: job.job_id,\n        });\n    }\n}\n\nexport async function getJobFromGCS(jobId: string): Promise<Document[] | null> {\n    try {\n        if (!process.env.GCS_BUCKET_NAME) {\n            return null;\n        }\n\n        const bucket = storage.bucket(process.env.GCS_BUCKET_NAME);\n        const blob = bucket.file(`${jobId}.json`);\n        const [content] = await blob.download();\n        const x = JSON.parse(content.toString());\n        return x;\n    } catch (error) {\n        if (error instanceof ApiError && error.code === 404 && error.message.includes(\"No such object:\")) {\n            // Object does not exist\n            return null;\n        }\n        \n        logger.error(`Error getting job from GCS`, {\n            error,\n            jobId,\n            scrapeId: jobId,\n        });\n        return null;\n    }\n}\n\nexport async function removeJobFromGCS(jobId: string): Promise<void> {\n    try {\n        if (!process.env.GCS_BUCKET_NAME) {\n            return;\n        }\n\n        const bucket = storage.bucket(process.env.GCS_BUCKET_NAME);\n        const blob = bucket.file(`${jobId}.json`);\n        await blob.delete({\n            ignoreNotFound: true,\n        });\n    } catch (error) {\n        if (error instanceof ApiError && error.code === 404 && error.message.includes(\"No such object:\")) {\n            // Object does not exist\n            return;\n        }\n        \n        logger.error(`Error removing job from GCS`, {\n            error,\n            jobId,\n            scrapeId: jobId,\n        });\n    }\n}\n\n// TODO: fix the any type (we have multiple Document types in the codebase)\nexport async function getDocFromGCS(url: string): Promise<any | null> {\n//   logger.info(`Getting f-engine document from GCS`, {\n//     url,\n//   });\n  try {\n      if (!process.env.GCS_FIRE_ENGINE_BUCKET_NAME) {\n          return null;\n      }\n\n      const bucket = storage.bucket(process.env.GCS_FIRE_ENGINE_BUCKET_NAME);\n      const blob = bucket.file(`${url}`);\n      const [exists] = await blob.exists();\n      if (!exists) {\n          return null;\n      }\n      const [blobContent] = await blob.download();\n      const parsed = JSON.parse(blobContent.toString());\n      return parsed;\n  } catch (error) {\n      logger.error(`Error getting f-engine document from GCS`, {\n          error,\n          url,\n      });\n      return null;\n  }\n}"]}