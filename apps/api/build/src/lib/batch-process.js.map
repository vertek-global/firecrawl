{"version":3,"file":"batch-process.js","sourceRoot":"","sources":["../../../src/lib/batch-process.ts"],"names":[],"mappings":";;AAAA,oCAcC;AAdM,KAAK,UAAU,YAAY,CAChC,KAAU,EACV,SAAiB,EACjB,aAAwD;IAExD,MAAM,OAAO,GAAU,EAAE,CAAC;IAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC;QACjD,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC;QAC5C,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtB,CAAC;IAED,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE,CAAC;QAC5B,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC;AACH,CAAC","sourcesContent":["export async function batchProcess<T>(\n  array: T[],\n  batchSize: number,\n  asyncFunction: (item: T, index: number) => Promise<void>,\n): Promise<void> {\n  const batches: T[][] = [];\n  for (let i = 0; i < array.length; i += batchSize) {\n    const batch = array.slice(i, i + batchSize);\n    batches.push(batch);\n  }\n\n  for (const batch of batches) {\n    await Promise.all(batch.map((item, i) => asyncFunction(item, i)));\n  }\n}\n"]}