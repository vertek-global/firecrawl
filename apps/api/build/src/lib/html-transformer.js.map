{"version":3,"file":"html-transformer.js","sourceRoot":"","sources":["../../../src/lib/html-transformer.ts"],"names":[],"mappings":"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","sourcesContent":["import koffi, { KoffiFunction } from \"koffi\";\nimport { join } from \"path\";\nimport { stat } from \"fs/promises\";\nimport { platform } from \"os\";\n\n// TODO: add a timeout to the Rust transformer\nconst rustExecutablePath = join(\n  process.cwd(),\n  \"sharedLibs/html-transformer/target/release/\",\n  platform() === \"darwin\" ? \"libhtml_transformer.dylib\" : \"libhtml_transformer.so\"\n);\n\ntype TransformHtmlOptions = {\n  html: string,\n  url: string,\n  include_tags: string[],\n  exclude_tags: string[],\n  only_main_content: boolean,\n};\n\nclass RustHTMLTransformer {\n  private static instance: RustHTMLTransformer;\n  private _extractLinks: KoffiFunction;\n  private _extractMetadata: KoffiFunction;\n  private _transformHtml: KoffiFunction;\n  private _freeString: KoffiFunction;\n  private _getInnerJSON: KoffiFunction;\n\n  private constructor() {\n    const lib = koffi.load(rustExecutablePath);\n    this._freeString = lib.func(\"free_string\", \"void\", [\"string\"]);\n    const cstn = \"CString:\" + crypto.randomUUID();\n    const freedResultString = koffi.disposable(cstn, \"string\", this._freeString);\n    this._extractLinks = lib.func(\"extract_links\", freedResultString, [\"string\"]);\n    this._extractMetadata = lib.func(\"extract_metadata\", freedResultString, [\"string\"]);\n    this._transformHtml = lib.func(\"transform_html\", freedResultString, [\"string\"]);\n    this._getInnerJSON = lib.func(\"get_inner_json\", freedResultString, [\"string\"]);\n  }\n\n  public static async getInstance(): Promise<RustHTMLTransformer> {\n    if (!RustHTMLTransformer.instance) {\n      try {\n        await stat(rustExecutablePath);\n      } catch (_) {\n        throw Error(\"Rust html-transformer shared library not found\");\n      }\n      RustHTMLTransformer.instance = new RustHTMLTransformer();\n    }\n    return RustHTMLTransformer.instance;\n  }\n\n  public async extractLinks(html: string): Promise<string[]> {\n    return new Promise<string[]>((resolve, reject) => {\n      this._extractLinks.async(html, (err: Error, res: string) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(JSON.parse(res));\n        }\n      });\n    });\n  }\n\n  public async extractMetadata(html: string): Promise<any> {\n    return new Promise<string[]>((resolve, reject) => {\n      this._extractMetadata.async(html, (err: Error, res: string) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(JSON.parse(res));\n        }\n      });\n    });\n  }\n\n  public async transformHtml(opts: TransformHtmlOptions): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      this._transformHtml.async(JSON.stringify(opts), (err: Error, res: string) => {\n        if (err) {\n          reject(err);\n        } else {\n          if (res === \"RUSTFC:ERROR\") {\n            reject(new Error(\"Something went wrong on the Rust side.\"));\n          } else {\n            resolve(res);\n          }\n        }\n      });\n    });\n  }\n\n  public async getInnerJSON(html: string): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      this._getInnerJSON.async(html, (err: Error, res: string) => {\n        if (err) {\n          reject(err);\n        } else {\n          if (res === \"RUSTFC:ERROR\") {\n            reject(new Error(\"Something went wrong on the Rust side.\"));\n          } else {\n            resolve(res);\n          }\n        }\n      });\n    });\n  }\n}\n\nexport async function extractLinks(\n  html: string | null | undefined,\n): Promise<string[]> {\n    if (!html) {\n        return [];\n    }\n\n    const converter = await RustHTMLTransformer.getInstance();\n    return await converter.extractLinks(html);\n}\n\nexport async function extractMetadata(\n    html: string | null | undefined,\n): Promise<any> {\n    if (!html) {\n        return [];\n    }\n\n    const converter = await RustHTMLTransformer.getInstance();\n    return await converter.extractMetadata(html);\n}\n\nexport async function transformHtml(\n  opts: TransformHtmlOptions,\n): Promise<string> {\n  const converter = await RustHTMLTransformer.getInstance();\n  return await converter.transformHtml(opts);\n}\n\nexport async function getInnerJSON(\n  html: string,\n): Promise<string> {\n  const converter = await RustHTMLTransformer.getInstance();\n  return await converter.getInnerJSON(html);\n}\n"]}