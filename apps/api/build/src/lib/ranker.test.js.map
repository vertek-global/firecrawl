{"version":3,"file":"ranker.test.js","sourceRoot":"","sources":["../../../src/lib/ranker.test.ts"],"names":[],"mappings":";;AAAA,qCAA0C;AAE1C,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;QACrE,MAAM,gBAAgB,GAAG;YACvB,qGAAqG;YACrG,0FAA0F;YAC1F,iGAAiG;SAClG,CAAC;QAEF,MAAM,KAAK,GAAG;YACZ,0BAA0B;YAC1B,0BAA0B;YAC1B,0BAA0B;SAC3B,CAAC;QAEF,MAAM,WAAW,GAAG,eAAe,CAAC;QAEpC,MAAM,MAAM,GAAG,MAAM,IAAA,uBAAc,EAAC,gBAAgB,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;QAE1E,kFAAkF;QAClF,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACrC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE9B,iEAAiE;QACjE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAExD,8CAA8C;QAC9C,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACtB,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YACpC,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACrC,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;YAC7C,MAAM,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,uCAAuC;QACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACnE,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC1C,MAAM,MAAM,GAAG,MAAM,IAAA,uBAAc,EAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAChD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,gBAAgB,GAAG;YACvB,yEAAyE;YACzE,yEAAyE;SAC1E,CAAC;QAEF,MAAM,KAAK,GAAG,CAAC,uBAAuB,EAAE,uBAAuB,CAAC,CAAC;QAEjE,MAAM,WAAW,GAAG,MAAM,CAAC;QAE3B,MAAM,MAAM,GAAG,MAAM,IAAA,uBAAc,EAAC,gBAAgB,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;QAE1E,2DAA2D;QAC3D,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { performRanking } from \"./ranker\";\n\ndescribe(\"performRanking\", () => {\n  it(\"should rank links based on similarity to search query\", async () => {\n    const linksWithContext = [\n      \"url: https://example.com/dogs, title: All about dogs, description: Learn about different dog breeds\",\n      \"url: https://example.com/cats, title: Cat care guide, description: Everything about cats\",\n      \"url: https://example.com/pets, title: General pet care, description: Care for all types of pets\",\n    ];\n\n    const links = [\n      \"https://example.com/dogs\",\n      \"https://example.com/cats\",\n      \"https://example.com/pets\",\n    ];\n\n    const searchQuery = \"cats training\";\n\n    const result = await performRanking(linksWithContext, links, searchQuery);\n\n    // Should return array of objects with link, linkWithContext, score, originalIndex\n    expect(result).toBeInstanceOf(Array);\n    expect(result.length).toBe(3);\n\n    // First result should be the dogs page since query is about dogs\n    expect(result[0].link).toBe(\"https://example.com/cats\");\n\n    // Each result should have required properties\n    result.forEach((item) => {\n      expect(item).toHaveProperty(\"link\");\n      expect(item).toHaveProperty(\"linkWithContext\");\n      expect(item).toHaveProperty(\"score\");\n      expect(item).toHaveProperty(\"originalIndex\");\n      expect(typeof item.score).toBe(\"number\");\n      expect(item.score).toBeGreaterThanOrEqual(0);\n      expect(item.score).toBeLessThanOrEqual(1);\n    });\n\n    // Scores should be in descending order\n    for (let i = 1; i < result.length; i++) {\n      expect(result[i].score).toBeLessThanOrEqual(result[i - 1].score);\n    }\n  });\n\n  it(\"should handle empty inputs\", async () => {\n    const result = await performRanking([], [], \"\");\n    expect(result).toEqual([]);\n  });\n\n  it(\"should maintain original order for equal scores\", async () => {\n    const linksWithContext = [\n      \"url: https://example.com/1, title: Similar content A, description: test\",\n      \"url: https://example.com/2, title: Similar content B, description: test\",\n    ];\n\n    const links = [\"https://example.com/1\", \"https://example.com/2\"];\n\n    const searchQuery = \"test\";\n\n    const result = await performRanking(linksWithContext, links, searchQuery);\n\n    // If scores are equal, original order should be maintained\n    expect(result[0].originalIndex).toBeLessThan(result[1].originalIndex);\n  });\n});\n"]}