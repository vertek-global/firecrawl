{"version":3,"file":"deep-research-service.js","sourceRoot":"","sources":["../../../../src/lib/deep-research/deep-research-service.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger as _logger } from \"../logger\";\nimport { updateDeepResearch } from \"./deep-research-redis\";\nimport { searchAndScrapeSearchResult } from \"../../controllers/v1/search\";\nimport { ResearchLLMService, ResearchStateManager } from \"./research-manager\";\nimport { logJob } from \"../../services/logging/log_job\";\nimport { billTeam } from \"../../services/billing/credit_billing\";\nimport { ExtractOptions } from \"../../controllers/v1/types\";\nimport { CostTracking } from \"../extract/extraction-service\";\nimport { getACUCTeam } from \"../../controllers/auth\";\ninterface DeepResearchServiceOptions {\n  researchId: string;\n  teamId: string;\n  query: string;\n  maxDepth: number;\n  maxUrls: number;\n  timeLimit: number;\n  analysisPrompt: string;\n  systemPrompt: string;\n  formats: string[];\n  jsonOptions: ExtractOptions;\n  subId?: string;\n}\n\nexport async function performDeepResearch(options: DeepResearchServiceOptions) {\n  const costTracking = new CostTracking();\n  const { researchId, teamId, timeLimit, subId, maxUrls } = options;\n  const startTime = Date.now();\n  let currentTopic = options.query;\n  let urlsAnalyzed = 0;\n\n  const logger = _logger.child({\n    module: \"deep-research\",\n    method: \"performDeepResearch\",\n    researchId,\n  });\n\n  logger.debug(\"[Deep Research] Starting research with options:\", { options });\n\n  const state = new ResearchStateManager(\n    researchId,\n    teamId,\n    options.maxDepth,\n    logger,\n    options.query,\n  );\n  const llmService = new ResearchLLMService(logger);\n\n  const acuc = await getACUCTeam(teamId);\n\n  const checkTimeLimit = () => {\n    const timeElapsed = Date.now() - startTime;\n    const isLimitReached = timeElapsed >= timeLimit * 1000;\n    if (isLimitReached) {\n      logger.debug(\"[Deep Research] Time limit reached\", { \n        timeElapsed: timeElapsed / 1000, \n        timeLimit \n      });\n    }\n    return isLimitReached;\n  };\n\n  try {\n    while (!state.hasReachedMaxDepth() && urlsAnalyzed < maxUrls) {\n      logger.debug(\"[Deep Research] Current depth:\", state.getCurrentDepth());\n      logger.debug(\"[Deep Research] URL analysis count:\", { \n        urlsAnalyzed, \n        maxUrls,\n        timeElapsed: (Date.now() - startTime) / 1000,\n        timeLimit \n      });\n      \n      if (checkTimeLimit()) {\n        logger.debug(\"[Deep Research] Time limit reached, stopping research\");\n        break;\n      }\n\n      await state.incrementDepth();\n\n      // Search phase\n      await state.addActivity([{\n        type: \"search\",\n        status: \"processing\",\n        message: `Generating deeper search queries for \"${currentTopic}\"`,\n        timestamp: new Date().toISOString(),\n        depth: state.getCurrentDepth(),\n      }]);\n\n      const nextSearchTopic = state.getNextSearchTopic();\n      logger.debug(\"[Deep Research] Next search topic:\", { nextSearchTopic });\n\n      const searchQueries = (\n        await llmService.generateSearchQueries(\n          nextSearchTopic,\n          state.getFindings(),\n          costTracking,\n        )\n      ).slice(0, 3);\n\n      logger.debug(\"[Deep Research] Generated search queries:\", { searchQueries });\n\n      await state.addActivity([{\n        type: \"search\",\n        status: \"processing\",\n        message: `Starting ${searchQueries.length} parallel searches for \"${currentTopic}\"`,\n        timestamp: new Date().toISOString(),\n        depth: state.getCurrentDepth(),\n      }]);\n      await state.addActivity(searchQueries.map(searchQuery => ({\n        type: \"search\",\n        status: \"processing\", \n        message: `Searching for \"${searchQuery.query}\" - Goal: ${searchQuery.researchGoal}`,\n        timestamp: new Date().toISOString(),\n        depth: state.getCurrentDepth(),\n      })))\n\n      // Run all searches in parallel\n      const searchPromises = searchQueries.map(async (searchQuery) => {\n\n        const response = await searchAndScrapeSearchResult(searchQuery.query, {\n          teamId: options.teamId,\n          origin: \"deep-research\",\n          timeout: 10000,\n          scrapeOptions: {\n            formats: [\"markdown\"],\n            onlyMainContent: true,\n            waitFor: 0,\n            mobile: false,\n            parsePDF: false,\n            useMock: \"none\",\n            skipTlsVerification: false,\n            removeBase64Images: false,\n            fastMode: false,\n            blockAds: false,\n            maxAge: 4 * 60 * 60 * 1000,\n            storeInCache: true,\n          },\n        }, logger, costTracking, acuc?.flags ?? null);\n        return response.length > 0 ? response : [];\n      });\n\n      const searchResultsArrays = await Promise.all(searchPromises);\n      const searchResults = searchResultsArrays.flat();\n\n      logger.debug(\n        \"[Deep Research] Search results count:\",\n        { count: searchResults.length },\n      );\n\n      if (!searchResults || searchResults.length === 0) {\n        logger.debug(\n          \"[Deep Research] No results found for topic:\",\n          { currentTopic },\n        );\n        await state.addActivity([{\n          type: \"search\",\n          status: \"error\",\n          message: `No results found for any queries about \"${currentTopic}\"`,\n          timestamp: new Date().toISOString(),\n          depth: state.getCurrentDepth(),\n        }]);\n        continue;\n      }\n\n      // Filter out already seen URLs and track new ones\n      const newSearchResults: typeof searchResults = [];\n      for (const result of searchResults) {\n        if (!result.url || state.hasSeenUrl(result.url)) {\n          continue;\n        }\n        state.addSeenUrl(result.url);\n        \n        urlsAnalyzed++;\n        if (urlsAnalyzed >= maxUrls) {\n          logger.debug(\"[Deep Research] Max URLs limit reached\", { urlsAnalyzed, maxUrls });\n          break;\n        }\n        newSearchResults.push(result);\n      }\n      \n      if (checkTimeLimit()) {\n        logger.debug(\"[Deep Research] Time limit reached during URL filtering\");\n        break;\n      }\n\n      await state.addSources(newSearchResults.map((result) => ({\n        url: result.url ?? \"\",\n        title: result.title ?? \"\",\n        description: result.description ?? \"\",\n        icon: result.metadata?.favicon ?? \"\",\n      })));\n      logger.debug(\n        \"[Deep Research] New unique results count:\",\n        { length: newSearchResults.length },\n      );\n\n      if (newSearchResults.length === 0) {\n        logger.debug(\n          \"[Deep Research] No new unique results found for topic:\",\n          { currentTopic },\n        );\n        await state.addActivity([{\n          type: \"search\",\n          status: \"error\",\n          message: `Found ${searchResults.length} results but all URLs were already processed for \"${currentTopic}\"`,\n          timestamp: new Date().toISOString(),\n          depth: state.getCurrentDepth(),\n        }]);\n        continue;\n      }\n\n      await state.addActivity([{\n        type: \"search\",\n        status: \"complete\",\n        message: `Found ${newSearchResults.length} new relevant results across ${searchQueries.length} parallel queries`,\n        timestamp: new Date().toISOString(),\n        depth: state.getCurrentDepth(),\n      }]);\n\n      await state.addFindings(\n        newSearchResults.map((result) => ({\n          text: result.markdown ?? \"\",\n          source: result.url ?? \"\",\n        })),\n      );\n\n      // Analysis phase\n      await state.addActivity([{\n        type: \"analyze\",\n        status: \"processing\",\n        message: \"Analyzing findings and planning next steps\",\n        timestamp: new Date().toISOString(),\n        depth: state.getCurrentDepth(),\n      }]);\n\n      const timeRemaining = timeLimit * 1000 - (Date.now() - startTime);\n      logger.debug(\"[Deep Research] Time remaining (ms):\", { timeRemaining });\n\n      if (checkTimeLimit()) {\n        logger.debug(\"[Deep Research] Time limit reached before analysis\");\n        break;\n      }\n      \n      const analysis = await llmService.analyzeAndPlan(\n        state.getFindings(),\n        currentTopic,\n        timeRemaining,\n        options.systemPrompt ?? \"\",\n        costTracking,\n      );\n      \n      if (checkTimeLimit()) {\n        logger.debug(\"[Deep Research] Time limit reached after analysis\");\n        break;\n      }\n\n      if (!analysis) {\n        logger.debug(\"[Deep Research] Analysis failed\");\n        await state.addActivity([{\n          type: \"analyze\",\n          status: \"error\",\n          message: \"Failed to analyze findings\",\n          timestamp: new Date().toISOString(),\n          depth: state.getCurrentDepth(),\n        }]);\n\n        state.incrementFailedAttempts();\n        if (state.hasReachedMaxFailedAttempts()) {\n          logger.debug(\"[Deep Research] Max failed attempts reached\");\n          break;\n        }\n        continue;\n      }\n\n      logger.debug(\"[Deep Research] Analysis result:\", {\n        nextTopic: analysis.nextSearchTopic,\n        shouldContinue: analysis.shouldContinue,\n        gapsCount: analysis.gaps.length,\n      });\n\n      state.setNextSearchTopic(analysis.nextSearchTopic || \"\");\n\n      await state.addActivity([{\n        type: \"analyze\",\n        status: \"complete\",\n        message: \"Analyzed findings\",\n        timestamp: new Date().toISOString(),\n        depth: state.getCurrentDepth(),\n      }]);\n\n      if (!analysis.shouldContinue || analysis.gaps.length === 0) {\n        logger.debug(\"[Deep Research] No more gaps to research, ending search\");\n        break;\n      }\n\n      currentTopic = analysis.gaps[0] || currentTopic;\n      logger.debug(\"[Deep Research] Next topic to research:\", { currentTopic });\n    }\n\n    // Final synthesis\n    logger.debug(\"[Deep Research] Starting final synthesis\");\n    \n    // Check time limit before final synthesis\n    if (checkTimeLimit()) {\n      logger.debug(\"[Deep Research] Time limit reached before final synthesis\");\n    }\n    \n    await state.addActivity([{\n      type: \"synthesis\",\n      status: \"processing\",\n      message: \"Preparing final analysis\",\n      timestamp: new Date().toISOString(),\n      depth: state.getCurrentDepth(),\n    }]);\n\n    let finalAnalysis = \"\";\n    let finalAnalysisJson = null;\n    if(options.formats.includes('json')) {\n      finalAnalysisJson = await llmService.generateFinalAnalysis(\n        options.query,\n        state.getFindings(),\n        state.getSummaries(),\n        options.analysisPrompt,\n        costTracking,\n        options.formats,\n        options.jsonOptions,\n      );\n    }\n    if(options.formats.includes('markdown')) {\n      finalAnalysis = await llmService.generateFinalAnalysis(\n        options.query,\n        state.getFindings(),\n        state.getSummaries(),\n        options.analysisPrompt,\n        costTracking,\n      );\n    }\n\n    await state.addActivity([{\n      type: \"synthesis\",\n      status: \"complete\",\n      message: \"Research completed\",\n      timestamp: new Date().toISOString(),\n      depth: state.getCurrentDepth(),\n    }]);\n\n    const progress = state.getProgress();\n    logger.debug(\"[Deep Research] Research completed successfully\");\n\n    const credits_billed = Math.min(urlsAnalyzed, options.maxUrls);\n\n    // Log job with token usage and sources\n    await logJob({\n      job_id: researchId,\n      success: true,\n      message: \"Research completed\",\n      num_docs: 1,\n      docs: [{ finalAnalysis: finalAnalysis, sources: state.getSources(), json: finalAnalysisJson }],\n      time_taken: (Date.now() - startTime) / 1000,\n      team_id: teamId,\n      mode: \"deep-research\",\n      url: options.query,\n      scrapeOptions: options,\n      origin: \"api\",\n      num_tokens: 0,\n      tokens_billed: 0,\n      cost_tracking: costTracking,\n      credits_billed,\n      zeroDataRetention: false, // not supported\n    });\n    await updateDeepResearch(researchId, {\n      status: \"completed\",\n      finalAnalysis: finalAnalysis,\n      json: finalAnalysisJson,\n    });\n    // Bill team for usage based on URLs analyzed\n    billTeam(teamId, subId, credits_billed, logger).catch(\n      (error) => {\n        logger.error(\n          `Failed to bill team ${teamId} for ${urlsAnalyzed} URLs analyzed`, { teamId, count: urlsAnalyzed, error },\n        );\n      },\n    );\n    return {\n      success: true,\n      data: {\n        finalAnalysis: finalAnalysis,\n        sources: state.getSources(),\n        json: finalAnalysisJson,\n      },\n    };\n  } catch (error: any) {\n    logger.error(\"Deep research error\", { error });\n    await updateDeepResearch(researchId, {\n      status: \"failed\",\n      error: error.message,\n    });\n    throw error;\n  }\n}\n"]}