{"version":3,"file":"job-priority.test.js","sourceRoot":"","sources":["../../../../src/lib/__tests__/job-priority.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  getJobPriority,\n  addJobPriority,\n  deleteJobPriority,\n} from \"../job-priority\";\nimport { redisConnection } from \"../../services/queue-service\";\nimport {  } from \"../../types\";\n\njest.mock(\"../../services/queue-service\", () => ({\n  redisConnection: {\n    sadd: jest.fn(),\n    srem: jest.fn(),\n    scard: jest.fn(),\n    expire: jest.fn(),\n  },\n}));\n\ndescribe(\"Job Priority Tests\", () => {\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  test(\"addJobPriority should add job_id to the set and set expiration\", async () => {\n    const team_id = \"team1\";\n    const job_id = \"job1\";\n    await addJobPriority(team_id, job_id);\n    expect(redisConnection.sadd).toHaveBeenCalledWith(\n      `limit_team_id:${team_id}`,\n      job_id,\n    );\n    expect(redisConnection.expire).toHaveBeenCalledWith(\n      `limit_team_id:${team_id}`,\n      60,\n    );\n  });\n\n  test(\"deleteJobPriority should remove job_id from the set\", async () => {\n    const team_id = \"team1\";\n    const job_id = \"job1\";\n    await deleteJobPriority(team_id, job_id);\n    expect(redisConnection.srem).toHaveBeenCalledWith(\n      `limit_team_id:${team_id}`,\n      job_id,\n    );\n  });\n\n  test(\"getJobPriority should return correct priority based on plan and set length\", async () => {\n    const team_id = \"team1\";\n    const plan = \"standard\";\n    (redisConnection.scard as jest.Mock).mockResolvedValue(150);\n\n    const priority = await getJobPriority({ team_id });\n    expect(priority).toBe(10);\n\n    (redisConnection.scard as jest.Mock).mockResolvedValue(250);\n    const priorityExceeded = await getJobPriority({ team_id });\n    expect(priorityExceeded).toBe(20); // basePriority + Math.ceil((250 - 200) * 0.4)\n  });\n\n  test(\"getJobPriority should handle different plans correctly\", async () => {\n    const team_id = \"team1\";\n\n    (redisConnection.scard as jest.Mock).mockResolvedValue(50);\n    let plan = \"hobby\";\n    let priority = await getJobPriority({ team_id });\n    expect(priority).toBe(10);\n\n    (redisConnection.scard as jest.Mock).mockResolvedValue(150);\n    plan = \"hobby\";\n    priority = await getJobPriority({ team_id });\n    expect(priority).toBe(25); // basePriority + Math.ceil((150 - 50) * 0.3)\n\n    (redisConnection.scard as jest.Mock).mockResolvedValue(25);\n    plan = \"free\";\n    priority = await getJobPriority({ team_id });\n    expect(priority).toBe(10);\n\n    (redisConnection.scard as jest.Mock).mockResolvedValue(60);\n    plan = \"free\";\n    priority = await getJobPriority({ team_id });\n    expect(priority).toBe(28); // basePriority + Math.ceil((60 - 25) * 0.5)\n  });\n\n  test(\"addJobPriority should reset expiration time when adding new job\", async () => {\n    const team_id = \"team1\";\n    const job_id1 = \"job1\";\n    const job_id2 = \"job2\";\n\n    await addJobPriority(team_id, job_id1);\n    expect(redisConnection.expire).toHaveBeenCalledWith(\n      `limit_team_id:${team_id}`,\n      60,\n    );\n\n    // Clear the mock calls\n    (redisConnection.expire as jest.Mock).mockClear();\n\n    // Add another job\n    await addJobPriority(team_id, job_id2);\n    expect(redisConnection.expire).toHaveBeenCalledWith(\n      `limit_team_id:${team_id}`,\n      60,\n    );\n  });\n\n  test(\"Set should expire after 60 seconds\", async () => {\n    const team_id = \"team1\";\n    const job_id = \"job1\";\n\n    jest.useFakeTimers();\n\n    await addJobPriority(team_id, job_id);\n    expect(redisConnection.expire).toHaveBeenCalledWith(\n      `limit_team_id:${team_id}`,\n      60,\n    );\n\n    // Fast-forward time by 59 seconds\n    jest.advanceTimersByTime(59000);\n\n    // The set should still exist\n    expect(redisConnection.scard).not.toHaveBeenCalled();\n\n    // Fast-forward time by 2 more seconds (total 61 seconds)\n    jest.advanceTimersByTime(2000);\n\n    // Check if the set has been removed (scard should return 0)\n    (redisConnection.scard as jest.Mock).mockResolvedValue(0);\n    const setSize = await redisConnection.scard(`limit_team_id:${team_id}`);\n    expect(setSize).toBe(0);\n\n    jest.useRealTimers();\n  });\n});\n"]}