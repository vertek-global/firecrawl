{"version":3,"file":"deduplicate-obs-array.test.js","sourceRoot":"","sources":["../../../../src/lib/__tests__/deduplicate-obs-array.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { deduplicateObjectsArray } from \"../extract/helpers/deduplicate-objs-array\";\n\ndescribe(\"deduplicateObjectsArray\", () => {\n  it(\"should deduplicate the array\", async () => {\n    const objArray = {\n      lawyers: [\n        {\n          name: \"James D. Schull\",\n          email: null,\n          title: \"Personal Injury Attorney\",\n          \"phone-number\": null,\n          \"practice-areas\": [\n            {\n              area: \"Personal Injury\",\n            },\n          ],\n        },\n        {\n          name: \"James D. Schull\",\n          email: null,\n          title: \"Personal Injury Attorney\",\n          \"phone-number\": null,\n          \"practice-areas\": [\n            {\n              area: \"Personal Injury\",\n            },\n          ],\n        },\n        {\n          name: \"James D. Schull\",\n          email: null,\n          title: \"Personal Injury Attorney\",\n          \"phone-number\": null,\n          \"practice-areas\": [\n            {\n              area: \"Personal Injury\",\n            },\n          ],\n        },\n      ],\n    };\n\n    const expected = {\n      lawyers: [\n        {\n          name: \"James D. Schull\",\n          email: null,\n          title: \"Personal Injury Attorney\",\n          \"phone-number\": null,\n          \"practice-areas\": [\n            {\n              area: \"Personal Injury\",\n            },\n          ],\n        },\n      ],\n    };\n\n    const result = await deduplicateObjectsArray(objArray);\n\n    expect(result).toEqual(expected);\n  });\n\n  it(\"should not deduplicate if not necessary\", async () => {\n    const objArray = {\n      lawyers: [\n        {\n          name: \"James D. Schull\",\n          email: null,\n          title: \"Personal Injury Attorney\",\n          \"phone-number\": null,\n          \"practice-areas\": [\n            {\n              area: \"Personal Injury\",\n            },\n          ],\n        },\n        {\n          name: \"John Doe\",\n          email: null,\n          title: \"Personal Injury Attorney\",\n          \"phone-number\": null,\n          \"practice-areas\": [\n            {\n              area: \"Personal Injury\",\n            },\n          ],\n        },\n      ],\n    };\n\n    const result = await deduplicateObjectsArray(objArray);\n\n    expect(result).toEqual(objArray);\n  });\n\n  it(\"should handle an empty array\", async () => {\n    const objArray = { lawyers: [] };\n\n    const expected = { lawyers: [] };\n\n    const result = await deduplicateObjectsArray(objArray);\n\n    expect(result).toEqual(expected);\n  });\n\n  it(\"should handle objects with different properties\", async () => {\n    const objArray = {\n      lawyers: [\n        {\n          name: \"James D. Schull\",\n          email: \"james@example.com\",\n          title: \"Personal Injury Attorney\",\n        },\n        {\n          name: \"James D. Schull\",\n          email: \"james@example.com\",\n          title: \"Personal Injury Attorney\",\n          \"phone-number\": \"123-456-7890\",\n        },\n      ],\n    };\n\n    const expected = {\n      lawyers: [\n        {\n          name: \"James D. Schull\",\n          email: \"james@example.com\",\n          title: \"Personal Injury Attorney\",\n        },\n        {\n          name: \"James D. Schull\",\n          email: \"james@example.com\",\n          title: \"Personal Injury Attorney\",\n          \"phone-number\": \"123-456-7890\",\n        },\n      ],\n    };\n\n    const result = await deduplicateObjectsArray(objArray);\n\n    expect(result).toEqual(expected);\n  });\n\n  it(\"should handle objects with same properties but different values\", async () => {\n    const objArray = {\n      lawyers: [\n        {\n          name: \"James D. Schull\",\n          email: \"james1@example.com\",\n          title: \"Personal Injury Attorney\",\n        },\n        {\n          name: \"James D. Schull\",\n          email: \"james2@example.com\",\n          title: \"Personal Injury Attorney\",\n        },\n      ],\n    };\n\n    const expected = {\n      lawyers: [\n        {\n          name: \"James D. Schull\",\n          email: \"james1@example.com\",\n          title: \"Personal Injury Attorney\",\n        },\n        {\n          name: \"James D. Schull\",\n          email: \"james2@example.com\",\n          title: \"Personal Injury Attorney\",\n        },\n      ],\n    };\n\n    const result = await deduplicateObjectsArray(objArray);\n\n    expect(result).toEqual(expected);\n  });\n\n  it(\"should handle nested identical objects\", async () => {\n    const objArray = {\n      lawyers: [\n        {\n          name: \"James D. Schull\",\n          email: null,\n          title: \"Personal Injury Attorney\",\n          \"practice-areas\": [\n            {\n              area: \"Personal Injury\",\n            },\n          ],\n        },\n        {\n          name: \"James D. Schull\",\n          email: null,\n          title: \"Personal Injury Attorney\",\n          \"practice-areas\": [\n            {\n              area: \"Personal Injury\",\n            },\n          ],\n        },\n      ],\n    };\n\n    const expected = {\n      lawyers: [\n        {\n          name: \"James D. Schull\",\n          email: null,\n          title: \"Personal Injury Attorney\",\n          \"practice-areas\": [\n            {\n              area: \"Personal Injury\",\n            },\n          ],\n        },\n      ],\n    };\n\n    const result = await deduplicateObjectsArray(objArray);\n\n    expect(result).toEqual(expected);\n  });\n});\n"]}