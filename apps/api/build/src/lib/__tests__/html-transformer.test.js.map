{"version":3,"file":"html-transformer.test.js","sourceRoot":"","sources":["../../../../src/lib/__tests__/html-transformer.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  extractLinks,\n  extractMetadata,\n  transformHtml,\n} from \"../html-transformer\";\n\ndescribe(\"HTML Transformer\", () => {\n  describe(\"extractLinks\", () => {\n    it(\"should return empty array for null or undefined input\", async () => {\n      expect(await extractLinks(null)).toEqual([]);\n      expect(await extractLinks(undefined)).toEqual([]);\n    });\n\n    it(\"should extract links from HTML content\", async () => {\n      const html = `\n        <html>\n          <body>\n            <a href=\"https://example.com\">Example</a>\n            <a href=\"https://test.com\">Test</a>\n          </body>\n        </html>\n      `;\n      const links = await extractLinks(html);\n      expect(links).toContain(\"https://example.com\");\n      expect(links).toContain(\"https://test.com\");\n    });\n\n    it(\"should handle relative links\", async () => {\n      const html = `\n        <html>\n          <body>\n            <a href=\"/path/to/page\">Relative</a>\n            <a href=\"../another/page\">Parent Path</a>\n            <a href=\"./local/page\">Local Path</a>\n            <a href=\"relative/path\">Implicit Relative</a>\n            <a href=\"?param=value\">Query Param</a>\n            <a href=\"#section\">Hash Link</a>\n          </body>\n        </html>\n      `;\n      const links = await extractLinks(html);\n      expect(links).toEqual([\n        \"/path/to/page\",\n        \"../another/page\",\n        \"./local/page\",\n        \"relative/path\",\n        \"?param=value\",\n        \"#section\",\n      ]);\n    });\n\n    it(\"should handle complex nested HTML structure\", async () => {\n      const html = `\n        <html>\n          <body>\n            <div class=\"container\">\n              <nav>\n                <ul>\n                  <li><a href=\"https://nav1.com\">Nav 1</a></li>\n                  <li><a href=\"https://nav2.com\">Nav 2</a></li>\n                </ul>\n              </nav>\n              <main>\n                <article>\n                  <p>Some text with a <a href=\"https://inline.com\">link</a></p>\n                  <div class=\"nested\">\n                    <a href=\"https://nested.com\">Nested Link</a>\n                  </div>\n                </article>\n              </main>\n            </div>\n          </body>\n        </html>\n      `;\n      const links = await extractLinks(html);\n      expect(links).toContain(\"https://nav1.com\");\n      expect(links).toContain(\"https://nav2.com\");\n      expect(links).toContain(\"https://inline.com\");\n      expect(links).toContain(\"https://nested.com\");\n    });\n\n    it(\"should handle malformed HTML gracefully\", async () => {\n      const html = `\n        <div>\n          <a href=\"https://valid.com\">Valid</a>\n          <a href=\"invalid\">Invalid</a>\n          <a>No href</a>\n          <a href=\"\">Empty href</a>\n          <a href=\"javascript:void(0)\">JavaScript href</a>\n          <a href=\"mailto:test@example.com\">Email link</a>\n        </div>\n      `;\n      const links = await extractLinks(html);\n      expect(links).toContain(\"https://valid.com\");\n      // Other links should be filtered out or handled appropriately\n    });\n  });\n\n  describe(\"extractMetadata\", () => {\n    it(\"should return empty array for null or undefined input\", async () => {\n      expect(await extractMetadata(null)).toEqual([]);\n      expect(await extractMetadata(undefined)).toEqual([]);\n    });\n\n    it(\"should extract comprehensive metadata from HTML content\", async () => {\n      const html = `\n        <html>\n          <head>\n            <title>Test Page Title</title>\n            <meta name=\"description\" content=\"Detailed page description\">\n            <meta name=\"keywords\" content=\"test,page,keywords\">\n            <meta name=\"author\" content=\"Test Author\">\n            <meta property=\"og:title\" content=\"OpenGraph Title\">\n            <meta property=\"og:description\" content=\"OpenGraph Description\">\n            <meta property=\"og:image\" content=\"https://example.com/image.jpg\">\n            <meta name=\"twitter:card\" content=\"summary\">\n            <meta name=\"twitter:title\" content=\"Twitter Title\">\n            <link rel=\"canonical\" href=\"https://example.com/canonical\">\n          </head>\n          <body></body>\n        </html>\n      `;\n      const metadata = await extractMetadata(html);\n      expect(metadata).toMatchObject({\n        \"twitter:title\": \"Twitter Title\",\n        ogImage: \"https://example.com/image.jpg\",\n        \"og:image\": \"https://example.com/image.jpg\",\n        ogDescription: \"OpenGraph Description\",\n        \"twitter:card\": \"summary\",\n        title: \"Test Page Title\",\n        ogTitle: \"OpenGraph Title\",\n        author: \"Test Author\",\n        keywords: \"test,page,keywords\",\n        \"og:title\": \"OpenGraph Title\",\n        \"og:description\": \"OpenGraph Description\",\n        description: \"Detailed page description\",\n      });\n    });\n\n    it(\"should handle metadata with special characters and encoding\", async () => {\n      const html = `\n        <html>\n          <head>\n            <title>Test &amp; Page with ©️ symbols</title>\n            <meta name=\"description\" content=\"Description with &quot;quotes&quot; and émojis 🎉\">\n            <meta property=\"og:title\" content=\"Title with < and > symbols\">\n          </head>\n          <body></body>\n        </html>\n      `;\n      const metadata = await extractMetadata(html);\n      expect(metadata.title).toContain(\"&\");\n      expect(metadata.description).toContain(\"quotes\");\n    });\n\n    it(\"should handle missing or malformed metadata gracefully\", async () => {\n      const html = `\n        <html>\n          <head>\n            <meta name=\"description\" content=\"\">\n            <meta property=\"og:title\">\n            <meta name=\"keywords\" content=\"  \">\n          </head>\n          <body></body>\n        </html>\n      `;\n      const metadata = await extractMetadata(html);\n      expect(metadata).toBeDefined();\n    });\n  });\n\n  describe(\"transformHtml\", () => {\n    it(\"should transform HTML content according to options\", async () => {\n      const options = {\n        html: \"<div><p>Test</p><span>Remove me</span></div>\",\n        url: \"https://example.com\",\n        include_tags: [\"p\"],\n        exclude_tags: [\"span\"],\n        only_main_content: true,\n      };\n\n      const result = await transformHtml(options);\n      expect(result).toContain(\"<p>\");\n      expect(result).not.toContain(\"<span>\");\n    });\n\n    it(\"should handle complex content filtering\", async () => {\n      const options = {\n        html: `\n          <div class=\"wrapper\">\n            <header>\n              <nav>Navigation</nav>\n            </header>\n            <main>\n              <article>\n                <h1>Title</h1>\n                <p>Important content</p>\n                <div class=\"ads\">Advertisement</div>\n                <aside>Sidebar</aside>\n                <div class=\"social-share\">Share buttons</div>\n              </article>\n            </main>\n            <footer>Footer content</footer>\n          </div>\n        `,\n        url: \"https://example.com\",\n        include_tags: [\"article\", \"h1\", \"p\"],\n        exclude_tags: [\"nav\", \"aside\", \"footer\", \".ads\", \".social-share\"],\n        only_main_content: true,\n      };\n\n      const result = await transformHtml(options);\n      expect(result).toContain(\"<h1>Title</h1>\");\n      expect(result).toContain(\"<p>Important content</p>\");\n      expect(result).not.toContain(\"Navigation\");\n      expect(result).not.toContain(\"Advertisement\");\n      expect(result).not.toContain(\"Share buttons\");\n      expect(result).not.toContain(\"Footer content\");\n    });\n\n    it(\"should handle nested content preservation and absolute links\", async () => {\n      const options = {\n        html: `\n          <article>\n            <div class=\"content\">\n              <h2>Section</h2>\n              <p>Text with <strong>bold</strong> and <em>emphasis</em></p>\n              <ul>\n                <li>Item 1</li>\n                <li>Item 2 <a href=\"#\">with link</a></li>\n              </ul>\n            </div>\n          </article>\n        `,\n        url: \"https://example.com\",\n        include_tags: [\"article\", \"p\", \"ul\", \"li\"],\n        exclude_tags: [],\n        only_main_content: true,\n      };\n\n      const result = await transformHtml(options);\n      expect(result).toContain(\"<strong>bold</strong>\");\n      expect(result).toContain(\"<em>emphasis</em>\");\n      expect(result).toContain('<a href=\"https://example.com/#\">');\n    });\n\n    it(\"should handle empty HTML content\", async () => {\n      const options = {\n        html: \"\",\n        url: \"https://example.com\",\n        include_tags: [],\n        exclude_tags: [],\n        only_main_content: false,\n      };\n\n      const result = await transformHtml(options);\n      expect(result).toBe(\"<html><body></body></html>\");\n    });\n\n    it(\"should handle malformed HTML\", async () => {\n      const options = {\n        html: \"<div>Unclosed div\",\n        url: \"https://example.com\",\n        include_tags: [],\n        exclude_tags: [],\n        only_main_content: false,\n      };\n\n      const result = await transformHtml(options);\n      expect(result).toBe(\"<html><body><div>Unclosed div</div></body></html>\");\n    });\n\n    it(\"should handle HTML with comments and scripts\", async () => {\n      const options = {\n        html: `\n          <div>\n            <!-- Comment -->\n            <script>alert('test');</script>\n            <p>Real content</p>\n            <style>.test { color: red; }</style>\n            <noscript>Enable JavaScript</noscript>\n          </div>\n        `,\n        url: \"https://example.com\",\n        include_tags: [\"p\"],\n        exclude_tags: [\"script\", \"style\", \"noscript\"],\n        only_main_content: true,\n      };\n\n      const result = await transformHtml(options);\n      expect(result).toContain(\"<p>Real content</p>\");\n      expect(result).not.toContain(\"alert\");\n      expect(result).not.toContain(\"color: red\");\n      expect(result).not.toContain(\"Enable JavaScript\");\n    });\n\n    it(\"should handle special characters and encoding\", async () => {\n      const options = {\n        html: `\n          <div>\n            <p>&copy; 2024</p>\n            <p>&lt;tag&gt;</p>\n            <p>Special chars: á é í ó ú ñ</p>\n            <p>Emojis: 🎉 👍 🚀</p>\n          </div>\n        `,\n        url: \"https://example.com\",\n        include_tags: [\"p\"],\n        exclude_tags: [],\n        only_main_content: true,\n      };\n\n      const result = await transformHtml(options);\n      expect(result).toContain(\"©\");\n      expect(result).toContain(\"á é í ó ú ñ\");\n      expect(result).toContain(\"🎉 👍 🚀\");\n    });\n\n    it(\"should make all URLs absolute\", async () => {\n      const options = {\n        html: `\n          <div>\n            <a href=\"https://example.com/fullurl\">hi</a>\n            <a href=\"http://example.net/fullurl\">hi</a>\n            <a href=\"/pathurl\">hi</a>\n            <a href=\"//example.net/proturl\">hi</a>\n            <a href=\"?queryurl\">hi</a>\n            <a href=\"#hashurl\">hi</a>\n            <img src=\"#q1\">\n            <img src=\"#q2\">\n          </div>\n        `,\n        url: \"https://example.com\",\n        include_tags: [],\n        exclude_tags: [],\n        only_main_content: true,\n      };\n\n      const result = await transformHtml(options);\n      console.log(result)\n      expect(result).toContain(\"https://example.com/fullurl\");\n      expect(result).toContain(\"http://example.net/fullurl\");\n      expect(result).toContain(\"https://example.com/pathurl\");\n      expect(result).toContain(\"https://example.net/proturl\");\n      expect(result).toContain(\"https://example.com/?queryurl\");\n      expect(result).toContain(\"https://example.com/#hashurl\");\n      expect(result).toContain(\"https://example.com/#q1\");\n      expect(result).toContain(\"https://example.com/#q2\");\n    });\n  });\n});\n"]}