{"version":3,"file":"spread-schema-objects.test.js","sourceRoot":"","sources":["../../../../src/lib/__tests__/spread-schema-objects.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { spreadSchemas } from \"../extract/helpers/spread-schemas\";\n\ndescribe(\"spreadSchemas\", () => {\n  it(\"should spread kyb schema (id: 1)\", async () => {\n    const keys = [\"owners\"];\n    const schema = {\n      type: \"object\",\n      properties: {\n        business: {\n          type: \"object\",\n          properties: {\n            name: { type: \"string\" },\n            registration_number: { type: \"string\" },\n            tax_id: { type: \"string\" },\n            type: { type: \"string\" },\n            industry: { type: \"string\" },\n            address: {\n              type: \"object\",\n              properties: {\n                street: { type: \"string\" },\n                city: { type: \"string\" },\n                state: { type: \"string\" },\n                country: { type: \"string\" },\n                postal_code: { type: \"string\" },\n              },\n            },\n            incorporation_date: { type: \"string\", format: \"date\" },\n            phone: { type: \"string\" },\n            email: { type: \"string\", format: \"email\" },\n          },\n        },\n        owners: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              full_name: { type: \"string\" },\n              role: { type: \"string\" },\n              address: {\n                type: \"object\",\n                properties: {\n                  street: { type: \"string\" },\n                  city: { type: \"string\" },\n                  state: { type: \"string\" },\n                  country: { type: \"string\" },\n                  postal_code: { type: \"string\" },\n                },\n              },\n              phone: { type: \"string\" },\n              email: { type: \"string\", format: \"email\" },\n            },\n          },\n        },\n      },\n    };\n\n    const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n      schema,\n      keys,\n    );\n\n    expect(singleAnswerSchema).toEqual({\n      type: \"object\",\n      properties: {\n        business: {\n          type: \"object\",\n          properties: {\n            name: { type: \"string\" },\n            registration_number: { type: \"string\" },\n            tax_id: { type: \"string\" },\n            type: { type: \"string\" },\n            industry: { type: \"string\" },\n            address: {\n              type: \"object\",\n              properties: {\n                street: { type: \"string\" },\n                city: { type: \"string\" },\n                state: { type: \"string\" },\n                country: { type: \"string\" },\n                postal_code: { type: \"string\" },\n              },\n            },\n            incorporation_date: { type: \"string\", format: \"date\" },\n            phone: { type: \"string\" },\n            email: { type: \"string\", format: \"email\" },\n          },\n        },\n      },\n    });\n\n    expect(multiEntitySchema).toEqual({\n      type: \"object\",\n      properties: {\n        owners: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              full_name: { type: \"string\" },\n              role: { type: \"string\" },\n              address: {\n                type: \"object\",\n                properties: {\n                  street: { type: \"string\" },\n                  city: { type: \"string\" },\n                  state: { type: \"string\" },\n                  country: { type: \"string\" },\n                  postal_code: { type: \"string\" },\n                },\n              },\n              phone: { type: \"string\" },\n              email: { type: \"string\", format: \"email\" },\n            },\n          },\n        },\n      },\n    });\n  });\n\n  it(\"should spread lawyers schema (id: 9)\", async () => {\n    const keys = [\"lawyers\"];\n    const schema = {\n      type: \"object\",\n      properties: {\n        lawyers: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              name: { type: \"string\" },\n              email: { type: [\"string\", \"null\"], format: \"email\" },\n              title: { type: [\"string\", \"null\"] },\n              phone_number: { type: [\"string\", \"null\"], alias: \"phone-number\" },\n              practice_areas: {\n                type: \"array\",\n                items: {\n                  type: \"object\",\n                  properties: {\n                    area: { type: \"string\" },\n                  },\n                },\n                alias: \"practice-areas\",\n              },\n            },\n          },\n        },\n      },\n    };\n\n    const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n      schema,\n      keys,\n    );\n\n    expect(singleAnswerSchema).toEqual({});\n    expect(multiEntitySchema).toEqual(schema);\n  });\n\n  it(\"shoud spread (id: 26)\", async () => {\n    const schema = {\n      type: \"object\",\n      properties: {\n        products: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              name: { type: \"string\" },\n              price: { type: \"string\" },\n              description: { type: \"string\" },\n            },\n          },\n        },\n      },\n    };\n\n    const keys = [\"products\"];\n    const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n      schema,\n      keys,\n    );\n\n    expect(singleAnswerSchema).toEqual({});\n    expect(multiEntitySchema).toEqual(schema);\n  });\n\n  it(\"shoud spread categories and products\", async () => {\n    const schema = {\n      type: \"object\",\n      properties: {\n        categories: {\n          type: \"array\",\n          items: {\n            type: \"string\",\n          },\n        },\n        products: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              name: { type: \"string\" },\n              price: { type: \"string\" },\n              description: { type: \"string\" },\n            },\n          },\n        },\n      },\n    };\n\n    const keys = [\"products\", \"categories\"];\n    const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n      schema,\n      keys,\n    );\n\n    expect(singleAnswerSchema).toEqual({});\n    expect(multiEntitySchema).toEqual(schema);\n  });\n\n  it(\"should spread (id: 29)\", async () => {\n    const schema = {\n      type: \"object\",\n      properties: {\n        is_active: { type: \"boolean\" },\n        is_partner: { type: \"boolean\" },\n        is_msp: { type: \"boolean\" },\n        is_auditor: { type: \"boolean\" },\n        is_vciso: { type: \"boolean\" },\n        offers_soc_2: { type: \"boolean\" },\n        offers_iso_27001: { type: \"boolean\" },\n        offers_cmmc: { type: \"boolean\" },\n        has_soc_2_cert: { type: \"boolean\" },\n        offers_office365: { type: \"boolean\" },\n        offers_endpoint_security: { type: \"boolean\" },\n      },\n    };\n\n    const keys = [];\n    const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n      schema,\n      keys,\n    );\n\n    expect(singleAnswerSchema).toEqual(schema);\n    expect(multiEntitySchema).toEqual({});\n  });\n\n  it(\"should spread kyb schema (id: 29)\", async () => {\n    const schema = {\n      type: \"object\",\n      properties: {\n        lawyers: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              name: { type: \"string\" },\n              email: { type: [\"string\", \"null\"] },\n              \"phone-number\": { type: \"string\" },\n              \"practice-areas\": {\n                type: \"array\",\n                items: {\n                  type: \"object\",\n                  properties: {\n                    area: { type: \"string\" },\n                  },\n                },\n              },\n              title: { type: [\"string\", \"null\"] },\n            },\n          },\n        },\n      },\n    };\n\n    const keys = [\"lawyers\"];\n    const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n      schema,\n      keys,\n    );\n\n    expect(singleAnswerSchema).toEqual({});\n    expect(multiEntitySchema).toEqual(schema);\n  });\n\n  it(\"should spread pages schema\", async () => {\n    const schema = {\n      type: \"object\",\n      properties: {\n        pages: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              title: {\n                type: \"string\",\n              },\n            },\n          },\n        },\n      },\n      required: [\"pages\"],\n    };\n\n    const keys = [\"pages\"];\n    const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n      schema,\n      keys,\n    );\n\n    expect(singleAnswerSchema).toEqual({});\n    expect(multiEntitySchema).toEqual(schema);\n  });\n\n  it(\"should spread pages schema\", async () => {\n    const schema = {\n      type: \"object\",\n      properties: {\n        pages: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              title: {\n                type: \"string\",\n              },\n            },\n          },\n        },\n      },\n      required: [\"pages\"],\n    };\n\n    const keys = [\"pages.title\"];\n    const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n      schema,\n      keys,\n    );\n\n    expect(singleAnswerSchema).toEqual({});\n    expect(multiEntitySchema).toEqual(schema);\n  });\n\n  it(\"should handle deeply nested array properties\", async () => {\n    const schema = {\n      type: \"object\",\n      properties: {\n        company: {\n          type: \"object\",\n          properties: {\n            name: { type: \"string\" },\n            departments: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  name: { type: \"string\" },\n                  employees: {\n                    type: \"array\",\n                    items: {\n                      type: \"object\",\n                      properties: {\n                        name: { type: \"string\" },\n                        role: { type: \"string\" },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      required: [\"company\"],\n    };\n\n    const keys = [\"company.departments.employees\"];\n    const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n      schema,\n      keys,\n    );\n\n    expect(singleAnswerSchema).toEqual({});\n    expect(multiEntitySchema).toEqual(schema);\n  });\n\n  it(\"should handle multiple nested paths\", async () => {\n    const schema = {\n      type: \"object\",\n      properties: {\n        user: {\n          type: \"object\",\n          properties: {\n            name: { type: \"string\" },\n            contacts: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  email: { type: \"string\" },\n                  phone: { type: \"string\" },\n                },\n              },\n            },\n          },\n        },\n        orders: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              id: { type: \"string\" },\n              items: {\n                type: \"array\",\n                items: {\n                  type: \"object\",\n                  properties: {\n                    name: { type: \"string\" },\n                    quantity: { type: \"number\" },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n      required: [\"user\", \"orders\"],\n    };\n\n    const keys = [\"user.contacts\", \"orders.items\"];\n    const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n      schema,\n      keys,\n    );\n\n    expect(singleAnswerSchema).toEqual({});\n    expect(multiEntitySchema).toEqual(schema);\n  });\n\n  it(\"should handle mixed single and array properties\", async () => {\n    const schema = {\n      type: \"object\",\n      properties: {\n        metadata: {\n          type: \"object\",\n          properties: {\n            title: { type: \"string\" },\n            description: { type: \"string\" },\n          },\n        },\n        sections: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              title: { type: \"string\" },\n              content: { type: \"string\" },\n            },\n          },\n        },\n      },\n      required: [\"metadata\", \"sections\"],\n    };\n\n    const keys = [\"sections\"];\n    const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n      schema,\n      keys,\n    );\n\n    expect(singleAnswerSchema).toEqual({\n      type: \"object\",\n      properties: {\n        metadata: {\n          type: \"object\",\n          properties: {\n            title: { type: \"string\" },\n            description: { type: \"string\" },\n          },\n        },\n      },\n      required: [\"metadata\"],\n    });\n\n    expect(multiEntitySchema).toEqual({\n      type: \"object\",\n      properties: {\n        sections: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              title: { type: \"string\" },\n              content: { type: \"string\" },\n            },\n          },\n        },\n      },\n      required: [\"sections\"],\n    });\n  });\n\n  it(\"should handle empty keys array\", async () => {\n    const schema = {\n      type: \"object\",\n      properties: {\n        name: { type: \"string\" },\n        age: { type: \"number\" },\n      },\n      required: [\"name\"],\n    };\n\n    const keys: string[] = [];\n    const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n      schema,\n      keys,\n    );\n\n    expect(singleAnswerSchema).toEqual(schema);\n    expect(multiEntitySchema).toEqual({});\n  });\n\n  it(\"should handle non-existent paths\", async () => {\n    const schema = {\n      type: \"object\",\n      properties: {\n        user: {\n          type: \"object\",\n          properties: {\n            name: { type: \"string\" },\n          },\n        },\n      },\n    };\n\n    const keys = [\"user.nonexistent.path\"];\n    const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n      schema,\n      keys,\n    );\n\n    expect(singleAnswerSchema).toEqual({});\n    expect(multiEntitySchema).toEqual(schema);\n  });\n\n  // it(\"should split nested object and array properties\", async () => {\n  //   const schema = {\n  //     type: \"object\",\n  //     properties: {\n  //       company: {\n  //         type: \"object\",\n  //         properties: {\n  //           name: { type: \"string\" },\n  //           address: {\n  //             type: \"object\",\n  //             properties: {\n  //               street: { type: \"string\" },\n  //               city: { type: \"string\" },\n  //             },\n  //           },\n  //           employees: {\n  //             type: \"array\",\n  //             items: {\n  //               type: \"object\",\n  //               properties: {\n  //                 name: { type: \"string\" },\n  //                 position: { type: \"string\" },\n  //               },\n  //             },\n  //           },\n  //         },\n  //       },\n  //     },\n  //     required: [\"company\"],\n  //   };\n\n  //   const keys = [\"company.employees\"];\n  //   const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n  //     schema,\n  //     keys,\n  //   );\n\n  //   expect(singleAnswerSchema).toEqual({\n  //     type: \"object\",\n  //     properties: {\n  //       company: {\n  //         type: \"object\",\n  //         properties: {\n  //           name: { type: \"string\" },\n  //           address: {\n  //             type: \"object\",\n  //             properties: {\n  //               street: { type: \"string\" },\n  //               city: { type: \"string\" },\n  //             },\n  //           },\n  //         },\n  //       },\n  //     },\n  //     required: [\"company\"],\n  //   });\n\n  //   expect(multiEntitySchema).toEqual({\n  //     type: \"object\",\n  //     properties: {\n  //       company: {\n  //         type: \"object\",\n  //         properties: {\n  //           employees: {\n  //             type: \"array\",\n  //             items: {\n  //               type: \"object\",\n  //               properties: {\n  //                 name: { type: \"string\" },\n  //                 position: { type: \"string\" },\n  //               },\n  //             },\n  //           },\n  //         },\n  //       },\n  //     },\n  //     required: [\"company\"],\n  //   });\n  // });\n\n  // it(\"should handle multiple root level properties with nested paths\", async () => {\n  //   const schema = {\n  //     type: \"object\",\n  //     properties: {\n  //       user: {\n  //         type: \"object\",\n  //         properties: {\n  //           id: { type: \"string\" },\n  //           profile: {\n  //             type: \"object\",\n  //             properties: {\n  //               name: { type: \"string\" },\n  //               email: { type: \"string\" },\n  //             },\n  //           },\n  //           posts: {\n  //             type: \"array\",\n  //             items: {\n  //               type: \"object\",\n  //               properties: {\n  //                 title: { type: \"string\" },\n  //                 content: { type: \"string\" },\n  //               },\n  //             },\n  //           },\n  //         },\n  //       },\n  //       settings: {\n  //         type: \"object\",\n  //         properties: {\n  //           theme: { type: \"string\" },\n  //           notifications: {\n  //             type: \"object\",\n  //             properties: {\n  //               email: { type: \"boolean\" },\n  //               push: { type: \"boolean\" },\n  //             },\n  //           },\n  //         },\n  //       },\n  //     },\n  //     required: [\"user\", \"settings\"],\n  //   };\n\n  //   const keys = [\"user.posts\", \"settings.notifications\"];\n  //   const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n  //     schema,\n  //     keys,\n  //   );\n\n  //   expect(singleAnswerSchema).toEqual({\n  //     type: \"object\",\n  //     properties: {\n  //       user: {\n  //         type: \"object\",\n  //         properties: {\n  //           id: { type: \"string\" },\n  //           profile: {\n  //             type: \"object\",\n  //             properties: {\n  //               name: { type: \"string\" },\n  //               email: { type: \"string\" },\n  //             },\n  //           },\n  //         },\n  //       },\n  //       settings: {\n  //         type: \"object\",\n  //         properties: {\n  //           theme: { type: \"string\" },\n  //         },\n  //       },\n  //     },\n  //     required: [\"user\", \"settings\"],\n  //   });\n\n  //   expect(multiEntitySchema).toEqual({\n  //     type: \"object\",\n  //     properties: {\n  //       user: {\n  //         type: \"object\",\n  //         properties: {\n  //           posts: {\n  //             type: \"array\",\n  //             items: {\n  //               type: \"object\",\n  //               properties: {\n  //                 title: { type: \"string\" },\n  //                 content: { type: \"string\" },\n  //               },\n  //             },\n  //           },\n  //         },\n  //       },\n  //       settings: {\n  //         type: \"object\",\n  //         properties: {\n  //           notifications: {\n  //             type: \"object\",\n  //             properties: {\n  //               email: { type: \"boolean\" },\n  //               push: { type: \"boolean\" },\n  //             },\n  //           },\n  //         },\n  //       },\n  //     },\n  //     required: [\"user\", \"settings\"],\n  //   });\n  // });\n\n  // it(\"should handle array properties at different nesting levels\", async () => {\n  //   const schema = {\n  //     type: \"object\",\n  //     properties: {\n  //       categories: {\n  //         type: \"array\",\n  //         items: {\n  //           type: \"object\",\n  //           properties: {\n  //             name: { type: \"string\" },\n  //             subcategories: {\n  //               type: \"array\",\n  //               items: {\n  //                 type: \"object\",\n  //                 properties: {\n  //                   name: { type: \"string\" },\n  //                   products: {\n  //                     type: \"array\",\n  //                     items: {\n  //                       type: \"object\",\n  //                       properties: {\n  //                         name: { type: \"string\" },\n  //                         price: { type: \"number\" },\n  //                       },\n  //                     },\n  //                   },\n  //                 },\n  //               },\n  //             },\n  //           },\n  //         },\n  //       },\n  //       featured: {\n  //         type: \"object\",\n  //         properties: {\n  //           category: { type: \"string\" },\n  //           items: {\n  //             type: \"array\",\n  //             items: {\n  //               type: \"object\",\n  //               properties: {\n  //                 id: { type: \"string\" },\n  //                 name: { type: \"string\" },\n  //               },\n  //             },\n  //           },\n  //         },\n  //       },\n  //     },\n  //   };\n\n  //   const keys = [\"categories.subcategories\", \"featured.items\"];\n  //   const { singleAnswerSchema, multiEntitySchema } = await spreadSchemas(\n  //     schema,\n  //     keys,\n  //   );\n\n  //   expect(singleAnswerSchema).toEqual({\n  //     type: \"object\",\n  //     properties: {\n  //       featured: {\n  //         type: \"object\",\n  //         properties: {\n  //           category: { type: \"string\" },\n  //         },\n  //       },\n  //     },\n  //   });\n\n  //   expect(multiEntitySchema).toEqual({\n  //     type: \"object\",\n  //     properties: {\n  //       categories: {\n  //         type: \"array\",\n  //         items: {\n  //           type: \"object\",\n  //           properties: {\n  //             name: { type: \"string\" },\n  //             subcategories: {\n  //               type: \"array\",\n  //               items: {\n  //                 type: \"object\",\n  //                 properties: {\n  //                   name: { type: \"string\" },\n  //                   products: {\n  //                     type: \"array\",\n  //                     items: {\n  //                       type: \"object\",\n  //                       properties: {\n  //                         name: { type: \"string\" },\n  //                         price: { type: \"number\" },\n  //                       },\n  //                     },\n  //                   },\n  //                 },\n  //               },\n  //             },\n  //           },\n  //         },\n  //       },\n  //       featured: {\n  //         type: \"object\",\n  //         properties: {\n  //           items: {\n  //             type: \"array\",\n  //             items: {\n  //               type: \"object\",\n  //               properties: {\n  //                 id: { type: \"string\" },\n  //                 name: { type: \"string\" },\n  //               },\n  //             },\n  //           },\n  //         },\n  //       },\n  //     },\n  //   });\n  // });\n});\n"]}