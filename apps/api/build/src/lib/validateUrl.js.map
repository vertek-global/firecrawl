{"version":3,"file":"validateUrl.js","sourceRoot":"","sources":["../../../src/lib/validateUrl.ts"],"names":[],"mappings":"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","sourcesContent":["export const protocolIncluded = (url: string) => {\n  // if :// not in the start of the url assume http (maybe https?)\n  // regex checks if :// appears before any .\n  return /^([^.:]+:\\/\\/)/.test(url);\n};\n\nconst getURLobj = (s: string) => {\n  // URL fails if we dont include the protocol ie google.com\n  let error = false;\n  let urlObj = {};\n  try {\n    urlObj = new URL(s);\n  } catch (err) {\n    error = true;\n  }\n  return { error, urlObj };\n};\n\nexport const checkAndUpdateURL = (url: string) => {\n  if (!protocolIncluded(url)) {\n    url = `http://${url}`;\n  }\n\n  const { error, urlObj } = getURLobj(url);\n  if (error) {\n    throw new Error(\"Invalid URL\");\n  }\n\n  const typedUrlObj = urlObj as URL;\n\n  if (typedUrlObj.protocol !== \"http:\" && typedUrlObj.protocol !== \"https:\") {\n    throw new Error(\"Invalid URL\");\n  }\n\n  return { urlObj: typedUrlObj, url: url };\n};\n\nexport const checkUrl = (url: string) => {\n  const { error, urlObj } = getURLobj(url);\n  if (error) {\n    throw new Error(\"Invalid URL\");\n  }\n\n  const typedUrlObj = urlObj as URL;\n\n  if (typedUrlObj.protocol !== \"http:\" && typedUrlObj.protocol !== \"https:\") {\n    throw new Error(\"Invalid URL\");\n  }\n\n  if ((url.split(\".\")[0].match(/:/g) || []).length !== 1) {\n    throw new Error(\"Invalid URL. Invalid protocol.\"); // for this one: http://http://example.com\n  }\n\n  return url;\n};\n\n/**\n * Same domain check\n * It checks if the domain of the url is the same as the base url\n * It accounts true for subdomains and www.subdomains\n * @param url\n * @param baseUrl\n * @returns\n */\nexport function isSameDomain(url: string, baseUrl: string) {\n  const { urlObj: urlObj1, error: error1 } = getURLobj(url);\n  const { urlObj: urlObj2, error: error2 } = getURLobj(baseUrl);\n\n  if (error1 || error2) {\n    return false;\n  }\n\n  const typedUrlObj1 = urlObj1 as URL;\n  const typedUrlObj2 = urlObj2 as URL;\n\n  const cleanHostname = (hostname: string) => {\n    return hostname.startsWith(\"www.\") ? hostname.slice(4) : hostname;\n  };\n\n  const domain1 = cleanHostname(typedUrlObj1.hostname)\n    .split(\".\")\n    .slice(-2)\n    .join(\".\");\n  const domain2 = cleanHostname(typedUrlObj2.hostname)\n    .split(\".\")\n    .slice(-2)\n    .join(\".\");\n\n  return domain1 === domain2;\n}\n\nexport function isSameSubdomain(url: string, baseUrl: string) {\n  const { urlObj: urlObj1, error: error1 } = getURLobj(url);\n  const { urlObj: urlObj2, error: error2 } = getURLobj(baseUrl);\n\n  if (error1 || error2) {\n    return false;\n  }\n\n  const typedUrlObj1 = urlObj1 as URL;\n  const typedUrlObj2 = urlObj2 as URL;\n\n  const cleanHostname = (hostname: string) => {\n    return hostname.startsWith(\"www.\") ? hostname.slice(4) : hostname;\n  };\n\n  const domain1 = cleanHostname(typedUrlObj1.hostname)\n    .split(\".\")\n    .slice(-2)\n    .join(\".\");\n  const domain2 = cleanHostname(typedUrlObj2.hostname)\n    .split(\".\")\n    .slice(-2)\n    .join(\".\");\n\n  const subdomain1 = cleanHostname(typedUrlObj1.hostname)\n    .split(\".\")\n    .slice(0, -2)\n    .join(\".\");\n  const subdomain2 = cleanHostname(typedUrlObj2.hostname)\n    .split(\".\")\n    .slice(0, -2)\n    .join(\".\");\n\n  // Check if the domains are the same and the subdomains are the same\n  return domain1 === domain2 && subdomain1 === subdomain2;\n}\n\nexport const checkAndUpdateURLForMap = (url: string) => {\n  if (!protocolIncluded(url)) {\n    url = `http://${url}`;\n  }\n  // remove last slash if present\n  if (url.endsWith(\"/\")) {\n    url = url.slice(0, -1);\n  }\n\n  const { error, urlObj } = getURLobj(url);\n  if (error) {\n    throw new Error(\"Invalid URL\");\n  }\n\n  const typedUrlObj = urlObj as URL;\n\n  if (typedUrlObj.protocol !== \"http:\" && typedUrlObj.protocol !== \"https:\") {\n    throw new Error(\"Invalid URL\");\n  }\n\n  // remove any query params\n  // url = url.split(\"?\")[0].trim();\n\n  return { urlObj: typedUrlObj, url: url };\n};\n\nexport function removeDuplicateUrls(urls: string[]): string[] {\n  const urlMap = new Map<string, string>();\n\n  for (const url of urls) {\n    const parsedUrl = new URL(url);\n    const protocol = parsedUrl.protocol;\n    const hostname = parsedUrl.hostname.replace(/^www\\./, \"\");\n    const path = parsedUrl.pathname + parsedUrl.search + parsedUrl.hash;\n\n    const key = `${hostname}${path}`;\n\n    if (!urlMap.has(key)) {\n      urlMap.set(key, url);\n    } else {\n      const existingUrl = new URL(urlMap.get(key)!);\n      const existingProtocol = existingUrl.protocol;\n\n      if (protocol === \"https:\" && existingProtocol === \"http:\") {\n        urlMap.set(key, url);\n      } else if (\n        protocol === existingProtocol &&\n        !parsedUrl.hostname.startsWith(\"www.\") &&\n        existingUrl.hostname.startsWith(\"www.\")\n      ) {\n        urlMap.set(key, url);\n      }\n    }\n  }\n\n  return [...new Set(Array.from(urlMap.values()))];\n}\n"]}