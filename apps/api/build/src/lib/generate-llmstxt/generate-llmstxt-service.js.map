{"version":3,"file":"generate-llmstxt-service.js","sourceRoot":"","sources":["../../../../src/lib/generate-llmstxt/generate-llmstxt-service.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger as _logger } from \"../logger\";\nimport { updateGeneratedLlmsTxt } from \"./generate-llmstxt-redis\";\nimport { getMapResults } from \"../../controllers/v1/map\";\nimport { z } from \"zod\";\nimport { scrapeDocument } from \"../extract/document-scraper\";\nimport {\n  getLlmsTextFromCache,\n  saveLlmsTextToCache,\n} from \"./generate-llmstxt-supabase\";\nimport { billTeam } from \"../../services/billing/credit_billing\";\nimport { logJob } from \"../../services/logging/log_job\";\nimport { getModel } from \"../generic-ai\";\nimport { generateCompletions } from \"../../scraper/scrapeURL/transformers/llmExtract\";\nimport { CostTracking } from \"../extract/extraction-service\";\nimport { getACUCTeam } from \"../../controllers/auth\";\ninterface GenerateLLMsTextServiceOptions {\n  generationId: string;\n  teamId: string;\n  url: string;\n  maxUrls: number;\n  showFullText: boolean;\n  cache?: boolean;\n  subId?: string;\n}\n\nconst descriptionSchema = z.object({\n  description: z.string(),\n  title: z.string(),\n});\n\n// Helper function to remove page separators\nfunction removePageSeparators(text: string): string {\n  return text.replace(/<\\|firecrawl-page-\\d+-lllmstxt\\|>\\n/g, \"\");\n}\n\n// Helper function to limit pages in full text\nfunction limitPages(fullText: string, maxPages: number): string {\n  const pages = fullText.split(/<\\|firecrawl-page-\\d+-lllmstxt\\|>\\n/);\n  // First element is the header, so we start from index 1\n  const limitedPages = pages.slice(0, maxPages + 1);\n  return limitedPages.join(\"\");\n}\n\n// Helper function to limit llmstxt entries\nfunction limitLlmsTxtEntries(llmstxt: string, maxEntries: number): string {\n  // Split by newlines\n  const lines = llmstxt.split('\\n');\n  \n  // Find the header line (starts with #)\n  const headerIndex = lines.findIndex(line => line.startsWith('#'));\n  if (headerIndex === -1) return llmstxt;\n  \n  // Get the header and the entries\n  const header = lines[headerIndex];\n  const entries = lines.filter(line => line.startsWith('- ['));\n  \n  // Take only the requested number of entries\n  const limitedEntries = entries.slice(0, maxEntries);\n  \n  // Reconstruct the text\n  return `${header}\\n\\n${limitedEntries.join('\\n')}`;\n}\n\nexport async function performGenerateLlmsTxt(\n  options: GenerateLLMsTextServiceOptions,\n) {\n  const { generationId, teamId, url, maxUrls = 100, showFullText, cache = true, subId } =\n    options;\n  const startTime = Date.now();\n  const logger = _logger.child({\n    module: \"generate-llmstxt\",\n    method: \"performGenerateLlmsTxt\",\n    generationId,\n    teamId,\n  });\n  const costTracking = new CostTracking();\n  const acuc = await getACUCTeam(teamId);\n\n  try {\n    // Enforce max URL limit\n    const effectiveMaxUrls = Math.min(maxUrls, 5000);\n\n    // Check cache first, unless cache is set to false\n    const cachedResult = cache ? await getLlmsTextFromCache(url, effectiveMaxUrls) : null;\n    if (cachedResult) {\n      logger.info(\"Found cached LLMs text\", { url });\n\n      // Limit pages and remove separators before returning\n      const limitedFullText = limitPages(cachedResult.llmstxt_full, effectiveMaxUrls);\n      const cleanFullText = removePageSeparators(limitedFullText);\n      \n      // Limit llmstxt entries to match maxUrls\n      const limitedLlmsTxt = limitLlmsTxtEntries(cachedResult.llmstxt, effectiveMaxUrls);\n\n      // Update final result with cached text\n      await updateGeneratedLlmsTxt(generationId, {\n        status: \"completed\",\n        generatedText: limitedLlmsTxt,\n        fullText: cleanFullText,\n        showFullText: showFullText,\n      });\n\n      return {\n        success: true,\n        data: {\n          generatedText: limitedLlmsTxt,\n          fullText: cleanFullText,\n          showFullText: showFullText,\n        },\n      };\n    }\n\n    // If not in cache, proceed with generation\n    // First, get all URLs from the map controller\n    const mapResult = await getMapResults({\n      url,\n      teamId,\n      limit: effectiveMaxUrls,\n      includeSubdomains: false,\n      ignoreSitemap: false,\n      includeMetadata: true,\n      flags: acuc?.flags ?? null,\n    });\n\n    if (!mapResult || !mapResult.links) {\n      throw new Error(`Failed to map URLs`);\n    }\n\n    _logger.debug(\"Mapping URLs\", mapResult.links);\n\n    const urls = mapResult.links;\n    let llmstxt = `# ${url} llms.txt\\n\\n`;\n    let llmsFulltxt = `# ${url} llms-full.txt\\n\\n`;\n\n    // Process URLs in batches of 10\n    for (let i = 0; i < urls.length; i += 10) {\n      const batch = urls.slice(i, i + 10);\n\n      const batchResults = await Promise.all(\n        batch.map(async (url) => {\n          _logger.debug(`Scraping URL: ${url}`);\n          try {\n            const document = await scrapeDocument(\n              {\n                url,\n                teamId,\n                origin: \"llmstxt\",\n                timeout: 30000,\n                isSingleUrl: true,\n              },\n              [],\n              logger,\n              { onlyMainContent: true },\n            );\n\n            if (!document || !document.markdown) {\n              logger.error(`Failed to scrape URL ${url}`);\n              return null;\n            }\n\n            _logger.debug(\n              `Generating description for ${document.metadata?.url}`,\n            );\n\n            const { extract } = await generateCompletions({\n              logger,\n              model: getModel(\"gpt-4o-mini\", \"openai\"),\n              options: {\n                systemPrompt: \"\",\n                mode: \"llm\",\n                schema: descriptionSchema,\n                prompt: `Generate a 9-10 word description and a 3-4 word title of the entire page based on ALL the content one will find on the page for this url: ${document.metadata?.url}. This will help in a user finding the page for its intended purpose.`,\n              },\n              markdown: document.markdown,\n              costTrackingOptions: {\n                costTracking,\n                metadata: {\n                  module: \"generate-llmstxt\",\n                  method: \"generateDescription\",\n                },\n              },\n            });\n\n            return {\n              title: extract.title,\n              description: extract.description,\n              url: document.metadata?.url,\n              markdown: document.markdown,\n            };\n          } catch (error) {\n            logger.error(`Failed to process URL ${url}`, { error });\n            return null;\n          }\n        }),\n      );\n\n      // Process successful results from batch\n      for (const result of batchResults) {\n        if (!result) continue;\n\n        llmstxt += `- [${result.title}](${result.url}): ${result.description}\\n`;\n        llmsFulltxt += `<|firecrawl-page-${i + batchResults.indexOf(result) + 1}-lllmstxt|>\\n## ${result.title}\\n${result.markdown}\\n\\n`;\n      }\n\n      // Update progress after each batch\n      await updateGeneratedLlmsTxt(generationId, {\n        status: \"processing\",\n        generatedText: llmstxt,\n        fullText: removePageSeparators(llmsFulltxt),\n      });\n    }\n\n    // After successful generation, save to cache\n    await saveLlmsTextToCache(url, llmstxt, llmsFulltxt, effectiveMaxUrls);\n\n    // Limit pages and remove separators before final update\n    const limitedFullText = limitPages(llmsFulltxt, effectiveMaxUrls);\n    const cleanFullText = removePageSeparators(limitedFullText);\n\n    // Update final result with both generated text and full text\n    await updateGeneratedLlmsTxt(generationId, {\n      status: \"completed\",\n      generatedText: llmstxt,\n      fullText: cleanFullText,\n      showFullText: showFullText,\n    });\n\n    // Log job with token usage and sources\n    await logJob({\n      job_id: generationId,\n      success: true,\n      message: \"LLMs text generation completed\",\n      num_docs: urls.length,\n      docs: [{ llmstxt: llmstxt, llmsfulltxt: llmsFulltxt }],\n      time_taken: (Date.now() - startTime) / 1000,\n      team_id: teamId,\n      mode: \"llmstxt\",\n      url: url,\n      scrapeOptions: options,\n      origin: \"api\",\n      num_tokens: 0,\n      tokens_billed: 0,\n      sources: {},\n      cost_tracking: costTracking,\n      credits_billed: urls.length,\n      zeroDataRetention: false,\n    });\n\n    // Bill team for usage\n    billTeam(teamId, subId, urls.length, logger).catch((error) => {\n      logger.error(`Failed to bill team ${teamId} for ${urls.length} urls`, {\n        teamId,\n        count: urls.length,\n        error,\n      });\n    });\n\n    return {\n      success: true,\n      data: {\n        generatedText: llmstxt,\n        fullText: cleanFullText,\n        showFullText: showFullText,\n      },\n    };\n  } catch (error: any) {\n    logger.error(\"Generate LLMs text error\", { error });\n\n    await updateGeneratedLlmsTxt(generationId, {\n      status: \"failed\",\n      error: error.message || \"Unknown error occurred\",\n    });\n\n    throw error;\n  }\n}\n"]}