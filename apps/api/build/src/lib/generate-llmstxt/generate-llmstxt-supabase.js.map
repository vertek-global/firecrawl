{"version":3,"file":"generate-llmstxt-supabase.js","sourceRoot":"","sources":["../../../../src/lib/generate-llmstxt/generate-llmstxt-supabase.ts"],"names":[],"mappings":"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","sourcesContent":["import { supabase_service } from \"../../services/supabase\";\nimport { logger } from \"../logger\";\nimport { normalizeUrl, normalizeUrlOnlyHostname } from \"../canonical-url\";\n\ninterface LlmsTextCache {\n  origin_url: string;\n  llmstxt: string;\n  llmstxt_full: string;\n  max_urls: number;\n}\n\nexport async function getLlmsTextFromCache(\n  url: string,\n  maxUrls: number,\n): Promise<LlmsTextCache | null> {\n  if (process.env.USE_DB_AUTHENTICATION !== \"true\") {\n    return null;\n  }\n\n  const originUrl = normalizeUrlOnlyHostname(url);\n\n  try {\n    const { data, error } = await supabase_service\n      .from(\"llm_texts\")\n      .select(\"*\")\n      .eq(\"origin_url\", originUrl)\n      .gte(\"max_urls\", maxUrls) // Changed to gte since we want cached results with more URLs than requested\n      .order(\"updated_at\", { ascending: false })\n      .limit(1)\n      .single();\n\n    if (error) {\n      return null;\n    }\n\n    // Check if data is older than 1 week\n    const oneWeekAgo = new Date();\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n    \n    if (!data || new Date(data.updated_at) < oneWeekAgo) {\n      return null;\n    }\n\n    return data\n  } catch (error) {\n    logger.error(\"Failed to fetch LLMs text from cache\", { error, originUrl });\n    return null;\n  }\n}\n\nexport async function saveLlmsTextToCache(\n  url: string,\n  llmstxt: string,\n  llmstxt_full: string,\n  maxUrls: number,\n): Promise<void> {\n  if (process.env.USE_DB_AUTHENTICATION !== \"true\") {\n    return;\n  }\n\n  const originUrl = normalizeUrlOnlyHostname(url);\n\n  try {\n    // First check if there's an existing entry\n    const { data: existingData } = await supabase_service\n      .from(\"llm_texts\")\n      .select(\"*\")\n      .eq(\"origin_url\", originUrl)\n      .single();\n\n    if (existingData) {\n      // Update existing entry\n      const { error } = await supabase_service\n        .from(\"llm_texts\")\n        .update({\n          llmstxt,\n          llmstxt_full,\n          max_urls: maxUrls,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"origin_url\", originUrl);\n\n      if (error) {\n        logger.error(\"Error updating LLMs text in cache\", { error, originUrl });\n      } else {\n        logger.debug(\"Successfully updated cached LLMs text\", { originUrl, maxUrls });\n      }\n    } else {\n      // Insert new entry\n      const { error } = await supabase_service\n        .from(\"llm_texts\")\n        .insert({\n          origin_url: originUrl,\n          llmstxt,\n          llmstxt_full,\n          max_urls: maxUrls,\n          updated_at: new Date().toISOString(),\n        });\n\n      if (error) {\n        logger.error(\"Error inserting LLMs text to cache\", { error, originUrl });\n      } else {\n        logger.debug(\"Successfully inserted new cached LLMs text\", { originUrl, maxUrls });\n      }\n    }\n  } catch (error) {\n    logger.error(\"Failed to save LLMs text to cache\", { error, originUrl });\n  }\n}\n"]}