{"version":3,"file":"generate-llmstxt-redis.js","sourceRoot":"","sources":["../../../../src/lib/generate-llmstxt/generate-llmstxt-redis.ts"],"names":[],"mappings":";;AAoBA,oDAIC;AAED,kDAGC;AAED,wDAcC;AAED,8DAMC;AAGD,oEAaC;AArED,gDAA4D;AAC5D,sCAA8C;AAgB9C,kBAAkB;AAClB,MAAM,cAAc,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AAE7B,KAAK,UAAU,oBAAoB,CAAC,EAAU,EAAE,IAAoB;IACzE,eAAO,CAAC,KAAK,CAAC,4BAA4B,GAAG,EAAE,GAAG,cAAc,CAAC,CAAC;IAClE,MAAM,4BAAoB,CAAC,GAAG,CAAC,aAAa,GAAG,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IACzE,MAAM,4BAAoB,CAAC,MAAM,CAAC,aAAa,GAAG,EAAE,EAAE,cAAc,CAAC,CAAC;AACxE,CAAC;AAEM,KAAK,UAAU,mBAAmB,CAAC,EAAU;IAClD,MAAM,CAAC,GAAG,MAAM,4BAAoB,CAAC,GAAG,CAAC,aAAa,GAAG,EAAE,CAAC,CAAC;IAC7D,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAClC,CAAC;AAEM,KAAK,UAAU,sBAAsB,CAC1C,EAAU,EACV,IAA6B;IAE7B,MAAM,OAAO,GAAG,MAAM,mBAAmB,CAAC,EAAE,CAAC,CAAC;IAC9C,IAAI,CAAC,OAAO;QAAE,OAAO;IAErB,MAAM,iBAAiB,GAAG;QACxB,GAAG,OAAO;QACV,GAAG,IAAI;KACR,CAAC;IAEF,MAAM,4BAAoB,CAAC,GAAG,CAAC,aAAa,GAAG,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACtF,MAAM,4BAAoB,CAAC,MAAM,CAAC,aAAa,GAAG,EAAE,EAAE,cAAc,CAAC,CAAC;AACxE,CAAC;AAEM,KAAK,UAAU,yBAAyB,CAAC,EAAU;IACxD,MAAM,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;IACrB,MAAM,GAAG,GAAG,MAAM,4BAAoB,CAAC,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC,CAAC;IAChE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,eAAe,EAAE,GAAG,GAAG,CAAC,CAAC;IAC7C,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IACrB,OAAO,CAAC,CAAC;AACX,CAAC;AAED,wCAAwC;AACjC,KAAK,UAAU,4BAA4B,CAChD,EAAU,EACV,MAA6C,EAC7C,aAAsB,EACtB,QAAiB,EACjB,KAAc;IAEd,MAAM,OAAO,GAA4B,EAAE,MAAM,EAAE,CAAC;IACpD,IAAI,aAAa,KAAK,SAAS;QAAE,OAAO,CAAC,aAAa,GAAG,aAAa,CAAC;IACvE,IAAI,QAAQ,KAAK,SAAS;QAAE,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACxD,IAAI,KAAK,KAAK,SAAS;QAAE,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;IAE/C,MAAM,sBAAsB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["import { redisEvictConnection } from \"../../services/redis\";\nimport { logger as _logger } from \"../logger\";\n\nexport interface GenerationData {\n  id: string;\n  team_id: string;\n  createdAt: number;\n  status: \"processing\" | \"completed\" | \"failed\";\n  url: string;\n  maxUrls: number;\n  showFullText: boolean;\n  cache?: boolean;\n  generatedText: string;\n  fullText: string;\n  error?: string;\n}\n\n// TTL of 24 hours\nconst GENERATION_TTL = 24 * 60 * 60;\n\nexport async function saveGeneratedLlmsTxt(id: string, data: GenerationData): Promise<void> {\n  _logger.debug(\"Saving llmstxt generation \" + id + \" to Redis...\");\n  await redisEvictConnection.set(\"generation:\" + id, JSON.stringify(data));\n  await redisEvictConnection.expire(\"generation:\" + id, GENERATION_TTL);\n}\n\nexport async function getGeneratedLlmsTxt(id: string): Promise<GenerationData | null> {\n  const x = await redisEvictConnection.get(\"generation:\" + id);\n  return x ? JSON.parse(x) : null;\n}\n\nexport async function updateGeneratedLlmsTxt(\n  id: string,\n  data: Partial<GenerationData>,\n): Promise<void> {\n  const current = await getGeneratedLlmsTxt(id);\n  if (!current) return;\n\n  const updatedGeneration = {\n    ...current,\n    ...data\n  };\n\n  await redisEvictConnection.set(\"generation:\" + id, JSON.stringify(updatedGeneration));\n  await redisEvictConnection.expire(\"generation:\" + id, GENERATION_TTL);\n}\n\nexport async function getGeneratedLlmsTxtExpiry(id: string): Promise<Date> {\n  const d = new Date();\n  const ttl = await redisEvictConnection.pttl(\"generation:\" + id);\n  d.setMilliseconds(d.getMilliseconds() + ttl);\n  d.setMilliseconds(0);\n  return d;\n}\n\n// Convenience method for status updates\nexport async function updateGeneratedLlmsTxtStatus(\n  id: string,\n  status: \"processing\" | \"completed\" | \"failed\",\n  generatedText?: string,\n  fullText?: string,\n  error?: string,\n): Promise<void> {\n  const updates: Partial<GenerationData> = { status };\n  if (generatedText !== undefined) updates.generatedText = generatedText;\n  if (fullText !== undefined) updates.fullText = fullText;\n  if (error !== undefined) updates.error = error;\n  \n  await updateGeneratedLlmsTxt(id, updates);\n}    "]}