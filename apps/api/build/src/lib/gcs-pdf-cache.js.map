{"version":3,"file":"gcs-pdf-cache.js","sourceRoot":"","sources":["../../../src/lib/gcs-pdf-cache.ts"],"names":[],"mappings":"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","sourcesContent":["import { Storage } from \"@google-cloud/storage\";\nimport { logger } from \"./logger\";\nimport crypto from \"crypto\";\n\nconst credentials = process.env.GCS_CREDENTIALS ? JSON.parse(atob(process.env.GCS_CREDENTIALS)) : undefined;\nconst PDF_CACHE_PREFIX = \"pdf-cache-v2/\";\n\n/**\n * Creates a SHA-256 hash of the PDF content to use as a cache key\n * Directly hashes the content without any conversion\n */\nexport function createPdfCacheKey(pdfContent: string | Buffer): string {\n    return crypto\n        .createHash('sha256')\n        .update(pdfContent)\n        .digest('hex');\n}\n\n/**\n * Save RunPod markdown results to GCS cache\n */\nexport async function savePdfResultToCache(\n    pdfContent: string,\n    result: { markdown: string; html: string }\n): Promise<string | null> {\n    try {\n        if (!process.env.GCS_BUCKET_NAME) {\n            return null;\n        }\n\n        const cacheKey = createPdfCacheKey(pdfContent);\n        const storage = new Storage({ credentials });\n        const bucket = storage.bucket(process.env.GCS_BUCKET_NAME);\n        const blob = bucket.file(`${PDF_CACHE_PREFIX}${cacheKey}.json`);\n\n        for (let i = 0; i < 3; i++) {\n            try {\n                await blob.save(JSON.stringify(result), {\n                    contentType: \"application/json\",\n                    metadata: {\n                        source: \"runpod_pdf_conversion\",\n                        cache_type: \"pdf_markdown\",\n                        created_at: new Date().toISOString(),\n                    }\n                });\n\n                logger.info(`Saved PDF RunPod result to GCS cache`, {\n                    cacheKey,\n                });\n\n                return cacheKey;\n            } catch (error) {\n                if (i === 2) {\n                    throw error;\n                } else {\n                    logger.error(`Error saving PDF RunPod result to GCS cache, retrying`, {\n                        error,\n                        cacheKey,\n                        i,\n                    });\n                }\n            }\n        }\n\n        return cacheKey;\n    } catch (error) {\n        logger.error(`Error saving PDF RunPod result to GCS cache`, {\n            error,\n        });\n        return null;\n    }\n}\n\n/**\n * Get cached RunPod markdown results from GCS\n */\nexport async function getPdfResultFromCache(\n    pdfContent: string\n): Promise<{ markdown: string; html: string } | null> {\n    try {\n        if (!process.env.GCS_BUCKET_NAME) {\n            return null;\n        }\n\n        const cacheKey = createPdfCacheKey(pdfContent);\n        const storage = new Storage({ credentials });\n        const bucket = storage.bucket(process.env.GCS_BUCKET_NAME);\n        const blob = bucket.file(`${PDF_CACHE_PREFIX}${cacheKey}.json`);\n\n        const [exists] = await blob.exists();\n        if (!exists) {\n            logger.debug(`PDF RunPod result not found in GCS cache`, {\n                cacheKey,\n            });\n            return null;\n        }\n\n        const [content] = await blob.download();\n        const result = JSON.parse(content.toString());\n\n        logger.info(`Retrieved PDF RunPod result from GCS cache`, {\n            cacheKey,\n        });\n\n        return {\n            ...result,\n        };\n    } catch (error) {\n        logger.error(`Error retrieving PDF RunPod result from GCS cache`, {\n            error,\n        });\n        return null;\n    }\n}"]}