{"version":3,"file":"extract-redis.js","sourceRoot":"","sources":["../../../../src/lib/extract/extract-redis.ts"],"names":[],"mappings":"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","sourcesContent":["import { redisEvictConnection } from \"../../services/redis\";\nimport { logger as _logger } from \"../logger\";\nimport { CostTracking } from \"./extraction-service\";\n\nexport enum ExtractStep {\n  INITIAL = \"initial\",\n  MAP = \"map\",\n  MAP_RERANK = \"map-rerank\",\n  MULTI_ENTITY = \"multi-entity\",\n  MULTI_ENTITY_SCRAPE = \"multi-entity-scrape\",\n  MULTI_ENTITY_AGENT_SCRAPE = \"multi-entity-agent-scrape\",\n  MULTI_ENTITY_EXTRACT = \"multi-entity-extract\",\n  SCRAPE = \"scrape\",\n  EXTRACT = \"extract\",\n  COMPLETE = \"complete\",\n}\n\nexport type ExtractedStep = {\n  step: ExtractStep;\n  startedAt: number;\n  finishedAt: number | null;\n  error?: any;\n  discoveredLinks?: string[];\n};\n\nexport type StoredExtract = {\n  id: string;\n  team_id: string;\n  createdAt: number;\n  status: \"processing\" | \"completed\" | \"failed\" | \"cancelled\";\n  error?: any;\n  showSteps?: boolean;\n  steps?: ExtractedStep[];\n  showLLMUsage?: boolean;\n  showSources?: boolean;\n  llmUsage?: number;\n  showCostTracking?: boolean;\n  costTracking?: CostTracking;\n  sources?: {\n    [key: string]: string[];\n  };\n  sessionIds?: string[];\n  tokensBilled?: number;\n  zeroDataRetention?: boolean;\n};\n\n// Reduce TTL to 6 hours instead of 24\nconst EXTRACT_TTL = 6 * 60 * 60;\n\nconst STEPS_MAX_DISCOVERED_LINKS = 100;\n\nexport async function saveExtract(id: string, extract: StoredExtract) {\n  _logger.debug(\"Saving extract \" + id + \" to Redis...\");\n  // Only store essential data\n  const minimalExtract = {\n    ...extract,\n    steps: extract.steps?.map(step => ({\n      step: step.step,\n      startedAt: step.startedAt,\n      finishedAt: step.finishedAt,\n      error: step.error,\n      // Only store first 20 discovered links per step\n      discoveredLinks: step.discoveredLinks?.slice(0, STEPS_MAX_DISCOVERED_LINKS)\n    }))\n  };\n  await redisEvictConnection.set(\"extract:\" + id, JSON.stringify(minimalExtract));\n  await redisEvictConnection.expire(\"extract:\" + id, EXTRACT_TTL);\n}\n\nexport async function getExtract(id: string): Promise<StoredExtract | null> {\n  const x = await redisEvictConnection.get(\"extract:\" + id);\n  return x ? JSON.parse(x) : null;\n}\n\nexport async function updateExtract(\n  id: string,\n  extract: Partial<StoredExtract>,\n) {\n  const current = await getExtract(id);\n  if (!current) return;\n\n  // Handle steps aggregation with cleanup\n  if (extract.steps && current.steps) {\n    // Keep only the last 5 steps to prevent unbounded growth\n    const allSteps = [...current.steps, ...extract.steps];\n    extract.steps = allSteps.slice(Math.max(0, allSteps.length - 5));\n  }\n\n  // Limit links in steps to 20 instead of 100 to reduce memory usage\n  if (extract.steps) {\n    extract.steps = extract.steps.map((step) => {\n      if (step.discoveredLinks && step.discoveredLinks.length > STEPS_MAX_DISCOVERED_LINKS) {\n        return {\n          ...step,\n          discoveredLinks: step.discoveredLinks.slice(0, STEPS_MAX_DISCOVERED_LINKS),\n        };\n      }\n      return step;\n    });\n  }\n\n  const minimalExtract = {\n    ...current,\n    ...extract,\n    steps: extract.steps?.map(step => ({\n      step: step.step,\n      startedAt: step.startedAt,\n      finishedAt: step.finishedAt,\n      error: step.error,\n      discoveredLinks: step.discoveredLinks?.slice(0, STEPS_MAX_DISCOVERED_LINKS)\n    }))\n  };\n\n  console.log(minimalExtract.sessionIds)\n\n  await redisEvictConnection.set(\"extract:\" + id, JSON.stringify(minimalExtract));\n  await redisEvictConnection.expire(\"extract:\" + id, EXTRACT_TTL);\n}\n\nexport async function getExtractExpiry(id: string): Promise<Date> {\n  const d = new Date();\n  const ttl = await redisEvictConnection.pttl(\"extract:\" + id);\n  d.setMilliseconds(d.getMilliseconds() + ttl);\n  d.setMilliseconds(0);\n  return d;\n}\n"]}