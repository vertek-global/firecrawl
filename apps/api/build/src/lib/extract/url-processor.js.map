{"version":3,"file":"url-processor.js","sourceRoot":"","sources":["../../../../src/lib/extract/url-processor.ts"],"names":[],"mappings":";;AAaA,0DA2DC;AAiBD,gCAmPC;AA3UD,kDAAyD;AACzD,gDAAqD;AACrD,wEAAwE;AACxE,mDAA4E;AAC5E,yCAAgD;AAChD,qCAAyC;AAEzC,2BAAkC;AAClC,8CAAyC;AACzC,gFAAgF;AAGzE,KAAK,UAAU,uBAAuB,CAAC,MAAc,EAAE,YAA0B;IACtF,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,IAAA,iBAAY,EAAC;YAChC,KAAK,EAAE,IAAA,qBAAQ,EAAC,QAAQ,EAAE,QAAQ,CAAC;YACnC,MAAM,EAAE,MAAM;YACd,eAAe,EAAE;gBACf,SAAS,EAAE;oBACT,QAAQ,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE;iBACnD;aACF;SACF,CAAC,CAAC;QACH,YAAY,CAAC,OAAO,CAAC;YACnB,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE;gBACR,MAAM,EAAE,SAAS;gBACjB,MAAM,EAAE,yBAAyB;aAClC;YACD,KAAK,EAAE,eAAe;YACtB,IAAI,EAAE,IAAA,0BAAa,EAAC,eAAe,EAAE,MAAM,CAAC,KAAK,EAAE,YAAY,IAAI,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,gBAAgB,IAAI,CAAC,CAAC;YAC1G,MAAM,EAAE;gBACN,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,YAAY,IAAI,CAAC;gBACtC,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,gBAAgB,IAAI,CAAC;aAC5C;SACF,CAAC,CAAC;QACH,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC;IAC/B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;QAC3D,IAAI,KAAK,EAAE,IAAI,IAAI,kBAAkB,EAAE,CAAC;YACtC,IAAI,CAAC;gBACH,MAAM,MAAM,GAAG,MAAM,IAAA,iBAAY,EAAC;oBAChC,KAAK,EAAE,IAAA,qBAAQ,EAAC,aAAa,EAAE,QAAQ,CAAC;oBACxC,MAAM,EAAE,MAAM;oBACd,eAAe,EAAE;wBACf,SAAS,EAAE;4BACT,QAAQ,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE;yBACnD;qBACF;iBACF,CAAC,CAAC;gBACH,YAAY,CAAC,OAAO,CAAC;oBACnB,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE;wBACR,MAAM,EAAE,SAAS;wBACjB,MAAM,EAAE,yBAAyB;qBAClC;oBACD,KAAK,EAAE,oBAAoB;oBAC3B,IAAI,EAAE,IAAA,0BAAa,EAAC,oBAAoB,EAAE,MAAM,CAAC,KAAK,EAAE,YAAY,IAAI,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,gBAAgB,IAAI,CAAC,CAAC;oBAC/G,MAAM,EAAE;wBACN,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,YAAY,IAAI,CAAC;wBACtC,MAAM,EAAE,MAAM,CAAC,KAAK,EAAE,gBAAgB,IAAI,CAAC;qBAC5C;iBACF,CAAC,CAAC;gBACH,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC;YAC/B,CAAC;YAAC,OAAO,aAAa,EAAE,CAAC;gBACvB,OAAO,CAAC,KAAK,CAAC,wDAAwD,EAAE,aAAa,CAAC,CAAC;gBACvF,OAAO,IAAI,CAAC;YACd,CAAC;QACH,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC;AAiBM,KAAK,UAAU,UAAU,CAC9B,OAA0B,EAC1B,SAAqB,EACrB,qBAAgD,EAChD,MAAc,EACd,YAA0B,EAC1B,SAAoB;IAEpB,MAAM,KAAK,GAAa;QACtB,GAAG,EAAE,OAAO,CAAC,GAAG;QAChB,MAAM,EAAE,QAAQ;QAChB,MAAM,EAAE;YACN,YAAY,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACvC;KACF,CAAC;IACF,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEtB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC;QAC/D,IAAI,CAAC,IAAA,wBAAY,EAAC,OAAO,CAAC,GAAG,EAAE,SAAS,CAAC,EAAE,CAAC;YAC1C,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC9B,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC9B,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC;QACvB,KAAK,CAAC,KAAK,GAAG,gBAAgB,CAAC;QAC/B,KAAK,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC/B,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAC9C,IAAI,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IAEhD,IAAI,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC;IACjC,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;QACnB,MAAM,GAAG,GAAG,MAAM,uBAAuB,CACvC,IAAA,mCAAmB,EAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,EAC5C,YAAY,CACb,CAAC;QAEF,IAAI,GAAG,EAAE,CAAC;YACR,WAAW,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC;QAC7E,CAAC;IACH,CAAC;IAED,IAAI,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE;YAC7B,MAAM,EAAE,WAAW;SACpB,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,MAAM,IAAA,mBAAa,EAAC;YACrC,GAAG,EAAE,OAAO;YACZ,MAAM,EAAE,WAAW;YACnB,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;YAC9C,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,aAAa,EAAE,KAAK;YACpB,eAAe,EAAE,IAAI;YACrB,iBAAiB,EAAE,OAAO,CAAC,iBAAiB;YAC5C,KAAK,EAAE,SAAS;SACjB,CAAC,CAAC;QAEH,IAAI,WAAW,GAAG,UAAU,CAAC,UAA2B,CAAC;QACzD,IAAI,OAAO,GAAG,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;QACtE,IAAI,UAAU,GAAG,IAAA,iCAAmB,EAAC,OAAO,CAAC,CAAC;QAC9C,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE;YAC5B,SAAS,EAAE,OAAO,CAAC,MAAM;YACzB,eAAe,EAAE,UAAU,CAAC,MAAM;SACnC,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC;QAEtD,4BAA4B;QAC5B,UAAU,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE;YACnC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,aAAa,CAAC,EAAE,CAAC;gBACpD,SAAS,CAAC,IAAI,CAAC;oBACb,GAAG,EAAE,aAAa;oBAClB,MAAM,EAAE,QAAQ;oBAChB,MAAM,EAAE;wBACN,YAAY,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;qBACvC;oBACD,gBAAgB,EAAE,KAAK;iBACxB,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,oCAAoC;QACpC,IAAI,UAAU,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;YAC3B,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;YACxC,MAAM,eAAe,GAAG,MAAM,IAAA,mBAAa,EAAC;gBAC1C,GAAG,EAAE,OAAO;gBACZ,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;gBAC9C,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,KAAK,EAAE,OAAO,CAAC,KAAK;gBACpB,aAAa,EAAE,KAAK;gBACpB,eAAe,EAAE,IAAI;gBACrB,iBAAiB,EAAE,OAAO,CAAC,iBAAiB;gBAC5C,KAAK,EAAE,SAAS;aACjB,CAAC,CAAC;YAEH,WAAW,GAAG,eAAe,CAAC,UAA2B,CAAC;YAC1D,OAAO,GAAG,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;YAClE,UAAU,GAAG,IAAA,iCAAmB,EAAC,OAAO,CAAC,CAAC;YAC1C,MAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE;gBACrC,SAAS,EAAE,OAAO,CAAC,MAAM;gBACzB,eAAe,EAAE,UAAU,CAAC,MAAM;aACnC,CAAC,CAAC;YAEH,4BAA4B;YAC5B,UAAU,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE;gBACnC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,aAAa,CAAC,EAAE,CAAC;oBACpD,SAAS,CAAC,IAAI,CAAC;wBACb,GAAG,EAAE,aAAa;wBAClB,MAAM,EAAE,QAAQ;wBAChB,OAAO,EAAE,qDAAqD;wBAC9D,MAAM,EAAE;4BACN,YAAY,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;yBACvC;wBACD,gBAAgB,EAAE,KAAK;qBACxB,CAAC,CAAC;gBACL,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC;QAEtD,4BAA4B;QAC5B,UAAU,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE;YACnC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,aAAa,CAAC,EAAE,CAAC;gBACpD,SAAS,CAAC,IAAI,CAAC;oBACb,GAAG,EAAE,aAAa;oBAClB,MAAM,EAAE,QAAQ;oBAChB,MAAM,EAAE;wBACN,YAAY,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;qBACvC;oBACD,gBAAgB,EAAE,KAAK;iBACxB,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5D,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAEnE,WAAW,GAAG;YACZ,GAAG,WAAW;YACd,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;SAC/D,CAAC;QAEF,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC7B,WAAW,GAAG,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;QAC/D,CAAC;QAED,oCAAoC;QACpC,WAAW,GAAG,WAAW,CAAC,KAAK,CAC7B,CAAC,EACD,sBAAa,CAAC,SAAS,CAAC,yBAAyB,CAClD,CAAC;QAEF,qBAAqB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAErD,IAAI,eAAe,GAAG,OAAO,CAAC,MAAM,IAAI,WAAW,CAAC;QACpD,IAAI,CAAC;YACH,MAAM,GAAG,GAAG,MAAM,uBAAuB,CACvC,IAAA,oCAAoB,EAAC,eAAe,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,EAC9D,YAAY,CACb,CAAC;YAEF,IAAI,GAAG,EAAE,CAAC;gBACR,eAAe,GAAG,GAAG,CAAC,IAAI,CAAC;YAC7B,CAAC;iBAAM,CAAC;gBACN,eAAe;oBACb,4CAA4C;wBAC5C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAC5C,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;YACnE,eAAe;gBACb,4CAA4C;oBAC5C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;oBACvC,GAAG;oBACH,OAAO,EAAE,MAAM,CAAC,CAAC,8BAA8B;QACnD,CAAC;QAED,wBAAwB;QACxB,iBAAiB;QACjB,8GAA8G;QAC9G,KAAK;QAEL,MAAM,CAAC,IAAI,CAAC,6BAA6B,EAAE;YACzC,eAAe;SAChB,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;QACnD,MAAM,cAAc,GAAG,MAAM,IAAA,6BAAkB,EAAC;YAC9C,KAAK,EAAE,WAAW;YAClB,WAAW,EAAE,eAAe;YAC5B,SAAS;YACT,aAAa,EAAE,OAAO,CAAC,aAAa;YACpC,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,eAAe,EAAE,OAAO,CAAC,eAAe;YACxC,aAAa,EAAE,OAAO,CAAC,aAAa;YACpC,YAAY;SACb,CAAC,CAAC;QACH,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;QACzC,IAAI,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC;QAC3C,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE;YAChC,SAAS,EAAE,WAAW,CAAC,MAAM;SAC9B,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC;QACrD,kEAAkE;QAClE,IAAI,WAAW,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YACrC,MAAM,cAAc,GAAG,MAAM,IAAA,6BAAkB,EAAC;gBAC9C,KAAK,EAAE,WAAW;gBAClB,WAAW,EAAE,eAAe;gBAC5B,SAAS;gBACT,aAAa,EAAE,OAAO,CAAC,aAAa;gBACpC,SAAS,EAAE,OAAO,CAAC,SAAS;gBAC5B,eAAe,EAAE,OAAO,CAAC,eAAe;gBACxC,aAAa,EAAE,OAAO,CAAC,aAAa;gBACpC,YAAY;aACb,CAAC,CAAC;YACH,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;YACzC,UAAU,IAAI,cAAc,CAAC,UAAU,CAAC;YACxC,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE;gBAChC,SAAS,EAAE,WAAW,CAAC,MAAM;aAC9B,CAAC,CAAC;QACL,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC;QAErD,cAAc;QACd,qBAAqB;QACrB,iBAAiB;QACjB,8GAA8G;QAC9G,KAAK;QACL,gDAAgD;QAChD,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAC7D,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACvC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC;QACvB,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC;QAC5B,KAAK,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC/B,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC","sourcesContent":["import { MapDocument, TeamFlags, URLTrace } from \"../../controllers/v1/types\";\nimport { getMapResults } from \"../../controllers/v1/map\";\nimport { removeDuplicateUrls } from \"../validateUrl\";\nimport { isUrlBlocked } from \"../../scraper/WebScraper/utils/blocklist\";\nimport { buildPreRerankPrompt, buildRefrasedPrompt } from \"./build-prompts\";\nimport { rerankLinksWithLLM } from \"./reranker\";\nimport { extractConfig } from \"./config\";\nimport type { Logger } from \"winston\";\nimport { generateText } from \"ai\";\nimport { getModel } from \"../generic-ai\";\nimport { calculateCost } from \"../../scraper/scrapeURL/transformers/llmExtract\";\nimport type { CostTracking } from \"./extraction-service\";\n\nexport async function generateBasicCompletion(prompt: string, costTracking: CostTracking): Promise<{ text: string } | null> {\n  try {\n    const result = await generateText({\n      model: getModel(\"gpt-4o\", \"openai\"),\n      prompt: prompt,\n      providerOptions: {\n        anthropic: {\n          thinking: { type: \"enabled\", budgetTokens: 12000 },\n        },\n      }\n    });\n    costTracking.addCall({\n      type: \"other\",\n      metadata: {\n        module: \"extract\",\n        method: \"generateBasicCompletion\",\n      },\n      model: \"openai/gpt-4o\",\n      cost: calculateCost(\"openai/gpt-4o\", result.usage?.promptTokens ?? 0, result.usage?.completionTokens ?? 0),\n      tokens: {\n        input: result.usage?.promptTokens ?? 0,\n        output: result.usage?.completionTokens ?? 0,\n      },\n    });\n    return { text: result.text };\n  } catch (error) {\n    console.error(\"Error generating basic completion:\", error);\n    if (error?.type == \"rate_limit_error\") {\n      try {\n        const result = await generateText({\n          model: getModel(\"gpt-4o-mini\", \"openai\"), \n          prompt: prompt,\n          providerOptions: {\n            anthropic: {\n              thinking: { type: \"enabled\", budgetTokens: 12000 },\n            },\n          }\n        });\n        costTracking.addCall({\n          type: \"other\",\n          metadata: {\n            module: \"extract\",\n            method: \"generateBasicCompletion\",\n          },\n          model: \"openai/gpt-4o-mini\",\n          cost: calculateCost(\"openai/gpt-4o-mini\", result.usage?.promptTokens ?? 0, result.usage?.completionTokens ?? 0),\n          tokens: {\n            input: result.usage?.promptTokens ?? 0,\n            output: result.usage?.completionTokens ?? 0,\n          },\n        });\n        return { text: result.text };\n      } catch (fallbackError) {\n        console.error(\"Error generating basic completion with fallback model:\", fallbackError);\n        return null;\n      }\n    }\n    return null;\n  }\n}\ninterface ProcessUrlOptions {\n  url: string;\n  prompt?: string;\n  schema?: any;\n  teamId: string;\n  allowExternalLinks?: boolean;\n  origin?: string;\n  limit?: number;\n  includeSubdomains?: boolean;\n  log?: any;\n  isMultiEntity: boolean;\n  reasoning: string;\n  multiEntityKeys: string[];\n  keyIndicators: string[];\n}\n\nexport async function processUrl(\n  options: ProcessUrlOptions,\n  urlTraces: URLTrace[],\n  updateExtractCallback: (links: string[]) => void,\n  logger: Logger,\n  costTracking: CostTracking,\n  teamFlags: TeamFlags,\n): Promise<string[]> {\n  const trace: URLTrace = {\n    url: options.url,\n    status: \"mapped\",\n    timing: {\n      discoveredAt: new Date().toISOString(),\n    },\n  };\n  urlTraces.push(trace);\n\n  if (!options.url.includes(\"/*\") && !options.allowExternalLinks) {\n    if (!isUrlBlocked(options.url, teamFlags)) {\n      trace.usedInCompletion = true;\n      return [options.url];\n    }\n    logger.warn(\"URL is blocked\");\n    trace.status = \"error\";\n    trace.error = \"URL is blocked\";\n    trace.usedInCompletion = false;\n    return [];\n  }\n\n  const baseUrl = options.url.replace(\"/*\", \"\");\n  let urlWithoutWww = baseUrl.replace(\"www.\", \"\");\n\n  let searchQuery = options.prompt;\n  if (options.prompt) {\n    const res = await generateBasicCompletion(\n      buildRefrasedPrompt(options.prompt, baseUrl),\n      costTracking,\n    );\n\n    if (res) {\n      searchQuery = res.text.replace('\"', \"\").replace(\"/\", \"\") ?? options.prompt;\n    }\n  }\n\n  try {\n    logger.debug(\"Running map...\", {\n      search: searchQuery,\n    });\n    const mapResults = await getMapResults({\n      url: baseUrl,\n      search: searchQuery,\n      teamId: options.teamId,\n      allowExternalLinks: options.allowExternalLinks,\n      origin: options.origin,\n      limit: options.limit,\n      ignoreSitemap: false,\n      includeMetadata: true,\n      includeSubdomains: options.includeSubdomains,\n      flags: teamFlags,\n    });\n\n    let mappedLinks = mapResults.mapResults as MapDocument[];\n    let allUrls = [...mappedLinks.map((m) => m.url), ...mapResults.links];\n    let uniqueUrls = removeDuplicateUrls(allUrls);\n    logger.debug(\"Map finished.\", {\n      linkCount: allUrls.length,\n      uniqueLinkCount: uniqueUrls.length,\n    });\n    options.log[\"uniqueUrlsLength-1\"] = uniqueUrls.length;\n\n    // Track all discovered URLs\n    uniqueUrls.forEach((discoveredUrl) => {\n      if (!urlTraces.some((t) => t.url === discoveredUrl)) {\n        urlTraces.push({\n          url: discoveredUrl,\n          status: \"mapped\",\n          timing: {\n            discoveredAt: new Date().toISOString(),\n          },\n          usedInCompletion: false,\n        });\n      }\n    });\n\n    // retry if only one url is returned\n    if (uniqueUrls.length <= 1) {\n      logger.debug(\"Running map... (pass 2)\");\n      const retryMapResults = await getMapResults({\n        url: baseUrl,\n        teamId: options.teamId,\n        allowExternalLinks: options.allowExternalLinks,\n        origin: options.origin,\n        limit: options.limit,\n        ignoreSitemap: false,\n        includeMetadata: true,\n        includeSubdomains: options.includeSubdomains,\n        flags: teamFlags,\n      });\n\n      mappedLinks = retryMapResults.mapResults as MapDocument[];\n      allUrls = [...mappedLinks.map((m) => m.url), ...mapResults.links];\n      uniqueUrls = removeDuplicateUrls(allUrls);\n      logger.debug(\"Map finished. (pass 2)\", {\n        linkCount: allUrls.length,\n        uniqueLinkCount: uniqueUrls.length,\n      });\n\n      // Track all discovered URLs\n      uniqueUrls.forEach((discoveredUrl) => {\n        if (!urlTraces.some((t) => t.url === discoveredUrl)) {\n          urlTraces.push({\n            url: discoveredUrl,\n            status: \"mapped\",\n            warning: \"Broader search. Not limiting map results to prompt.\",\n            timing: {\n              discoveredAt: new Date().toISOString(),\n            },\n            usedInCompletion: false,\n          });\n        }\n      });\n    }\n\n    options.log[\"uniqueUrlsLength-2\"] = uniqueUrls.length;\n\n    // Track all discovered URLs\n    uniqueUrls.forEach((discoveredUrl) => {\n      if (!urlTraces.some((t) => t.url === discoveredUrl)) {\n        urlTraces.push({\n          url: discoveredUrl,\n          status: \"mapped\",\n          timing: {\n            discoveredAt: new Date().toISOString(),\n          },\n          usedInCompletion: false,\n        });\n      }\n    });\n\n    const existingUrls = new Set(mappedLinks.map((m) => m.url));\n    const newUrls = uniqueUrls.filter((url) => !existingUrls.has(url));\n\n    mappedLinks = [\n      ...mappedLinks,\n      ...newUrls.map((url) => ({ url, title: \"\", description: \"\" })),\n    ];\n\n    if (mappedLinks.length === 0) {\n      mappedLinks = [{ url: baseUrl, title: \"\", description: \"\" }];\n    }\n\n    // Limit initial set of links (1000)\n    mappedLinks = mappedLinks.slice(\n      0,\n      extractConfig.RERANKING.MAX_INITIAL_RANKING_LIMIT,\n    );\n\n    updateExtractCallback(mappedLinks.map((x) => x.url));\n\n    let rephrasedPrompt = options.prompt ?? searchQuery;\n    try {\n      const res = await generateBasicCompletion(\n        buildPreRerankPrompt(rephrasedPrompt, options.schema, baseUrl),\n        costTracking,\n      );\n\n      if (res) {\n        rephrasedPrompt = res.text;\n      } else {\n        rephrasedPrompt =\n          \"Extract the data according to the schema: \" +\n          JSON.stringify(options.schema, null, 2);\n      }\n    } catch (error) {\n      console.error(\"Error generating search query from schema:\", error);\n      rephrasedPrompt =\n        \"Extract the data according to the schema: \" +\n        JSON.stringify(options.schema, null, 2) +\n        \" \" +\n        options?.prompt; // Fallback to just the domain\n    }\n\n    //   \"mapped-links.txt\",\n    //   mappedLinks,\n    //   (link, index) => `${index + 1}. URL: ${link.url}, Title: ${link.title}, Description: ${link.description}`\n    // );\n\n    logger.info(\"Generated rephrased prompt.\", {\n      rephrasedPrompt,\n    });\n\n    logger.info(\"Reranking pass 1 (threshold 0.8)...\");\n    const rerankerResult = await rerankLinksWithLLM({\n      links: mappedLinks,\n      searchQuery: rephrasedPrompt,\n      urlTraces,\n      isMultiEntity: options.isMultiEntity,\n      reasoning: options.reasoning,\n      multiEntityKeys: options.multiEntityKeys,\n      keyIndicators: options.keyIndicators,\n      costTracking,\n    });\n    mappedLinks = rerankerResult.mapDocument;\n    let tokensUsed = rerankerResult.tokensUsed;\n    logger.info(\"Reranked! (pass 1)\", {\n      linkCount: mappedLinks.length,\n    });\n    options.log[\"rerankerResult-1\"] = mappedLinks.length;\n    // 2nd Pass, useful for when the first pass returns too many links\n    if (mappedLinks.length > 100) {\n      logger.info(\"Reranking (pass 2)...\");\n      const rerankerResult = await rerankLinksWithLLM({\n        links: mappedLinks,\n        searchQuery: rephrasedPrompt,\n        urlTraces,\n        isMultiEntity: options.isMultiEntity,\n        reasoning: options.reasoning,\n        multiEntityKeys: options.multiEntityKeys,\n        keyIndicators: options.keyIndicators,\n        costTracking,\n      });\n      mappedLinks = rerankerResult.mapDocument;\n      tokensUsed += rerankerResult.tokensUsed;\n      logger.info(\"Reranked! (pass 2)\", {\n        linkCount: mappedLinks.length,\n      });\n    }\n    options.log[\"rerankerResult-2\"] = mappedLinks.length;\n\n    // dumpToFile(\n    //   \"llm-links.txt\",\n    //   mappedLinks,\n    //   (link, index) => `${index + 1}. URL: ${link.url}, Title: ${link.title}, Description: ${link.description}`\n    // );\n    // Remove title and description from mappedLinks\n    mappedLinks = mappedLinks.map((link) => ({ url: link.url }));\n    return mappedLinks.map((x) => x.url);\n  } catch (error) {\n    trace.status = \"error\";\n    trace.error = error.message;\n    trace.usedInCompletion = false;\n    return [];\n  }\n}\n"]}