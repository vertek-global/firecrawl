{"version":3,"file":"cached-docs.js","sourceRoot":"","sources":["../../../../../src/lib/extract/helpers/cached-docs.ts"],"names":[],"mappings":";;AAIA,sCAuBC;AAED,wCAgCC;AA5DD,yDAA8D;AAC9D,8DAA0D;AAEnD,KAAK,UAAU,aAAa,CAAC,IAAc,EAAE,QAAgB;IAClE,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,4BAAY,CAAC,CAAC;IAC9C,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,2BAAgB;SAC3C,IAAI,CAAC,gBAAgB,CAAC;SACtB,MAAM,CAAC,KAAK,CAAC;SACb,EAAE,CAAC,KAAK,EAAE,cAAc,CAAC;SACzB,EAAE,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IAE7B,IAAI,KAAK,EAAE,CAAC;QACV,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;QACpD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,MAAM,UAAU,GAAG,IAAI,GAAG,EAAoB,CAAC;IAC/C,IAAI,CAAC,OAAO,CAAC,CAAC,GAAQ,EAAE,EAAE;QACxB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAa,CAAC;QAC5D,MAAM,MAAM,GAAG,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,QAAQ,EAAE,CAAC;QACjD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;YAC5B,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;AACzC,CAAC;AAEM,KAAK,UAAU,cAAc,CAAC,IAAgB,EAAE,QAAgB;IACrE,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACzC,CAAC;QAED,MAAM,aAAa,GAAG,IAAA,4BAAY,EAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACrD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,2BAAgB;aAC3C,IAAI,CAAC,gBAAgB,CAAC;aACtB,MAAM,CAAC,KAAK,CAAC;aACb,EAAE,CAAC,KAAK,EAAE,aAAa,CAAC;aACxB,EAAE,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAE7B,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;YAC5D,SAAS;QACX,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACtB,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,MAAM,2BAAgB;iBAClD,IAAI,CAAC,gBAAgB,CAAC;iBACtB,MAAM,CAAC;gBACN,GAAG,EAAE,aAAa;gBAClB,GAAG,EAAE,GAAG;gBACR,SAAS,EAAE,QAAQ;aACpB,CAAC,CAAC;YAEL,IAAI,WAAW,EAAE,CAAC;gBAChB,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,WAAW,CAAC,CAAC;YACzD,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["import { Document } from \"../../../controllers/v1/types\";\nimport { supabase_service } from \"../../../services/supabase\";\nimport { normalizeUrl } from \"../../../lib/canonical-url\";\n\nexport async function getCachedDocs(urls: string[], cacheKey: string): Promise<Document[]> {\n  const normalizedUrls = urls.map(normalizeUrl);\n  const { data, error } = await supabase_service\n    .from('cached_scrapes')\n    .select('doc')\n    .in('url', normalizedUrls)\n    .eq('cache_key', cacheKey);\n\n  if (error) {\n    console.error('Error fetching cached docs:', error);\n    return [];\n  }\n\n  const uniqueDocs = new Map<string, Document>();\n  data.forEach((res: any) => {\n    const doc = JSON.parse(JSON.stringify(res.doc)) as Document;\n    const docKey = `${doc.metadata.url}-${cacheKey}`;\n    if (!uniqueDocs.has(docKey)) {\n      uniqueDocs.set(docKey, doc);\n    }\n  });\n\n  return Array.from(uniqueDocs.values());\n}\n\nexport async function saveCachedDocs(docs: Document[], cacheKey: string): Promise<void> {\n  for (const doc of docs) {\n    if (!doc.metadata.url) {\n      throw new Error(\"Document has no URL\");\n    }\n\n    const normalizedUrl = normalizeUrl(doc.metadata.url);\n    const { data, error } = await supabase_service\n      .from('cached_scrapes')\n      .select('url')\n      .eq('url', normalizedUrl)\n      .eq('cache_key', cacheKey);\n\n    if (error) {\n      console.error('Error checking existing cached doc:', error);\n      continue;\n    }\n\n    if (data.length === 0) {\n      const { error: upsertError } = await supabase_service\n        .from('cached_scrapes')\n        .upsert({\n          url: normalizedUrl,\n          doc: doc,\n          cache_key: cacheKey,\n        });\n\n      if (upsertError) {\n        console.error('Error saving cached doc:', upsertError);\n      }\n    }\n  }\n}\n"]}