{"version":3,"file":"source-tracker.js","sourceRoot":"","sources":["../../../../../src/lib/extract/helpers/source-tracker.ts"],"names":[],"mappings":";;;AAAA,gDAA6C;AAC7C,+DAAqD;AACrD,qEAAkE;AAOlE;;GAEG;AACH,MAAa,aAAa;IAChB,kBAAkB,CAAsB;IACxC,kBAAkB,CAAwB;IAElD;QACE,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,kBAAkB,GAAG,IAAI,GAAG,EAAE,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,gBAAgB,CAAC,iBAAkD,EAAE,MAAW,EAAE,gBAAyB,IAAI;QAC7G,uBAAuB;QACvB,IAAI,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC;YACjD,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACzD,WAAW,EAAE,MAAM,CAAC,OAAO;gBAC3B,GAAG,EAAE,MAAM,CAAC,GAAG;aAChB,CAAC,CAAC,CAAC;YAEJ,IAAI,aAAa,EAAE,CAAC;gBAClB,kDAAkD;gBAClD,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;gBACtE,OAAO,gBAAgB,CAAC;YAC1B,CAAC;YACD,OAAO,IAAI,CAAC,kBAAkB,CAAC;QACjC,CAAC;QAED,4CAA4C;QAC5C,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACzD,WAAW,EAAE,IAAA,+CAAsB,EAAC,MAAM,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC7D,GAAG,EAAE,MAAM,CAAC,GAAG;SAChB,CAAC,CAAC,CAAC;QAEJ,IAAI,aAAa,EAAE,CAAC;YAClB,mFAAmF;YACnF,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YAC/D,OAAO,IAAA,+CAAsB,EAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;QAC1D,CAAC;QACD,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,4BAA4B,CAAC,iBAAmD;QAC9E,IAAI,CAAC;YACH,IAAI,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE,CAAC;gBACrC,uBAAuB;gBACvB,iBAAiB,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,EAAE;oBACtC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBACrC,MAAM,eAAe,GAAG,IAAI,CAAC,kBAAkB;yBAC5C,MAAM,CAAC,MAAM,CAAC,EAAE,CACf,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC;wBACjC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,UAAe,EAAE,EAAE,CAC1C,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,OAAO,CACvC,CACF;yBACA,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAC7B,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;gBACxD,CAAC,CAAC,CAAC;YACL,CAAC;iBAAM,CAAC;gBACN,4CAA4C;gBAC5C,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;oBAC3C,iBAAiB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,EAAE;wBAC3C,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBACrC,MAAM,eAAe,GAAG,IAAI,CAAC,kBAAkB;6BAC5C,MAAM,CAAC,MAAM,CAAC,EAAE,CACf,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,UAAe,EAAE,EAAE,CAChD,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,OAAO,CACvC,CACF;6BACA,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;wBAC7B,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;oBACxD,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,2CAA2C,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACvE,CAAC;IACH,CAAC;IAED;;OAEG;IACH,sBAAsB,CACpB,iBAAmD,EACnD,eAAyB;QAEzB,IAAI,CAAC;YACH,MAAM,OAAO,GAA6B,EAAE,CAAC;YAE7C,IAAI,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE,CAAC;gBACrC,uBAAuB;gBACvB,iBAAiB,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,UAAkB,EAAE,EAAE;oBAC1D,MAAM,SAAS,GAAG,IAAI,UAAU,GAAG,CAAC;oBACpC,MAAM,WAAW,GAAG,IAAI,GAAG,EAAU,CAAC;oBAEtC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;wBACvC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC;4BACtC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,YAAiB,EAAE,EAAE;gCAC/C,IAAI,IAAA,kCAAY,EAAC,IAAI,EAAE,YAAY,CAAC,EAAE,CAAC;oCACrC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gCAC9B,CAAC;4BACH,CAAC,CAAC,CAAC;wBACL,CAAC;oBACH,CAAC,CAAC,CAAC;oBAEH,OAAO,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC/C,CAAC,CAAC,CAAC;YACL,CAAC;iBAAM,CAAC;gBACN,4CAA4C;gBAC5C,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;oBAC5B,IAAI,iBAAiB,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;wBACpE,iBAAiB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,UAAkB,EAAE,EAAE;4BAC/D,MAAM,SAAS,GAAG,GAAG,GAAG,IAAI,UAAU,GAAG,CAAC;4BAC1C,MAAM,WAAW,GAAG,IAAI,GAAG,EAAU,CAAC;4BAEtC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gCACvC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC,YAAiB,EAAE,EAAE;oCACrD,IAAI,IAAA,kCAAY,EAAC,IAAI,EAAE,YAAY,CAAC,EAAE,CAAC;wCACrC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oCAC9B,CAAC;gCACH,CAAC,CAAC,CAAC;4BACL,CAAC,CAAC,CAAC;4BAEH,OAAO,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBAC/C,CAAC,CAAC,CAAC;oBACL,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YAED,OAAO,OAAO,CAAC;QACjB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YAChE,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;CACF;AA1ID,sCA0IC","sourcesContent":["import { logger } from \"../../../lib/logger\";\nimport { areMergeable } from \"./merge-null-val-objs\";\nimport { transformArrayToObject } from \"./transform-array-to-obj\";\n\ninterface TransformedResult {\n  transformed: { [key: string]: any[] } | any[];\n  url: string;\n}\n\n/**\n * Tracks sources through the transformation, deduplication, and merging process\n */\nexport class SourceTracker {\n  private transformedResults: TransformedResult[];\n  private preDedupeSourceMap: Map<string, string[]>;\n\n  constructor() {\n    this.transformedResults = [];\n    this.preDedupeSourceMap = new Map();\n  }\n\n  /**\n   * Transform raw extraction results into a format that preserves source information\n   */\n  transformResults(extractionResults: { extract: any; url: string }[], schema: any, withTransform: boolean = true) {\n    // Handle array outputs\n    if (Array.isArray(extractionResults[0]?.extract)) {\n      this.transformedResults = extractionResults.map(result => ({\n        transformed: result.extract,\n        url: result.url\n      }));\n      \n      if (withTransform) {\n        // Combine all extracts to match original behavior\n        const combinedExtracts = extractionResults.map(r => r.extract).flat();\n        return combinedExtracts;\n      }\n      return this.transformedResults;\n    }\n\n    // Handle object outputs (original behavior)\n    this.transformedResults = extractionResults.map(result => ({\n      transformed: transformArrayToObject(schema, [result.extract]),\n      url: result.url\n    }));\n\n    if (withTransform) {\n      // Then combine all extracts and transform them together to match original behavior\n      const combinedExtracts = extractionResults.map(r => r.extract);\n      return transformArrayToObject(schema, combinedExtracts);\n    }\n    return this.transformedResults;\n  }\n\n  /**\n   * Track sources for each item before deduplication\n   */\n  trackPreDeduplicationSources(multiEntityResult: { [key: string]: any[] } | any[]) {\n    try {\n      if (Array.isArray(multiEntityResult)) {\n        // Handle array outputs\n        multiEntityResult.forEach((item: any) => {\n          const itemKey = JSON.stringify(item);\n          const matchingSources = this.transformedResults\n            .filter(result => \n              Array.isArray(result.transformed) && \n              result.transformed.some((resultItem: any) => \n                JSON.stringify(resultItem) === itemKey\n              )\n            )\n            .map(result => result.url);\n          this.preDedupeSourceMap.set(itemKey, matchingSources);\n        });\n      } else {\n        // Handle object outputs (original behavior)\n        Object.keys(multiEntityResult).forEach(key => {\n          multiEntityResult[key].forEach((item: any) => {\n            const itemKey = JSON.stringify(item);\n            const matchingSources = this.transformedResults\n              .filter(result => \n                result.transformed[key]?.some((resultItem: any) => \n                  JSON.stringify(resultItem) === itemKey\n                )\n              )\n              .map(result => result.url);\n            this.preDedupeSourceMap.set(itemKey, matchingSources);\n          });\n        });\n      }\n    } catch (error) {\n      logger.error(`Failed to track pre-deduplication sources`, { error });\n    }\n  }\n\n  /**\n   * Map sources to final deduplicated/merged items\n   */\n  mapSourcesToFinalItems(\n    multiEntityResult: { [key: string]: any[] } | any[],\n    multiEntityKeys: string[]\n  ): Record<string, string[]> {\n    try {\n      const sources: Record<string, string[]> = {};\n\n      if (Array.isArray(multiEntityResult)) {\n        // Handle array outputs\n        multiEntityResult.forEach((item: any, finalIndex: number) => {\n          const sourceKey = `[${finalIndex}]`;\n          const itemSources = new Set<string>();\n\n          this.transformedResults.forEach(result => {\n            if (Array.isArray(result.transformed)) {\n              result.transformed.forEach((originalItem: any) => {\n                if (areMergeable(item, originalItem)) {\n                  itemSources.add(result.url);\n                }\n              });\n            }\n          });\n\n          sources[sourceKey] = Array.from(itemSources);\n        });\n      } else {\n        // Handle object outputs (original behavior)\n        multiEntityKeys.forEach(key => {\n          if (multiEntityResult[key] && Array.isArray(multiEntityResult[key])) {\n            multiEntityResult[key].forEach((item: any, finalIndex: number) => {\n              const sourceKey = `${key}[${finalIndex}]`;\n              const itemSources = new Set<string>();\n\n              this.transformedResults.forEach(result => {\n                result.transformed[key]?.forEach((originalItem: any) => {\n                  if (areMergeable(item, originalItem)) {\n                    itemSources.add(result.url);\n                  }\n                });\n              });\n\n              sources[sourceKey] = Array.from(itemSources);\n            });\n          }\n        });\n      }\n\n      return sources;\n    } catch (error) {\n      logger.error(`Failed to map sources to final items`, { error });\n      return {};\n    }\n  }\n} "]}