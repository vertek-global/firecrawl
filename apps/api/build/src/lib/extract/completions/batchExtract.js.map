{"version":3,"file":"batchExtract.js","sourceRoot":"","sources":["../../../../../src/lib/extract/completions/batchExtract.ts"],"names":[],"mappings":";;AAsCA,kDA8FC;AAhID,sDAAkD;AAGlD,oDAG0B;AAC1B,iDAA4C;AAC5C,8DAA6E;AAE7E,0FAAgF;AAehF;;;;;;;;GAQG;AACI,KAAK,UAAU,mBAAmB,CAAC,OAA4B,EAAE,MAAc;IAYpF,MAAM,EACJ,iBAAiB,EACjB,KAAK,EACL,MAAM,EACN,YAAY,EACZ,GAAG,EACH,QAAQ,EACR,SAAS,EACT,SAAS,EAAE,GAAG,OAAO,CAAC;IAExB,MAAM,iBAAiB,GAA+B;QACpD,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC;YACnB,MAAM,EAAE,oCAAoC;SAC7C,CAAC;QACF,OAAO,EAAE;YACP,IAAI,EAAE,KAAK;YACX,YAAY,EAAE,IAAA,6CAA6B,EACzC,YAAY,EACZ,iBAAiB,EACjB,KAAK,CACN;YACD,MAAM,EAAE,IAAA,uCAAuB,EAAC,MAAM,CAAC;YACvC,MAAM,EAAE,iBAAiB;SAC1B;QACD,QAAQ,EAAE,IAAA,8BAAa,EAAC,GAAG,CAAC;QAC5B,iBAAiB,EAAE,IAAI;QACvB,KAAK,EAAE,IAAA,qBAAQ,EAAC,gBAAgB,EAAE,QAAQ,CAAC;QAC3C,UAAU,EAAE,IAAA,qBAAQ,EAAC,gBAAgB,EAAE,QAAQ,CAAC;QAChD,mBAAmB,EAAE;YACnB,YAAY,EAAE,OAAO,CAAC,YAAY;YAClC,QAAQ,EAAE;gBACR,MAAM,EAAE,SAAS;gBACjB,MAAM,EAAE,qBAAqB;aAC9B;SACF;KACF,CAAC;IAEF,IAAI,kBAAkB,GAAU,EAAE,CAAC;IACnC,IAAI,OAA2B,CAAC;IAChC,IAAI,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,WAAW,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,CAAC;IAC3D,IAAI,CAAC;QACH,MAAM,EACJ,kBAAkB,EAAE,CAAC,EACrB,OAAO,EAAE,CAAC,GACX,GAAG,MAAM,IAAA,gCAAW,EAAC;YACpB,cAAc,EAAE,iBAAiB;YACjC,IAAI,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,EAAE,CAAC;YACxD,QAAQ;YACR,SAAS;YACT,SAAS;SACV,CAAC,CAAC;QACH,kBAAkB,GAAG,CAAC,CAAC;QACvB,OAAO,GAAG,CAAC,CAAC;IACd,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,KAAK,YAAY,2CAAsB,EAAE,CAAC;YAC5C,MAAM,KAAK,CAAC;QACd,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;IAChD,CAAC;IAED,sBAAsB;IACtB,2DAA2D;IAC3D,iDAAiD;IACjD,KAAK;IAEL,iBAAiB;IACjB,OAAO;QACL,OAAO,EAAE,kBAAkB;QAC3B,SAAS,EAAE,CAAC;QACZ,UAAU,EAAE;YACV,YAAY,EAAE,CAAC;YACf,gBAAgB,EAAE,CAAC;YACnB,WAAW,EAAE,CAAC;YACd,KAAK,EAAE,kBAAkB;SAC1B;QACD,OAAO,EAAE,OAAO;QAChB,OAAO,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,SAAS,IAAI,EAAE,CAAC;QAC3D,eAAe,EAAE,MAAM;QACvB,SAAS,EAAE,KAAK;QAChB,oBAAoB,EAAE,WAAW;QACjC,cAAc,EAAE,UAAU;KAC3B,CAAC;AACJ,CAAC","sourcesContent":["import {\n  generateCompletions,\n  GenerateCompletionsOptions,\n} from \"../../../scraper/scrapeURL/transformers/llmExtract\";\nimport { buildDocument } from \"../build-document\";\nimport { ExtractResponse, TokenUsage } from \"../../../controllers/v1/types\";\nimport { Document } from \"../../../controllers/v1/types\";\nimport {\n  buildBatchExtractPrompt,\n  buildBatchExtractSystemPrompt,\n} from \"../build-prompts\";\nimport { getModel } from \"../../generic-ai\";\nimport { CostTracking, CostLimitExceededError } from \"../extraction-service\";\nimport fs from \"fs/promises\";\nimport { extractData } from \"../../../scraper/scrapeURL/lib/extractSmartScrape\";\nimport type { Logger } from \"winston\";\n\ntype BatchExtractOptions = {\n  multiEntitySchema: any;\n  links: string[];\n  prompt: string;\n  systemPrompt: string;\n  doc: Document;\n  useAgent: boolean;\n  extractId?: string;\n  sessionId?: string;\n  costTracking: CostTracking;\n};\n\n/**\n * Batch extract information from a list of URLs using a multi-entity schema.\n * @param multiEntitySchema - The schema for the multi-entity extraction\n * @param links - The URLs to extract information from\n * @param prompt - The prompt for the extraction\n * @param systemPrompt - The system prompt for the extraction\n * @param doc - The document to extract information from\n * @returns The completion promise\n */\nexport async function batchExtractPromise(options: BatchExtractOptions, logger: Logger): Promise<{\n  extract: any; // array of extracted data\n  numTokens: number;\n  totalUsage: TokenUsage;\n  warning?: string;\n  sources: string[];\n  smartScrapeCost: number;\n  otherCost: number;\n  smartScrapeCallCount: number;\n  otherCallCount: number;\n  sessionId?: string;\n}> {\n  const {\n    multiEntitySchema,\n    links,\n    prompt,\n    systemPrompt,\n    doc,\n    useAgent,\n    extractId,\n    sessionId } = options;\n\n  const generationOptions: GenerateCompletionsOptions = {\n    logger: logger.child({\n      method: \"extractService/generateCompletions\",\n    }),\n    options: {\n      mode: \"llm\",\n      systemPrompt: buildBatchExtractSystemPrompt(\n        systemPrompt,\n        multiEntitySchema,\n        links,\n      ),\n      prompt: buildBatchExtractPrompt(prompt),\n      schema: multiEntitySchema,\n    },\n    markdown: buildDocument(doc),\n    isExtractEndpoint: true,\n    model: getModel(\"gemini-2.5-pro\", \"vertex\"),\n    retryModel: getModel(\"gemini-2.5-pro\", \"google\"),\n    costTrackingOptions: {\n      costTracking: options.costTracking,\n      metadata: {\n        module: \"extract\",\n        method: \"batchExtractPromise\",\n      },\n    },\n  };\n\n  let extractedDataArray: any[] = [];\n  let warning: string | undefined;\n  let smCost = 0, oCost = 0, smCallCount = 0, oCallCount = 0;\n  try {\n    const {\n      extractedDataArray: e,\n      warning: w,\n    } = await extractData({\n      extractOptions: generationOptions,\n      urls: [doc.metadata.sourceURL || doc.metadata.url || \"\"],\n      useAgent,\n      extractId,\n      sessionId,\n    });\n    extractedDataArray = e;\n    warning = w;\n  } catch (error) {\n    if (error instanceof CostLimitExceededError) {\n      throw error;\n    }\n    logger.error(\"extractData failed\", { error });\n  }\n\n  // await fs.writeFile(\n  //   `logs/extractedDataArray-${crypto.randomUUID()}.json`,\n  //   JSON.stringify(extractedDataArray, null, 2),\n  // );\n\n  // TODO: fix this\n  return {\n    extract: extractedDataArray,\n    numTokens: 0,\n    totalUsage: {\n      promptTokens: 0,\n      completionTokens: 0,\n      totalTokens: 0,\n      model: \"gemini-2.0-flash\",\n    },\n    warning: warning,\n    sources: [doc.metadata.url || doc.metadata.sourceURL || \"\"],\n    smartScrapeCost: smCost,\n    otherCost: oCost,\n    smartScrapeCallCount: smCallCount,\n    otherCallCount: oCallCount,\n  };\n}\n"]}