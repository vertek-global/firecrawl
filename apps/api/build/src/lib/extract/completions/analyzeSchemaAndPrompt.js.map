{"version":3,"file":"analyzeSchemaAndPrompt.js","sourceRoot":"","sources":["../../../../../src/lib/extract/completions/analyzeSchemaAndPrompt.ts"],"names":[],"mappings":";;AAcA,wDAkFC;AAhGD,mFAG4D;AAE5D,6BAAwB;AACxB,oDAG0B;AAE1B,wDAAmD;AAG5C,KAAK,UAAU,sBAAsB,CAC1C,IAAc,EACd,MAAW,EACX,MAAc,EACd,MAAc,EACd,YAA0B;IAQ1B,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,MAAM,MAAM,GAAG,MAAM,IAAA,qCAAwB,EAAC,MAAM,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;QAC5E,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC;IAC1B,CAAC;IAED,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAE5C,MAAM,KAAK,GAAG,IAAA,qBAAQ,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAE3C,MAAM,WAAW,GAAG,OAAC;SAClB,MAAM,CAAC;QACN,aAAa,EAAE,OAAC,CAAC,OAAO,EAAE;QAC1B,eAAe,EAAE,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC;QAC3D,SAAS,EAAE,OAAC,CAAC,MAAM,EAAE;QACrB,aAAa,EAAE,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC;KACnC,CAAC;SACD,MAAM,CACL,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,aAAa,IAAI,CAAC,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,EACvD,gDAAgD,CACjD,CAAC;IAEJ,IAAI,CAAC;QACH,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,IAAA,gCAAmB,EAAC;YAChE,MAAM;YACN,OAAO,EAAE;gBACP,IAAI,EAAE,KAAK;gBACX,MAAM,EAAE,WAAW;gBACnB,MAAM,EAAE,IAAA,4CAA4B,EAAC,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC;gBAChE,YAAY,EAAE,IAAA,wCAAwB,GAAE;aACzC;YACD,QAAQ,EAAE,EAAE;YACZ,KAAK;YACL,mBAAmB,EAAE;gBACnB,YAAY;gBACZ,QAAQ,EAAE;oBACR,MAAM,EAAE,SAAS;oBACjB,MAAM,EAAE,wBAAwB;iBACjC;aACF;SACF,CAAC,CAAC;QAEH,MAAM,EAAE,aAAa,EAAE,eAAe,EAAE,SAAS,EAAE,aAAa,EAAE,GAChE,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAE5B,OAAO;YACL,aAAa;YACb,eAAe;YACf,SAAS;YACT,aAAa;YACb,UAAU,EAAE,UAAU;SACvB,CAAC;IACJ,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,MAAM,CAAC,IAAI,CAAC,wDAAwD,EAAE;YACpE,KAAK,EAAE,CAAC;SACT,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,aAAa,EAAE,KAAK;QACpB,eAAe,EAAE,EAAE;QACnB,SAAS,EAAE,EAAE;QACb,aAAa,EAAE,EAAE;QACjB,UAAU,EAAE;YACV,YAAY,EAAE,CAAC;YACf,gBAAgB,EAAE,CAAC;YACnB,WAAW,EAAE,CAAC;YACd,KAAK,EAAE,KAAK,CAAC,OAAO;SACrB;KACF,CAAC;AACJ,CAAC","sourcesContent":["import {\n  generateCompletions,\n  generateSchemaFromPrompt,\n} from \"../../../scraper/scrapeURL/transformers/llmExtract\";\nimport { TokenUsage } from \"../../../controllers/v1/types\";\nimport { z } from \"zod\";\nimport {\n  buildAnalyzeSchemaPrompt,\n  buildAnalyzeSchemaUserPrompt,\n} from \"../build-prompts\";\nimport { jsonSchema } from \"ai\";\nimport { getModel } from \"../../../lib/generic-ai\";\nimport { Logger } from \"winston\";\nimport { CostTracking } from \"../extraction-service\";\nexport async function analyzeSchemaAndPrompt(\n  urls: string[],\n  schema: any,\n  prompt: string,\n  logger: Logger,\n  costTracking: CostTracking,\n): Promise<{\n  isMultiEntity: boolean;\n  multiEntityKeys: string[];\n  reasoning: string;\n  keyIndicators: string[];\n  tokenUsage: TokenUsage;\n}> {\n  if (!schema) {\n    const genRes = await generateSchemaFromPrompt(prompt, logger, costTracking);\n    schema = genRes.extract;\n  }\n\n  const schemaString = JSON.stringify(schema);\n\n  const model = getModel(\"gpt-4o\", \"openai\");\n\n  const checkSchema = z\n    .object({\n      isMultiEntity: z.boolean(),\n      multiEntityKeys: z.array(z.string()).optional().default([]),\n      reasoning: z.string(),\n      keyIndicators: z.array(z.string()),\n    })\n    .refine(\n      (x) => !x.isMultiEntity || x.multiEntityKeys.length > 0,\n      \"isMultiEntity was true, but no multiEntityKeys\",\n    );\n\n  try {\n    const { extract: result, totalUsage } = await generateCompletions({\n      logger,\n      options: {\n        mode: \"llm\",\n        schema: checkSchema,\n        prompt: buildAnalyzeSchemaUserPrompt(schemaString, prompt, urls),\n        systemPrompt: buildAnalyzeSchemaPrompt(),\n      },\n      markdown: \"\",\n      model,\n      costTrackingOptions: {\n        costTracking,\n        metadata: {\n          module: \"extract\",\n          method: \"analyzeSchemaAndPrompt\",\n        },\n      },\n    });\n\n    const { isMultiEntity, multiEntityKeys, reasoning, keyIndicators } =\n      checkSchema.parse(result);\n\n    return {\n      isMultiEntity,\n      multiEntityKeys,\n      reasoning,\n      keyIndicators,\n      tokenUsage: totalUsage,\n    };\n  } catch (e) {\n    logger.warn(\"(analyzeSchemaAndPrompt) Error parsing schema analysis\", {\n      error: e,\n    });\n  }\n\n  return {\n    isMultiEntity: false,\n    multiEntityKeys: [],\n    reasoning: \"\",\n    keyIndicators: [],\n    tokenUsage: {\n      promptTokens: 0,\n      completionTokens: 0,\n      totalTokens: 0,\n      model: model.modelId,\n    },\n  };\n}\n"]}