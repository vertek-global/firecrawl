{"version":3,"file":"checkShouldExtract.js","sourceRoot":"","sources":["../../../../../src/lib/extract/completions/checkShouldExtract.ts"],"names":[],"mappings":";;AAWA,gDAsCC;AAjDD,gDAA6C;AAC7C,sDAAkD;AAElD,mFAAyF;AACzF,oDAG0B;AAC1B,wDAAmD;AAG5C,KAAK,UAAU,kBAAkB,CACtC,MAAc,EACd,iBAAsB,EACtB,GAAa,EACb,YAA0B;IAE1B,MAAM,kBAAkB,GAAG,MAAM,IAAA,gCAAmB,EAAC;QACnD,MAAM,EAAE,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,mCAAmC,EAAE,CAAC;QACrE,OAAO,EAAE;YACP,IAAI,EAAE,KAAK;YACX,YAAY,EAAE,IAAA,8CAA8B,GAAE;YAC9C,MAAM,EAAE,IAAA,4CAA4B,EAAC,MAAM,EAAE,iBAAiB,CAAC;YAC/D,MAAM,EAAE;gBACN,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE;oBACV,OAAO,EAAE;wBACP,IAAI,EAAE,SAAS;qBAChB;iBACF;gBACD,QAAQ,EAAE,CAAC,SAAS,CAAC;aACtB;SACF;QACD,QAAQ,EAAE,IAAA,8BAAa,EAAC,GAAG,CAAC;QAC5B,iBAAiB,EAAE,IAAI;QACvB,KAAK,EAAE,IAAA,qBAAQ,EAAC,aAAa,EAAE,QAAQ,CAAC;QACxC,mBAAmB,EAAE;YACnB,YAAY;YACZ,QAAQ,EAAE;gBACR,MAAM,EAAE,SAAS;gBACjB,MAAM,EAAE,oBAAoB;aAC7B;SACF;KACF,CAAC,CAAC;IAEH,OAAO;QACL,UAAU,EAAE,kBAAkB,CAAC,UAAU;QACzC,OAAO,EAAE,kBAAkB,CAAC,OAAO,CAAC,SAAS,CAAC;KAC/C,CAAC;AACJ,CAAC","sourcesContent":["import { logger } from \"../../../lib/logger\";\nimport { buildDocument } from \"../build-document\";\nimport { Document, TokenUsage } from \"../../../controllers/v1/types\";\nimport { generateCompletions } from \"../../../scraper/scrapeURL/transformers/llmExtract\";\nimport {\n  buildShouldExtractSystemPrompt,\n  buildShouldExtractUserPrompt,\n} from \"../build-prompts\";\nimport { getModel } from \"../../../lib/generic-ai\";\nimport { CostTracking } from \"../extraction-service\";\n\nexport async function checkShouldExtract(\n  prompt: string,\n  multiEntitySchema: any,\n  doc: Document,\n  costTracking: CostTracking,\n): Promise<{ tokenUsage: TokenUsage; extract: boolean; }> {\n  const shouldExtractCheck = await generateCompletions({\n    logger: logger.child({ method: \"extractService/checkShouldExtract\" }),\n    options: {\n      mode: \"llm\",\n      systemPrompt: buildShouldExtractSystemPrompt(),\n      prompt: buildShouldExtractUserPrompt(prompt, multiEntitySchema),\n      schema: {\n        type: \"object\",\n        properties: {\n          extract: {\n            type: \"boolean\",\n          },\n        },\n        required: [\"extract\"],\n      },\n    },\n    markdown: buildDocument(doc),\n    isExtractEndpoint: true,\n    model: getModel(\"gpt-4o-mini\", \"openai\"),\n    costTrackingOptions: {\n      costTracking,\n      metadata: {\n        module: \"extract\",\n        method: \"checkShouldExtract\",\n      },\n    },\n  });\n\n  return {\n    tokenUsage: shouldExtractCheck.totalUsage,\n    extract: shouldExtractCheck.extract[\"extract\"],\n  };\n}\n"]}