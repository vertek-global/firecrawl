{"version":3,"file":"reranker.js","sourceRoot":"","sources":["../../../../src/lib/extract/reranker.ts"],"names":[],"mappings":"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","sourcesContent":["import { MapDocument, TeamFlags, URLTrace } from \"../../controllers/v1/types\";\nimport { performRanking } from \"../ranker\";\nimport { isUrlBlocked } from \"../../scraper/WebScraper/utils/blocklist\";\nimport { logger } from \"../logger\";\nimport { CohereClient } from \"cohere-ai\";\nimport { extractConfig } from \"./config\";\nimport { generateCompletions } from \"../../scraper/scrapeURL/transformers/llmExtract\";\nimport { buildRerankerUserPrompt } from \"./build-prompts\";\nimport { buildRerankerSystemPrompt } from \"./build-prompts\";\nimport { dumpToFile } from \"./helpers/dump-to-file\";\nimport { getModel } from \"../generic-ai\";\nimport fs from \"fs/promises\";\nimport { CostTracking } from \"./extraction-service\";\n\nconst THRESHOLD_FOR_SINGLEPAGE = 0.6;\nconst THRESHOLD_FOR_MULTIENTITY = 0.45;\n\nconst cohere = new CohereClient({\n  token: process.env.COHERE_API_KEY,\n});\n\ninterface RankingResult {\n  mappedLinks: MapDocument[];\n  linksAndScores: {\n    link: string;\n    linkWithContext: string;\n    score: number;\n    originalIndex: number;\n  }[];\n}\n\nexport async function rerankDocuments(\n  documents: (string | Record<string, string>)[],\n  query: string,\n  topN = 3,\n  model = \"rerank-english-v3.0\",\n) {\n  const rerank = await cohere.v2.rerank({\n    documents,\n    query,\n    topN,\n    model,\n    returnDocuments: true,\n  });\n\n  return rerank.results\n    .sort((a, b) => b.relevanceScore - a.relevanceScore)\n    .map((x) => ({\n      document: x.document,\n      index: x.index,\n      relevanceScore: x.relevanceScore,\n    }));\n}\n\nexport async function rerankLinks(\n  mappedLinks: MapDocument[],\n  searchQuery: string,\n  urlTraces: URLTrace[],\n  flags: TeamFlags,\n): Promise<MapDocument[]> {\n  // console.log(\"Going to rerank links\");\n  const mappedLinksRerank = mappedLinks.map(\n    (x) => `url: ${x.url}, title: ${x.title}, description: ${x.description}`,\n  );\n\n  const linksAndScores = await performRanking(\n    mappedLinksRerank,\n    mappedLinks.map((l) => l.url),\n    searchQuery,\n  );\n\n  // First try with high threshold\n  let filteredLinks = filterAndProcessLinks(\n    mappedLinks,\n    linksAndScores,\n    extractConfig.RERANKING.INITIAL_SCORE_THRESHOLD_FOR_RELEVANCE,\n    flags,\n  );\n\n  // If we don't have enough high-quality links, try with lower threshold\n  if (filteredLinks.length < extractConfig.RERANKING.MIN_REQUIRED_LINKS) {\n    logger.info(\n      `Only found ${filteredLinks.length} links with score > ${extractConfig.RERANKING.INITIAL_SCORE_THRESHOLD_FOR_RELEVANCE}. Trying lower threshold...`,\n    );\n    filteredLinks = filterAndProcessLinks(\n      mappedLinks,\n      linksAndScores,\n      extractConfig.RERANKING.FALLBACK_SCORE_THRESHOLD_FOR_RELEVANCE,\n      flags,\n    );\n\n    if (filteredLinks.length === 0) {\n      // If still no results, take top N results regardless of score\n      logger.warn(\n        `No links found with score > ${extractConfig.RERANKING.FALLBACK_SCORE_THRESHOLD_FOR_RELEVANCE}. Taking top ${extractConfig.RERANKING.MIN_REQUIRED_LINKS} results.`,\n      );\n      filteredLinks = linksAndScores\n        .sort((a, b) => b.score - a.score)\n        .slice(0, extractConfig.RERANKING.MIN_REQUIRED_LINKS)\n        .map((x) => mappedLinks.find((link) => link.url === x.link))\n        .filter(\n          (x): x is MapDocument =>\n            x !== undefined && x.url !== undefined && !isUrlBlocked(x.url, flags),\n        );\n    }\n  }\n\n  // Update URL traces with relevance scores and mark filtered out URLs\n  linksAndScores.forEach((score) => {\n    const trace = urlTraces.find((t) => t.url === score.link);\n    if (trace) {\n      trace.relevanceScore = score.score;\n      // If URL didn't make it through filtering, mark it as filtered out\n      if (!filteredLinks.some((link) => link.url === score.link)) {\n        trace.warning = `Relevance score ${score.score} below threshold`;\n        trace.usedInCompletion = false;\n      }\n    }\n  });\n\n  const rankedLinks = filteredLinks.slice(\n    0,\n    extractConfig.RERANKING.MAX_RANKING_LIMIT_FOR_RELEVANCE,\n  );\n\n  // Mark URLs that will be used in completion\n  rankedLinks.forEach((link) => {\n    const trace = urlTraces.find((t) => t.url === link.url);\n    if (trace) {\n      trace.usedInCompletion = true;\n    }\n  });\n\n  // Mark URLs that were dropped due to ranking limit\n  filteredLinks\n    .slice(extractConfig.RERANKING.MAX_RANKING_LIMIT_FOR_RELEVANCE)\n    .forEach((link) => {\n      const trace = urlTraces.find((t) => t.url === link.url);\n      if (trace) {\n        trace.warning = \"Excluded due to ranking limit\";\n        trace.usedInCompletion = false;\n      }\n    });\n\n  // console.log(\"Reranked links: \", rankedLinks.length);\n\n  return rankedLinks;\n}\n\nfunction filterAndProcessLinks(\n  mappedLinks: MapDocument[],\n  linksAndScores: {\n    link: string;\n    linkWithContext: string;\n    score: number;\n    originalIndex: number;\n  }[],\n  threshold: number,\n  flags: TeamFlags,\n): MapDocument[] {\n  return linksAndScores\n    .filter((x) => x.score > threshold)\n    .map((x) => mappedLinks.find((link) => link.url === x.link))\n    .filter(\n      (x): x is MapDocument =>\n        x !== undefined && x.url !== undefined && !isUrlBlocked(x.url, flags),\n    );\n}\n\nexport type RerankerResult = {\n  mapDocument: (MapDocument & { relevanceScore?: number; reason?: string })[];\n  tokensUsed: number;\n  cost: number;\n};\n\nexport type RerankerOptions = {\n  links: MapDocument[];\n  searchQuery: string;\n  urlTraces: URLTrace[];\n  isMultiEntity: boolean;\n  reasoning: string;\n  multiEntityKeys: string[];\n  keyIndicators: string[];\n  costTracking: CostTracking;\n};\n\nexport async function rerankLinksWithLLM(\n  options: RerankerOptions,\n): Promise<RerankerResult> {\n  const {\n    links,\n    searchQuery,\n    urlTraces,\n    isMultiEntity,\n    reasoning,\n    multiEntityKeys,\n    keyIndicators,\n  } = options;\n  const chunkSize = 5000;\n  const chunks: MapDocument[][] = [];\n  const TIMEOUT_MS = 60000;\n  const MAX_RETRIES = 2;\n  let totalTokensUsed = 0;\n\n  // await fs.writeFile(\n  //   `logs/links-${crypto.randomUUID()}.txt`,\n  //   JSON.stringify(links, null, 2),\n  // );\n\n  // Split links into chunks of 200\n  for (let i = 0; i < links.length; i += chunkSize) {\n    chunks.push(links.slice(i, i + chunkSize));\n  }\n\n  // console.log(`Total links: ${mappedLinks.length}, Number of chunks: ${chunks.length}`);\n\n  const schema = {\n    type: \"object\",\n    properties: {\n      relevantLinks: {\n        type: \"array\",\n        items: {\n          type: \"object\",\n          properties: {\n            url: { type: \"string\" },\n            relevanceScore: { type: \"number\" },\n            reason: {\n              type: \"string\",\n              description:\n                \"The reason why you chose the score for this link given the intent.\",\n            },\n          },\n          required: [\"url\", \"relevanceScore\", \"reason\"],\n        },\n      },\n    },\n    required: [\"relevantLinks\"],\n  };\n\n  let totalCost = 0;\n\n  const results = await Promise.all(\n    chunks.map(async (chunk, chunkIndex) => {\n      // console.log(`Processing chunk ${chunkIndex + 1}/${chunks.length} with ${chunk.length} links`);\n\n      const linksContent = chunk\n        .map(\n          (link) =>\n            `URL: ${link.url}${link.title ? `\\nTitle: ${link.title}` : \"\"}${link.description ? `\\nDescription: ${link.description}` : \"\"}`,\n        )\n        .join(\"\\n\\n\");\n\n      // fs.writeFile(\n      //   `logs/links-content-${crypto.randomUUID()}.txt`,\n      //   linksContent,\n      // );\n\n      for (let retry = 0; retry <= MAX_RETRIES; retry++) {\n        try {\n          const timeoutPromise = new Promise<null>((resolve) => {\n            setTimeout(() => resolve(null), TIMEOUT_MS);\n          });\n\n          const systemPrompt = `You are analyzing URLs for ${isMultiEntity ? \"collecting multiple items\" : \"specific information\"}.\n          The user's query is: ${searchQuery}\n          ${\n            isMultiEntity\n              ? `IMPORTANT: This is a multi-entity extraction task looking for ${multiEntityKeys.join(\", \")}.\n               Score URLs higher if they contain ANY instance of the target entities.\n               Key indicators to look for: ${keyIndicators.join(\", \")}`\n              : `IMPORTANT: This is a specific information task.\n               Score URLs based on precision and relevance to answering the query.`\n          }\n        \n          Scoring guidelines:\n          ${\n            isMultiEntity\n              ? `\n          - 1.0: Contains ANY instance of target entities, even just one. Give this score if page has any relevant entity. If you are not sure if this page is relevant or not, give it a score of 1.0\n          - 0.8: Contains entity but may be incomplete information\n          - 0.6: Mentions entity type but no clear instance\n          - 0.4: Only tangentially related to entity type\n          - Below 0.4: No mention of relevant entities, or duplicates\n          \n          Reason: ${reasoning}\n          `\n              : `\n          - 1.0: Contains direct, authoritative answer to query. Give this score if unsure about relevance. If you are not sure if this page is relevant or not, give it a score of 1.0\n          - 0.8: Contains information that directly helps answer the query\n          - 0.6: Contains related information that partially answers query\n          - Below 0.6: Information too general or not focused on query\n          `\n          }`;\n\n          // dumpToFile(new Date().toISOString(),[buildRerankerSystemPrompt(), buildRerankerUserPrompt(searchQuery), schema, linksContent])\n          // const gemini = getGemini();\n          // const model = getGemini()\n          let completion: any;\n          try {\n            const completionPromise = generateCompletions({\n              model: getModel(\"gemini-2.5-pro\", \"vertex\"),\n              retryModel: getModel(\"gemini-2.5-pro\", \"google\"),\n              logger: logger.child({\n                method: \"rerankLinksWithLLM\",\n                chunk: chunkIndex + 1,\n                retry,\n              }),\n              options: {\n                mode: \"llm\",\n                systemPrompt: systemPrompt,\n                prompt: buildRerankerUserPrompt(searchQuery),\n                schema: schema,\n                // temperature: isMultiEntity ? 0.5 : 0.3,\n              },\n              // providerOptions: {\n              //   anthropic: {\n              //     thinking: { type: 'enabled', budgetTokens: 12000 },\n              //     tool_choice: \"auto\",\n              //   },\n              // },\n              markdown: linksContent,\n              isExtractEndpoint: true,\n              costTrackingOptions: {\n                costTracking: options.costTracking,\n                metadata: {\n                  module: \"extract\",\n                  method: \"rerankLinksWithLLM\",\n                },\n              },\n            });\n\n            completion = await completionPromise;\n            totalCost += completion.cost;\n          } catch (error) {\n            console.warn(\n              `Error processing chunk ${chunkIndex + 1} attempt ${retry + 1}:`,\n              error,\n            );\n          }\n\n          // await fs.writeFile(\n          //   `logs/reranker-${crypto.randomUUID()}.json`,\n          //   JSON.stringify(completion, null, 2),\n          // );\n\n          if (!completion) {\n            // console.log(`Chunk ${chunkIndex + 1}: Timeout on attempt ${retry + 1}`);\n            continue;\n          }\n\n          if (!completion.extract?.relevantLinks) {\n            // console.warn(`Chunk ${chunkIndex + 1}: No relevant links found in completion response`);\n            return [];\n          }\n\n          totalTokensUsed += completion.numTokens || 0;\n          // console.log(`Chunk ${chunkIndex + 1}: Found ${completion.extract.relevantLinks.length} relevant links`);\n          return completion.extract.relevantLinks;\n        } catch (error) {\n          console.warn(\n            `Error processing chunk ${chunkIndex + 1} attempt ${retry + 1}:`,\n            error,\n          );\n          if (retry === MAX_RETRIES) {\n            // console.log(`Chunk ${chunkIndex + 1}: Max retries reached, returning empty array`);\n            return [];\n          }\n        }\n      }\n      return [];\n    }),\n  );\n\n  // console.log(`Processed ${results.length} chunks`);\n\n  // Flatten results and sort by relevance score\n  const flattenedResults = results\n    .flat()\n    .sort((a, b) => b.relevanceScore - a.relevanceScore);\n  // console.log(`Total relevant links found: ${flattenedResults.length}`);\n\n  // Map back to MapDocument format, keeping ALL links for testing\n  const relevantLinks = flattenedResults\n    .map((result) => {\n      if (\n        result.relevanceScore >\n        (isMultiEntity ? THRESHOLD_FOR_MULTIENTITY : THRESHOLD_FOR_SINGLEPAGE)\n      ) {\n        const link = links.find((link) => link.url === result.url);\n        if (link) {\n          return {\n            ...link,\n            relevanceScore: result.relevanceScore\n              ? parseFloat(result.relevanceScore)\n              : 0,\n            reason: result.reason,\n          };\n        }\n      }\n      return undefined;\n    })\n    .filter((link): link is NonNullable<typeof link> => link !== undefined);\n\n  // Add debug logging for testing\n  // fs.writeFile(\n  //   `logs/reranker-aaa-${crypto.randomUUID()}.json`,\n  //   JSON.stringify(\n  //     {\n  //       totalResults: relevantLinks.length,\n  //       scores: relevantLinks.map((l) => ({\n  //         url: l.url,\n  //         score: l.relevanceScore,\n  //         reason: l.reason,\n  //       })),\n  //     },\n  //     null,\n  //     2,\n  //   ),\n  // );\n\n  return {\n    mapDocument: relevantLinks,\n    tokensUsed: totalTokensUsed,\n    cost: totalCost,\n  };\n}\n"]}