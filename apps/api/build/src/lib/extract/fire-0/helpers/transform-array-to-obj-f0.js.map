{"version":3,"file":"transform-array-to-obj-f0.js","sourceRoot":"","sources":["../../../../../../src/lib/extract/fire-0/helpers/transform-array-to-obj-f0.ts"],"names":[],"mappings":"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","sourcesContent":["import isEqual from \"lodash/isEqual\";\n\n/**\n * Transforms an array of objects into a single object, merging properties with the same name.\n * @param originalSchema - The schema of the original data.\n * @param arrayData - The array of objects to transform.\n * @returns A single object with merged properties.\n */\nexport function transformArrayToObject_F0(\n  originalSchema: any,\n  arrayData: any[],\n): any {\n  if (Object.keys(originalSchema).length == 0) {\n    return {};\n  }\n\n  const transformedResult: any = {};\n\n  // Function to find the array key in a nested schema\n  function findArrayKey(schema: any): string | null {\n    for (const key in schema.properties) {\n      if (schema.properties[key].type === \"array\") {\n        return key;\n      } else if (schema.properties[key].type === \"object\") {\n        const nestedKey = findArrayKey(schema.properties[key]);\n        if (nestedKey) {\n          return `${key}.${nestedKey}`;\n        }\n      }\n    }\n    return null;\n  }\n\n  const arrayKeyPath = findArrayKey(originalSchema);\n  if (!arrayKeyPath) {\n    return arrayData.reduce((acc, item) => {\n      for (const key in item) {\n        if (!acc[key]) {\n          acc[key] = item[key];\n        } else if (\n          typeof acc[key] === \"object\" &&\n          typeof item[key] === \"object\"\n        ) {\n          acc[key] = { ...acc[key], ...item[key] };\n        }\n      }\n      return acc;\n    }, {});\n  }\n\n  const arrayKeyParts = arrayKeyPath.split(\".\");\n  const arrayKey = arrayKeyParts.pop();\n  if (!arrayKey) {\n    throw new Error(\"Array key not found in schema\");\n  }\n\n  const parentSchema = arrayKeyParts.reduce(\n    (schema, key) => schema.properties[key],\n    originalSchema,\n  );\n  const itemSchema = parentSchema.properties[arrayKey].items;\n  if (!itemSchema) {\n    throw new Error(\"Item schema not found for array key\");\n  }\n\n  // Initialize the array in the transformed result\n  let currentLevel = transformedResult;\n  arrayKeyParts.forEach((part) => {\n    if (!currentLevel[part]) {\n      currentLevel[part] = {};\n    }\n    currentLevel = currentLevel[part];\n  });\n  currentLevel[arrayKey] = [];\n\n  // Helper function to check if an object is already in the array\n  function isDuplicateObject(array: any[], obj: any): boolean {\n    return array.some((existingItem) => isEqual(existingItem, obj));\n  }\n\n  // Helper function to validate if an object follows the schema\n  function isValidObject(obj: any, schema: any): boolean {\n    return Object.keys(schema.properties).every((key) => {\n      return (\n        obj.hasOwnProperty(key) &&\n        typeof obj[key] === schema.properties[key].type\n      );\n    });\n  }\n\n  // Iterate over each item in the arrayData\n  arrayData.forEach((item) => {\n    let currentItem = item;\n    arrayKeyParts.forEach((part) => {\n      if (currentItem[part]) {\n        currentItem = currentItem[part];\n      }\n    });\n\n    // Copy non-array properties from the parent object\n    for (const key in parentSchema.properties) {\n      if (\n        key !== arrayKey &&\n        currentItem.hasOwnProperty(key) &&\n        !currentLevel.hasOwnProperty(key)\n      ) {\n        currentLevel[key] = currentItem[key];\n      }\n    }\n\n    // Ensure that the currentItem[arrayKey] is an array before mapping\n    if (Array.isArray(currentItem[arrayKey])) {\n      currentItem[arrayKey].forEach((subItem: any) => {\n        if (\n          typeof subItem === \"object\" &&\n          subItem !== null &&\n          isValidObject(subItem, itemSchema)\n        ) {\n          // For arrays of objects, add only unique objects\n          const transformedItem: any = {};\n          let hasValidData = false;\n\n          for (const key in itemSchema.properties) {\n            if (subItem.hasOwnProperty(key) && subItem[key] !== undefined) {\n              transformedItem[key] = subItem[key];\n              hasValidData = true;\n            }\n          }\n\n          if (\n            hasValidData &&\n            !isDuplicateObject(currentLevel[arrayKey], transformedItem)\n          ) {\n            currentLevel[arrayKey].push(transformedItem);\n          }\n        }\n      });\n    } else {\n      console.warn(\n        `Expected an array at ${arrayKey}, but found:`,\n        currentItem[arrayKey],\n      );\n    }\n\n    // Handle merging of array properties\n    for (const key in parentSchema.properties) {\n      if (\n        parentSchema.properties[key].type === \"array\" &&\n        Array.isArray(currentItem[key])\n      ) {\n        if (!currentLevel[key]) {\n          currentLevel[key] = [];\n        }\n        currentItem[key].forEach((value: any) => {\n          if (\n            !currentLevel[key].includes(value) &&\n            !isDuplicateObject(currentLevel[arrayKey], value)\n          ) {\n            currentLevel[key].push(value);\n          }\n        });\n      }\n    }\n  });\n\n  return transformedResult;\n}\n"]}