{"version":3,"file":"checkShouldExtract-f0.js","sourceRoot":"","sources":["../../../../../../src/lib/extract/fire-0/completions/checkShouldExtract-f0.ts"],"names":[],"mappings":";;AAQA,sDA8BC;AAtCD,mDAAgD;AAChD,yDAAqD;AAErD,oDAA0D;AAC1D,0DAAyG;AACzG,2DAAsD;AAG/C,KAAK,UAAU,qBAAqB,CACzC,MAAc,EACd,iBAAsB,EACtB,GAAa;IAEb,MAAM,kBAAkB,GAAG,MAAM,IAAA,sCAAsB,EAAC;QACtD,MAAM,EAAE,eAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,mCAAmC,EAAE,CAAC;QACrE,OAAO,EAAE;YACP,IAAI,EAAE,KAAK;YACX,YAAY,EAAE,IAAA,oDAAiC,GAAE;YACjD,MAAM,EAAE,IAAA,kDAA+B,EAAC,MAAM,EAAE,iBAAiB,CAAC;YAClE,MAAM,EAAE;gBACN,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE;oBACV,OAAO,EAAE;wBACP,IAAI,EAAE,SAAS;qBAChB;iBACF;gBACD,QAAQ,EAAE,CAAC,SAAS,CAAC;aACtB;SACF;QACD,QAAQ,EAAE,IAAA,8BAAa,EAAC,GAAG,CAAC;QAC5B,iBAAiB,EAAE,IAAI;QACvB,KAAK,EAAE,IAAA,qBAAQ,EAAC,aAAa,CAAC;KAC/B,CAAC,CAAC;IAEH,OAAO;QACL,UAAU,EAAE,kBAAkB,CAAC,UAAU;QACzC,OAAO,EAAE,kBAAkB,CAAC,OAAO,CAAC,SAAS,CAAC;KAC/C,CAAC;AACJ,CAAC","sourcesContent":["import { logger } from \"../../../../lib/logger\";\nimport { buildDocument } from \"../../build-document\";\nimport { Document, TokenUsage } from \"../../../../controllers/v1/types\";\nimport { generateCompletions_F0 } from \"../llmExtract-f0\";\nimport { buildShouldExtractSystemPrompt_F0, buildShouldExtractUserPrompt_F0 } from \"../build-prompts-f0\";\nimport { getModel } from \"../../../../lib/generic-ai\";\n\n\nexport async function checkShouldExtract_F0(\n  prompt: string,\n  multiEntitySchema: any,\n  doc: Document,\n): Promise<{ tokenUsage: TokenUsage; extract: boolean }> {\n  const shouldExtractCheck = await generateCompletions_F0({\n    logger: logger.child({ method: \"extractService/checkShouldExtract\" }),\n    options: {\n      mode: \"llm\",\n      systemPrompt: buildShouldExtractSystemPrompt_F0(),\n      prompt: buildShouldExtractUserPrompt_F0(prompt, multiEntitySchema),\n      schema: {\n        type: \"object\",\n        properties: {\n          extract: {\n            type: \"boolean\",\n          },\n        },\n        required: [\"extract\"],\n      },\n    },\n    markdown: buildDocument(doc),\n    isExtractEndpoint: true,\n    model: getModel(\"gpt-4o-mini\"),\n  });\n\n  return {\n    tokenUsage: shouldExtractCheck.totalUsage,\n    extract: shouldExtractCheck.extract[\"extract\"],\n  };\n}\n"]}