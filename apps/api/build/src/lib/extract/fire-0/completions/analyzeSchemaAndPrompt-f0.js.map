{"version":3,"file":"analyzeSchemaAndPrompt-f0.js","sourceRoot":"","sources":["../../../../../../src/lib/extract/fire-0/completions/analyzeSchemaAndPrompt-f0.ts"],"names":[],"mappings":";;AAcA,8DAwEC;AArFD,6BAAwB;AACxB,uDAG6B;AAC7B,4CAAyC;AAEzC,oDAA+C;AAC/C,oDAG0B;AAEnB,KAAK,UAAU,yBAAyB,CAC7C,IAAc,EACd,MAAW,EACX,MAAc;IAQd,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,MAAM,GAAG,MAAM,IAAA,2CAA2B,EAAC,MAAM,CAAC,CAAC;IACrD,CAAC;IAED,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAE5C,MAAM,KAAK,GAAG,IAAA,qBAAQ,EAAC,QAAQ,CAAC,CAAC;IAEjC,MAAM,WAAW,GAAG,OAAC;SAClB,MAAM,CAAC;QACN,aAAa,EAAE,OAAC,CAAC,OAAO,EAAE;QAC1B,eAAe,EAAE,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC;QAC3D,SAAS,EAAE,OAAC,CAAC,MAAM,EAAE;QACrB,aAAa,EAAE,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC;KACnC,CAAC;SACD,MAAM,CACL,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,aAAa,IAAI,CAAC,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,EACvD,gDAAgD,CACjD,CAAC;IAEJ,IAAI,CAAC;QACH,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,IAAA,sCAAsB,EAAC;YACnE,MAAM,EAAN,eAAM;YACN,OAAO,EAAE;gBACP,IAAI,EAAE,KAAK;gBACX,MAAM,EAAE,WAAW;gBACnB,MAAM,EAAE,IAAA,4CAA4B,EAAC,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC;gBAChE,YAAY,EAAE,IAAA,wCAAwB,GAAE;aACzC;YACD,QAAQ,EAAE,EAAE;YACZ,KAAK;SACN,CAAC,CAAC;QAEH,MAAM,EAAE,aAAa,EAAE,eAAe,EAAE,SAAS,EAAE,aAAa,EAAE,GAChE,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAE5B,OAAO;YACL,aAAa;YACb,eAAe;YACf,SAAS;YACT,aAAa;YACb,UAAU,EAAE,UAAU;SACvB,CAAC;IACJ,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,eAAM,CAAC,IAAI,CAAC,wDAAwD,EAAE;YACpE,KAAK,EAAE,CAAC;SACT,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,aAAa,EAAE,KAAK;QACpB,eAAe,EAAE,EAAE;QACnB,SAAS,EAAE,EAAE;QACb,aAAa,EAAE,EAAE;QACjB,UAAU,EAAE;YACV,YAAY,EAAE,CAAC;YACf,gBAAgB,EAAE,CAAC;YACnB,WAAW,EAAE,CAAC;YACd,KAAK,EAAE,KAAK,CAAC,OAAO;SACrB;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { TokenUsage } from \"../../../../controllers/v1/types\";\nimport { z } from \"zod\";\nimport {\n  buildAnalyzeSchemaPrompt,\n  buildAnalyzeSchemaUserPrompt,\n} from \"../../build-prompts\";\nimport { logger } from \"../../../logger\";\nimport { jsonSchema } from \"ai\";\nimport { getModel } from \"../../../generic-ai\";\nimport {\n  generateCompletions_F0,\n  generateSchemaFromPrompt_F0,\n} from \"../llmExtract-f0\";\n\nexport async function analyzeSchemaAndPrompt_F0(\n  urls: string[],\n  schema: any,\n  prompt: string,\n): Promise<{\n  isMultiEntity: boolean;\n  multiEntityKeys: string[];\n  reasoning?: string;\n  keyIndicators?: string[];\n  tokenUsage: TokenUsage;\n}> {\n  if (!schema) {\n    schema = await generateSchemaFromPrompt_F0(prompt);\n  }\n\n  const schemaString = JSON.stringify(schema);\n\n  const model = getModel(\"gpt-4o\");\n\n  const checkSchema = z\n    .object({\n      isMultiEntity: z.boolean(),\n      multiEntityKeys: z.array(z.string()).optional().default([]),\n      reasoning: z.string(),\n      keyIndicators: z.array(z.string()),\n    })\n    .refine(\n      (x) => !x.isMultiEntity || x.multiEntityKeys.length > 0,\n      \"isMultiEntity was true, but no multiEntityKeys\",\n    );\n\n  try {\n    const { extract: result, totalUsage } = await generateCompletions_F0({\n      logger,\n      options: {\n        mode: \"llm\",\n        schema: checkSchema,\n        prompt: buildAnalyzeSchemaUserPrompt(schemaString, prompt, urls),\n        systemPrompt: buildAnalyzeSchemaPrompt(),\n      },\n      markdown: \"\",\n      model,\n    });\n\n    const { isMultiEntity, multiEntityKeys, reasoning, keyIndicators } =\n      checkSchema.parse(result);\n\n    return {\n      isMultiEntity,\n      multiEntityKeys,\n      reasoning,\n      keyIndicators,\n      tokenUsage: totalUsage,\n    };\n  } catch (e) {\n    logger.warn(\"(analyzeSchemaAndPrompt) Error parsing schema analysis\", {\n      error: e,\n    });\n  }\n\n  return {\n    isMultiEntity: false,\n    multiEntityKeys: [],\n    reasoning: \"\",\n    keyIndicators: [],\n    tokenUsage: {\n      promptTokens: 0,\n      completionTokens: 0,\n      totalTokens: 0,\n      model: model.modelId,\n    },\n  };\n}\n"]}