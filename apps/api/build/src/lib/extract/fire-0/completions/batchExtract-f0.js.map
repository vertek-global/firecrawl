{"version":3,"file":"batchExtract-f0.js","sourceRoot":"","sources":["../../../../../../src/lib/extract/fire-0/completions/batchExtract-f0.ts"],"names":[],"mappings":";;AAgBA,wDAqCC;AArDD,mDAAgD;AAGhD,oDAA0D;AAC1D,0DAAmG;AACnG,4DAAwD;AAExD;;;;;;;;GAQG;AACI,KAAK,UAAU,sBAAsB,CAC1C,iBAAsB,EACtB,KAAe,EACf,MAAc,EACd,YAAoB,EACpB,GAAa;IAQb,MAAM,UAAU,GAAG,MAAM,IAAA,sCAAsB,EAAC;QAC9C,MAAM,EAAE,eAAM,CAAC,KAAK,CAAC;YACnB,MAAM,EAAE,oCAAoC;SAC7C,CAAC;QACF,OAAO,EAAE;YACP,IAAI,EAAE,KAAK;YACX,YAAY,EAAE,IAAA,mDAAgC,EAC5C,YAAY,EACZ,iBAAiB,EACjB,KAAK,CACN;YACD,MAAM,EAAE,IAAA,6CAA0B,EAAC,MAAM,CAAC;YAC1C,MAAM,EAAE,iBAAiB;SAC1B;QACD,QAAQ,EAAE,IAAA,oCAAgB,EAAC,GAAG,CAAC;QAC/B,iBAAiB,EAAE,IAAI;KACxB,CAAC,CAAC;IAEH,OAAO;QACL,OAAO,EAAE,UAAU,CAAC,OAAO;QAC3B,SAAS,EAAE,UAAU,CAAC,SAAS;QAC/B,UAAU,EAAE,UAAU,CAAC,UAAU;QACjC,OAAO,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,SAAS,IAAI,EAAE,CAAC;KAC5D,CAAC;AACJ,CAAC","sourcesContent":["import { logger } from \"../../../../lib/logger\";\nimport { ExtractResponse, TokenUsage } from \"../../../../controllers/v1/types\";\nimport { Document } from \"../../../../controllers/v1/types\";\nimport { generateCompletions_F0 } from \"../llmExtract-f0\";\nimport { buildBatchExtractPrompt_F0, buildBatchExtractSystemPrompt_F0 } from \"../build-prompts-f0\";\nimport { buildDocument_F0 } from \"../build-document-f0\";\n\n/**\n * Batch extract information from a list of URLs using a multi-entity schema.\n * @param multiEntitySchema - The schema for the multi-entity extraction\n * @param links - The URLs to extract information from\n * @param prompt - The prompt for the extraction\n * @param systemPrompt - The system prompt for the extraction\n * @param doc - The document to extract information from\n * @returns The completion promise\n */\nexport async function batchExtractPromise_F0(\n  multiEntitySchema: any,\n  links: string[],\n  prompt: string,\n  systemPrompt: string,\n  doc: Document,\n): Promise<{\n  extract: any;\n  numTokens: number;\n  totalUsage: TokenUsage;\n  warning?: string;\n  sources: string[];\n}> {\n  const completion = await generateCompletions_F0({\n    logger: logger.child({\n      method: \"extractService/generateCompletions\",\n    }),\n    options: {\n      mode: \"llm\",\n      systemPrompt: buildBatchExtractSystemPrompt_F0(\n        systemPrompt,\n        multiEntitySchema,\n        links,\n      ),\n      prompt: buildBatchExtractPrompt_F0(prompt),\n      schema: multiEntitySchema,\n    },\n    markdown: buildDocument_F0(doc),\n    isExtractEndpoint: true\n  });\n\n  return {\n    extract: completion.extract,\n    numTokens: completion.numTokens,\n    totalUsage: completion.totalUsage,\n    sources: [doc.metadata.url || doc.metadata.sourceURL || \"\"]\n  };\n}\n"]}