{"version":3,"file":"url-processor-f0.js","sourceRoot":"","sources":["../../../../../src/lib/extract/fire-0/url-processor-f0.ts"],"names":[],"mappings":"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","sourcesContent":["import { MapDocument, TeamFlags, URLTrace } from \"../../../controllers/v1/types\";\nimport { getMapResults } from \"../../../controllers/v1/map\";\nimport { removeDuplicateUrls } from \"../../validateUrl\";\nimport { isUrlBlocked } from \"../../../scraper/WebScraper/utils/blocklist\";\nimport { buildPreRerankPrompt, buildRefrasedPrompt } from \"../build-prompts\";\nimport { rerankLinksWithLLM_F0 } from \"./reranker-f0\";\nimport { extractConfig } from \"../config\";\nimport type { Logger } from \"winston\";\nimport { generateText } from \"ai\";\nimport { getModel } from \"../../generic-ai\";\nimport { CostTracking } from \"../extraction-service\";\nimport { getACUCTeam } from \"../../../controllers/auth\";\n\nexport async function generateBasicCompletion_FO(prompt: string) {\n  const { text } = await generateText({\n    model: getModel(\"gpt-4o\"),\n    prompt: prompt,\n    temperature: 0\n  });\n  return text;\n}\ninterface ProcessUrlOptions {\n  url: string;\n  prompt?: string;\n  schema?: any;\n  teamId: string;\n  allowExternalLinks?: boolean;\n  origin?: string;\n  limit?: number;\n  includeSubdomains?: boolean;\n}\n\nexport async function processUrl_F0(\n  options: ProcessUrlOptions,\n  urlTraces: URLTrace[],\n  updateExtractCallback: (links: string[]) => void,\n  logger: Logger,\n  teamFlags: TeamFlags,\n): Promise<string[]> {\n  const trace: URLTrace = {\n    url: options.url,\n    status: \"mapped\",\n    timing: {\n      discoveredAt: new Date().toISOString(),\n    },\n  };\n  urlTraces.push(trace);\n\n  if (!options.url.includes(\"/*\") && !options.allowExternalLinks) {\n    if (!isUrlBlocked(options.url, teamFlags)) {\n      trace.usedInCompletion = true;\n      return [options.url];\n    }\n    logger.warn(\"URL is blocked\");\n    trace.status = \"error\";\n    trace.error = \"URL is blocked\";\n    trace.usedInCompletion = false;\n    return [];\n  }\n\n  const baseUrl = options.url.replace(\"/*\", \"\");\n  let urlWithoutWww = baseUrl.replace(\"www.\", \"\");\n\n  let searchQuery = options.prompt;\n  if (options.prompt) {\n    searchQuery =\n      (\n        await generateBasicCompletion_FO(\n          buildRefrasedPrompt(options.prompt, baseUrl),\n        )\n      )\n        ?.replace('\"', \"\")\n        .replace(\"/\", \"\") ?? options.prompt;\n  }\n\n  try {\n    logger.debug(\"Running map...\", {\n      search: searchQuery,\n    });\n    const mapResults = await getMapResults({\n      url: baseUrl,\n      search: searchQuery,\n      teamId: options.teamId,\n      allowExternalLinks: options.allowExternalLinks,\n      origin: options.origin,\n      limit: options.limit,\n      ignoreSitemap: false,\n      includeMetadata: true,\n      includeSubdomains: options.includeSubdomains,\n      flags: teamFlags,\n    });\n\n    let mappedLinks = mapResults.mapResults as MapDocument[];\n    let allUrls = [...mappedLinks.map((m) => m.url), ...mapResults.links];\n    let uniqueUrls = removeDuplicateUrls(allUrls);\n    logger.debug(\"Map finished.\", {\n      linkCount: allUrls.length,\n      uniqueLinkCount: uniqueUrls.length,\n    });\n\n    // Track all discovered URLs\n    uniqueUrls.forEach((discoveredUrl) => {\n      if (!urlTraces.some((t) => t.url === discoveredUrl)) {\n        urlTraces.push({\n          url: discoveredUrl,\n          status: \"mapped\",\n          timing: {\n            discoveredAt: new Date().toISOString(),\n          },\n          usedInCompletion: false,\n        });\n      }\n    });\n\n    // retry if only one url is returned\n    if (uniqueUrls.length <= 1) {\n      logger.debug(\"Running map... (pass 2)\");\n      const retryMapResults = await getMapResults({\n        url: baseUrl,\n        teamId: options.teamId,\n        allowExternalLinks: options.allowExternalLinks,\n        origin: options.origin,\n        limit: options.limit,\n        ignoreSitemap: false,\n        includeMetadata: true,\n        includeSubdomains: options.includeSubdomains,\n        flags: teamFlags,\n      });\n\n      mappedLinks = retryMapResults.mapResults as MapDocument[];\n      allUrls = [...mappedLinks.map((m) => m.url), ...mapResults.links];\n      uniqueUrls = removeDuplicateUrls(allUrls);\n      logger.debug(\"Map finished. (pass 2)\", {\n        linkCount: allUrls.length,\n        uniqueLinkCount: uniqueUrls.length,\n      });\n\n      // Track all discovered URLs\n      uniqueUrls.forEach((discoveredUrl) => {\n        if (!urlTraces.some((t) => t.url === discoveredUrl)) {\n          urlTraces.push({\n            url: discoveredUrl,\n            status: \"mapped\",\n            warning: \"Broader search. Not limiting map results to prompt.\",\n            timing: {\n              discoveredAt: new Date().toISOString(),\n            },\n            usedInCompletion: false,\n          });\n        }\n      });\n    }\n\n    // Track all discovered URLs\n    uniqueUrls.forEach((discoveredUrl) => {\n      if (!urlTraces.some((t) => t.url === discoveredUrl)) {\n        urlTraces.push({\n          url: discoveredUrl,\n          status: \"mapped\",\n          timing: {\n            discoveredAt: new Date().toISOString(),\n          },\n          usedInCompletion: false,\n        });\n      }\n    });\n\n    const existingUrls = new Set(mappedLinks.map((m) => m.url));\n    const newUrls = uniqueUrls.filter((url) => !existingUrls.has(url));\n\n    mappedLinks = [\n      ...mappedLinks,\n      ...newUrls.map((url) => ({ url, title: \"\", description: \"\" })),\n    ];\n\n    if (mappedLinks.length === 0) {\n      mappedLinks = [{ url: baseUrl, title: \"\", description: \"\" }];\n    }\n\n    // Limit initial set of links (1000)\n    mappedLinks = mappedLinks.slice(\n      0,\n      extractConfig.RERANKING.MAX_INITIAL_RANKING_LIMIT,\n    );\n\n    updateExtractCallback(mappedLinks.map((x) => x.url));\n\n    let rephrasedPrompt = options.prompt ?? searchQuery;\n    try {\n      rephrasedPrompt =\n        (await generateBasicCompletion_FO(\n          buildPreRerankPrompt(rephrasedPrompt, options.schema, baseUrl),\n        )) ??\n        \"Extract the data according to the schema: \" +\n          JSON.stringify(options.schema, null, 2);\n    } catch (error) {\n      console.error(\"Error generating search query from schema:\", error);\n      rephrasedPrompt =\n        \"Extract the data according to the schema: \" +\n        JSON.stringify(options.schema, null, 2) +\n        \" \" +\n        options?.prompt; // Fallback to just the domain\n    }\n\n    //   \"mapped-links.txt\",\n    //   mappedLinks,\n    //   (link, index) => `${index + 1}. URL: ${link.url}, Title: ${link.title}, Description: ${link.description}`\n    // );\n\n    logger.info(\"Generated rephrased prompt.\", {\n      rephrasedPrompt,\n    });\n\n    logger.info(\"Reranking pass 1 (threshold 0.8)...\");\n    const rerankerResult = await rerankLinksWithLLM_F0({\n      links: mappedLinks,\n      searchQuery: rephrasedPrompt,\n      urlTraces,\n    }, new CostTracking());\n    mappedLinks = rerankerResult.mapDocument;\n    let tokensUsed = rerankerResult.tokensUsed;\n    logger.info(\"Reranked! (pass 1)\", {\n      linkCount: mappedLinks.length,\n    });\n\n    // 2nd Pass, useful for when the first pass returns too many links\n    if (mappedLinks.length > 100) {\n      logger.info(\"Reranking (pass 2)...\");\n      const rerankerResult = await rerankLinksWithLLM_F0({\n        links: mappedLinks,\n        searchQuery: rephrasedPrompt,\n        urlTraces,\n      }, new CostTracking());\n      mappedLinks = rerankerResult.mapDocument;\n      tokensUsed += rerankerResult.tokensUsed;\n      logger.info(\"Reranked! (pass 2)\", {\n        linkCount: mappedLinks.length,\n      });\n    }\n\n    // dumpToFile(\n    //   \"llm-links.txt\",\n    //   mappedLinks,\n    //   (link, index) => `${index + 1}. URL: ${link.url}, Title: ${link.title}, Description: ${link.description}`\n    // );\n    // Remove title and description from mappedLinks\n    mappedLinks = mappedLinks.map((link) => ({ url: link.url }));\n    return mappedLinks.map((x) => x.url);\n  } catch (error) {\n    trace.status = \"error\";\n    trace.error = error.message;\n    trace.usedInCompletion = false;\n    return [];\n  }\n}\n"]}