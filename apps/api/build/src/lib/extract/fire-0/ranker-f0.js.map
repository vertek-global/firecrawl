{"version":3,"file":"ranker-f0.js","sourceRoot":"","sources":["../../../../../src/lib/extract/fire-0/ranker-f0.ts"],"names":[],"mappings":"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","sourcesContent":["import { embed } from \"ai\";\nimport { configDotenv } from \"dotenv\";\nimport { getEmbeddingModel } from \"../../../lib/generic-ai\";\n\nconfigDotenv();\n\nasync function getEmbedding(text: string) {\n  const { embedding } = await embed({\n    model: getEmbeddingModel(\"text-embedding-3-small\"),\n    value: text,\n  });\n\n  return embedding;\n}\n\nconst cosineSimilarity = (vec1: number[], vec2: number[]): number => {\n  const dotProduct = vec1.reduce((sum, val, i) => sum + val * vec2[i], 0);\n  const magnitude1 = Math.sqrt(vec1.reduce((sum, val) => sum + val * val, 0));\n  const magnitude2 = Math.sqrt(vec2.reduce((sum, val) => sum + val * val, 0));\n  if (magnitude1 === 0 || magnitude2 === 0) return 0;\n  return dotProduct / (magnitude1 * magnitude2);\n};\n\n// Function to convert text to vector\nconst textToVector = (searchQuery: string, text: string): number[] => {\n  const words = searchQuery.toLowerCase().split(/\\W+/);\n  return words.map((word) => {\n    const count = (text.toLowerCase().match(new RegExp(word, \"g\")) || [])\n      .length;\n    return count / text.length;\n  });\n};\n\nasync function performRanking_F0(\n  linksWithContext: string[],\n  links: string[],\n  searchQuery: string,\n) {\n  try {\n    // Handle invalid inputs\n    if (!searchQuery || !linksWithContext.length || !links.length) {\n      return [];\n    }\n\n    // Sanitize search query by removing null characters\n    const sanitizedQuery = searchQuery;\n\n    // Generate embeddings for the search query\n    const queryEmbedding = await getEmbedding(sanitizedQuery);\n\n    // Generate embeddings for each link and calculate similarity in parallel\n    const linksAndScores = await Promise.all(\n      linksWithContext.map((linkWithContext, index) =>\n        getEmbedding(linkWithContext)\n          .then((linkEmbedding) => {\n            const score = cosineSimilarity(queryEmbedding, linkEmbedding);\n            return {\n              link: links[index],\n              linkWithContext,\n              score,\n              originalIndex: index,\n            };\n          })\n          .catch(() => ({\n            link: links[index],\n            linkWithContext,\n            score: 0,\n            originalIndex: index,\n          })),\n      ),\n    );\n\n    // Sort links based on similarity scores while preserving original order for equal scores\n    linksAndScores.sort((a, b) => {\n      const scoreDiff = b.score - a.score;\n      return scoreDiff === 0 ? a.originalIndex - b.originalIndex : scoreDiff;\n    });\n\n    return linksAndScores;\n  } catch (error) {\n    console.error(`Error performing semantic search: ${error}`);\n    return [];\n  }\n}\n\nexport { performRanking_F0 };\n"]}