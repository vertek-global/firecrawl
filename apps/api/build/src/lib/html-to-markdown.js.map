{"version":3,"file":"html-to-markdown.js","sourceRoot":"","sources":["../../../src/lib/html-to-markdown.ts"],"names":[],"mappings":"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","sourcesContent":["import koffi from \"koffi\";\nimport { join } from \"path\";\nimport \"../services/sentry\";\nimport * as Sentry from \"@sentry/node\";\n\nimport dotenv from \"dotenv\";\nimport { logger } from \"./logger\";\nimport { stat } from \"fs/promises\";\ndotenv.config();\n\n// TODO: add a timeout to the Go parser\nconst goExecutablePath = join(\n  process.cwd(),\n  \"sharedLibs\",\n  \"go-html-to-md\",\n  \"html-to-markdown.so\",\n);\n\nclass GoMarkdownConverter {\n  private static instance: GoMarkdownConverter;\n  private convert: any;\n\n  private constructor() {\n    const lib = koffi.load(goExecutablePath);\n    this.convert = lib.func(\"ConvertHTMLToMarkdown\", \"string\", [\"string\"]);\n  }\n\n  public static async getInstance(): Promise<GoMarkdownConverter> {\n    if (!GoMarkdownConverter.instance) {\n      try {\n        await stat(goExecutablePath);\n      } catch (_) {\n        throw Error(\"Go shared library not found\");\n      }\n      GoMarkdownConverter.instance = new GoMarkdownConverter();\n    }\n    return GoMarkdownConverter.instance;\n  }\n\n  public async convertHTMLToMarkdown(html: string): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      this.convert.async(html, (err: Error, res: string) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(res);\n        }\n      });\n    });\n  }\n}\n\nexport async function parseMarkdown(\n  html: string | null | undefined,\n): Promise<string> {\n  if (!html) {\n    return \"\";\n  }\n\n  try {\n    if (process.env.USE_GO_MARKDOWN_PARSER == \"true\") {\n      const converter = await GoMarkdownConverter.getInstance();\n      let markdownContent = await converter.convertHTMLToMarkdown(html);\n\n      markdownContent = processMultiLineLinks(markdownContent);\n      markdownContent = removeSkipToContentLinks(markdownContent);\n      // logger.info(`HTML to Markdown conversion using Go parser successful`);\n      return markdownContent;\n    }\n  } catch (error) {\n    if (\n      !(error instanceof Error) ||\n      error.message !== \"Go shared library not found\"\n    ) {\n      Sentry.captureException(error);\n      logger.error(\n        `Error converting HTML to Markdown with Go parser: ${error}`,\n      );\n    } else {\n      logger.warn(\n        \"Tried to use Go parser, but it doesn't exist in the file system.\",\n        { goExecutablePath },\n      );\n    }\n  }\n\n  // Fallback to TurndownService if Go parser fails or is not enabled\n  var TurndownService = require(\"turndown\");\n  var turndownPluginGfm = require(\"joplin-turndown-plugin-gfm\");\n\n  const turndownService = new TurndownService();\n  turndownService.addRule(\"inlineLink\", {\n    filter: function (node, options) {\n      return (\n        options.linkStyle === \"inlined\" &&\n        node.nodeName === \"A\" &&\n        node.getAttribute(\"href\")\n      );\n    },\n    replacement: function (content, node) {\n      var href = node.getAttribute(\"href\").trim();\n      var title = node.title ? ' \"' + node.title + '\"' : \"\";\n      return \"[\" + content.trim() + \"](\" + href + title + \")\\n\";\n    },\n  });\n  var gfm = turndownPluginGfm.gfm;\n  turndownService.use(gfm);\n\n  try {\n    let markdownContent = await turndownService.turndown(html);\n    markdownContent = processMultiLineLinks(markdownContent);\n    markdownContent = removeSkipToContentLinks(markdownContent);\n\n    return markdownContent;\n  } catch (error) {\n    logger.error(\"Error converting HTML to Markdown\", { error });\n    return \"\"; // Optionally return an empty string or handle the error as needed\n  }\n}\n\nfunction processMultiLineLinks(markdownContent: string): string {\n  let insideLinkContent = false;\n  let newMarkdownContent = \"\";\n  let linkOpenCount = 0;\n  for (let i = 0; i < markdownContent.length; i++) {\n    const char = markdownContent[i];\n\n    if (char == \"[\") {\n      linkOpenCount++;\n    } else if (char == \"]\") {\n      linkOpenCount = Math.max(0, linkOpenCount - 1);\n    }\n    insideLinkContent = linkOpenCount > 0;\n\n    if (insideLinkContent && char == \"\\n\") {\n      newMarkdownContent += \"\\\\\" + \"\\n\";\n    } else {\n      newMarkdownContent += char;\n    }\n  }\n  return newMarkdownContent;\n}\n\nfunction removeSkipToContentLinks(markdownContent: string): string {\n  // Remove [Skip to Content](#page) and [Skip to content](#skip)\n  const newMarkdownContent = markdownContent.replace(\n    /\\[Skip to Content\\]\\(#[^\\)]*\\)/gi,\n    \"\",\n  );\n  return newMarkdownContent;\n}\n"]}