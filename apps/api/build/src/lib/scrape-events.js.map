{"version":3,"file":"scrape-events.js","sourceRoot":"","sources":["../../../src/lib/scrape-events.ts"],"names":[],"mappings":";AAAA,gCAAgC;AAChC,uEAAuE;AACvE,qCAAqC;AACrC,yCAAyC;AACzC,yDAAyD;AACzD,kBAAkB;;AAElB,mCAAmC;AACnC,mBAAmB;AACnB,qBAAqB;AACrB,oBAAoB;AACpB,KAAK;AAEL,oCAAoC;AACpC,oBAAoB;AACpB,iBAAiB;AACjB,qBAAqB;AACrB,oBAAoB;AACpB,qBAAqB;AACrB,wBAAwB;AACxB,8BAA8B;AAC9B,8BAA8B;AAC9B,+BAA+B;AAC/B,yBAAyB;AACzB,0BAA0B;AAC1B,OAAO;AACP,KAAK;AAEL,mCAAmC;AACnC,mBAAmB;AACnB,WAAW;AACX,kBAAkB;AAClB,iBAAiB;AACjB,oBAAoB;AACpB,iBAAiB;AACjB,kBAAkB;AAClB,kBAAkB;AAClB,kBAAkB;AAClB,qBAAqB;AACrB,KAAK;AAEL,4BAA4B;AAC5B,uBAAuB;AACvB,wBAAwB;AACxB,wBAAwB;AAExB,8BAA8B;AAC9B,+DAA+D;AAC/D,yCAAyC;AAEzC,gFAAgF;AAChF,iCAAiC;AACjC,cAAc;AACd,wCAAwC;AACxC,mCAAmC;AACnC,sBAAsB;AACtB,6BAA6B;AAC7B,kCAAkC;AAClC,gCAAgC;AAChC,4BAA4B;AAC5B,eAAe;AACf,sBAAsB;AACtB,uBAAuB;AACvB,0CAA0C;AAC1C,0BAA0B;AAC1B,qEAAqE;AACrE,uBAAuB;AACvB,UAAU;AACV,QAAQ;AAER,mBAAmB;AACnB,MAAM;AAEN,qCAAqC;AACrC,4BAA4B;AAC5B,2CAA2C;AAC3C,QAAQ;AACR,kCAAkC;AAElC,YAAY;AACZ,8BAA8B;AAC9B,iFAAiF;AACjF,uBAAuB;AACvB,uBAAuB;AACvB,iCAAiC;AACjC,oBAAoB;AACpB,uBAAuB;AACvB,sCAAsC;AACtC,sBAAsB;AACtB,eAAe;AACf,aAAa;AACb,4BAA4B;AAC5B,wBAAwB;AACxB,gEAAgE;AAChE,QAAQ;AACR,MAAM;AAEN,iFAAiF;AACjF,YAAY;AACZ,iFAAiF;AACjF,yBAAyB;AACzB,iBAAiB;AACjB,8CAA8C;AAC9C,YAAY;AACZ,wBAAwB;AACxB,2DAA2D;AAC3D,QAAQ;AACR,MAAM;AACN,IAAI","sourcesContent":["// import { Job } from \"bullmq\";\n// import { supabase_service as supabase } from \"../services/supabase\";\n// import { logger } from \"./logger\";\n// import { configDotenv } from \"dotenv\";\n// import { Engine } from \"../scraper/scrapeURL/engines\";\n// configDotenv();\n\n// export type ScrapeErrorEvent = {\n//   type: \"error\";\n//   message: string;\n//   stack?: string;\n// };\n\n// export type ScrapeScrapeEvent = {\n//   type: \"scrape\";\n//   url: string;\n//   worker?: string;\n//   method: Engine;\n//   result: null | {\n//     success: boolean;\n//     response_code?: number;\n//     response_size?: number;\n//     error?: string | object;\n//     // proxy?: string,\n//     time_taken: number;\n//   };\n// };\n\n// export type ScrapeQueueEvent = {\n//   type: \"queue\";\n//   event:\n//     | \"waiting\"\n//     | \"active\"\n//     | \"completed\"\n//     | \"paused\"\n//     | \"resumed\"\n//     | \"removed\"\n//     | \"failed\";\n//   worker?: string;\n// };\n\n// export type ScrapeEvent =\n//   | ScrapeErrorEvent\n//   | ScrapeScrapeEvent\n//   | ScrapeQueueEvent;\n\n// export class ScrapeEvents {\n//   static async insert(jobId: string, content: ScrapeEvent) {\n//     if (jobId === \"TEST\") return null;\n\n//     const useDbAuthentication = process.env.USE_DB_AUTHENTICATION === \"true\";\n//     if (useDbAuthentication) {\n//       try {\n//         const result = await supabase\n//           .from(\"scrape_events\")\n//           .insert({\n//             job_id: jobId,\n//             type: content.type,\n//             content: content,\n//             // created_at\n//           })\n//           .select()\n//           .single();\n//         return (result.data as any).id;\n//       } catch (error) {\n//         // logger.error(`Error inserting scrape event: ${error}`);\n//         return null;\n//       }\n//     }\n\n//     return null;\n//   }\n\n//   static async updateScrapeResult(\n//     logId: number | null,\n//     result: ScrapeScrapeEvent[\"result\"],\n//   ) {\n//     if (logId === null) return;\n\n//     try {\n//       const previousLog = (\n//         await supabase.from(\"scrape_events\").select().eq(\"id\", logId).single()\n//       ).data as any;\n//       await supabase\n//         .from(\"scrape_events\")\n//         .update({\n//           content: {\n//             ...previousLog.content,\n//             result,\n//           },\n//         })\n//         .eq(\"id\", logId);\n//     } catch (error) {\n//       logger.error(`Error updating scrape result: ${error}`);\n//     }\n//   }\n\n//   static async logJobEvent(job: Job | any, event: ScrapeQueueEvent[\"event\"]) {\n//     try {\n//       await this.insert(((job as any).id ? (job as any).id : job) as string, {\n//         type: \"queue\",\n//         event,\n//         worker: process.env.FLY_MACHINE_ID,\n//       });\n//     } catch (error) {\n//       logger.error(`Error logging job event: ${error}`);\n//     }\n//   }\n// }\n"]}