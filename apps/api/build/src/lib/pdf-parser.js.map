{"version":3,"file":"pdf-parser.js","sourceRoot":"","sources":["../../../src/lib/pdf-parser.ts"],"names":[],"mappings":";;;;;AAgEA,oCAKC;AArED,kDAA6C;AAC7C,+BAA4B;AAC5B,0CAAmC;AACnC,2BAA8B;AAE9B,yCAAyC;AACzC,MAAM,kBAAkB,GAAG,IAAA,WAAI,EAC3B,OAAO,CAAC,GAAG,EAAE,EACb,uCAAuC,EACvC,IAAA,aAAQ,GAAE,KAAK,QAAQ,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,kBAAkB,CACvE,CAAC;AAEF,MAAM,aAAa;IACP,MAAM,CAAC,QAAQ,CAAgB;IAC/B,aAAa,CAAgB;IAErC;QACI,MAAM,GAAG,GAAG,eAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC3C,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,IAAI,CAAC,gBAAgB,EAAE,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IACzE,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,iBAAiB;QACjC,IAAI,aAAa,CAAC,QAAQ,EAAE,CAAC;YACzB,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,IAAI,CAAC;YACD,MAAM,IAAA,eAAI,EAAC,kBAAkB,CAAC,CAAC;YAC/B,aAAa,CAAC,QAAQ,GAAG,IAAI,aAAa,EAAE,CAAC;YAC7C,OAAO,IAAI,CAAC;QAChB,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACT,OAAO,KAAK,CAAC;QACjB,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,WAAW;QAC3B,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;YAC1B,IAAI,CAAC;gBACD,MAAM,IAAA,eAAI,EAAC,kBAAkB,CAAC,CAAC;YACnC,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACT,MAAM,KAAK,CAAC,0CAA0C,CAAC,CAAC;YAC5D,CAAC;YACD,aAAa,CAAC,QAAQ,GAAG,IAAI,aAAa,EAAE,CAAC;QACjD,CAAC;QACD,OAAO,aAAa,CAAC,QAAQ,CAAC;IAClC,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,IAAY;QAClC,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC3C,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAU,EAAE,GAAW,EAAE,EAAE;gBACvD,IAAI,GAAG,EAAE,CAAC;oBACN,MAAM,CAAC,GAAG,CAAC,CAAC;gBAChB,CAAC;qBAAM,CAAC;oBACJ,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC;wBACb,MAAM,CAAC,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC;oBAC9C,CAAC;yBAAM,CAAC;wBACJ,OAAO,CAAC,GAAG,CAAC,CAAC;oBACjB,CAAC;gBACL,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAEM,KAAK,UAAU,YAAY,CAC9B,IAAY;IAEZ,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC,WAAW,EAAE,CAAC;IACpD,OAAO,MAAM,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAC9C,CAAC","sourcesContent":["import koffi, { KoffiFunction } from \"koffi\";\nimport { join } from \"path\";\nimport { stat } from \"fs/promises\";\nimport { platform } from \"os\";\n\n// TODO: add a timeout to the Rust parser\nconst rustExecutablePath = join(\n    process.cwd(),\n    \"sharedLibs/pdf-parser/target/release/\",\n    platform() === \"darwin\" ? \"libpdf_parser.dylib\" : \"libpdf_parser.so\"\n);\n\nclass RustPDFParser {\n    private static instance: RustPDFParser;\n    private _getPageCount: KoffiFunction;\n\n    private constructor() {\n        const lib = koffi.load(rustExecutablePath);\n        this._getPageCount = lib.func(\"get_page_count\", \"int32\", [\"string\"]);\n    }\n\n    public static async isParserAvailable(): Promise<boolean> {\n        if (RustPDFParser.instance) {\n            return true;\n        }\n\n        try {\n            await stat(rustExecutablePath);\n            RustPDFParser.instance = new RustPDFParser();\n            return true;\n        } catch (_) {\n            return false;\n        }\n    }\n\n    public static async getInstance(): Promise<RustPDFParser> {\n        if (!RustPDFParser.instance) {\n            try {\n                await stat(rustExecutablePath);\n            } catch (_) {\n                throw Error(\"Rust pdf-parser shared library not found\");\n            }\n            RustPDFParser.instance = new RustPDFParser();\n        }\n        return RustPDFParser.instance;\n    }\n\n    public async getPageCount(path: string): Promise<number> {\n        return new Promise<number>((resolve, reject) => {\n            this._getPageCount.async(path, (err: Error, res: number) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    if (res === -1) {\n                        reject(new Error(\"Failed to parse PDF.\"));\n                    } else {\n                        resolve(res);\n                    }\n                }\n            });\n        });\n    }\n}\n\nexport async function getPageCount(\n    path: string,\n): Promise<number> {\n    const converter = await RustPDFParser.getInstance();\n    return await converter.getPageCount(path);\n}\n"]}