{"version":3,"file":"entities.js","sourceRoot":"","sources":["../../../src/lib/entities.ts"],"names":[],"mappings":";;;AA+FA,MAAa,QAAQ;IACnB,EAAE,CAAU;IACZ,GAAG,CAAU,CAAC,+BAA+B;IAC7C,OAAO,CAAS;IAChB,QAAQ,CAAU;IAClB,IAAI,CAAU;IACd,OAAO,CAAU;IACjB,cAAc,CAAuB;IACrC,SAAS,CAAQ;IACjB,SAAS,CAAQ;IACjB,IAAI,CAAU;IACd,QAAQ,CAGN;IACF,aAAa,CAAY;IACzB,QAAQ,CAAU;IAClB,OAAO,CAAU;IACjB,OAAO,CAGL;IAEF,KAAK,CAAU;IACf,WAAW,CAAY,CAAC,4CAA4C;IAEpE,YAAY,IAAuB;QACjC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC7C,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,IAAI,EAAE,CAAC;QAC9C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,IAAI,EAAE,CAAC;QAC9C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC;QACnC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC;QACnD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;QACpC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,IAAI,SAAS,CAAC;QACrD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,SAAS,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,iCAAiC;IACxE,CAAC;CACF;AAxCD,4BAwCC;AAED,MAAa,YAAY;IACvB,GAAG,CAAS;IACZ,KAAK,CAAS;IACd,WAAW,CAAS;IAEpB,YAAY,GAAW,EAAE,KAAa,EAAE,WAAmB;QACzD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAED,QAAQ;QACN,OAAO,oBAAoB,IAAI,CAAC,GAAG,WAAW,IAAI,CAAC,KAAK,iBAAiB,IAAI,CAAC,WAAW,GAAG,CAAC;IAC/F,CAAC;CACF;AAdD,oCAcC","sourcesContent":["import type { Document as V1Document, Action } from \"../controllers/v1/types\";\n\nexport interface Progress {\n  current: number;\n  total: number;\n  status: string;\n  metadata?: {\n    sourceURL?: string;\n    [key: string]: any;\n  };\n  currentDocumentUrl?: string;\n  currentDocument?: Document;\n}\n\nexport type PageOptions = {\n  includeMarkdown?: boolean;\n  includeExtract?: boolean;\n  onlyMainContent?: boolean;\n  includeHtml?: boolean;\n  includeRawHtml?: boolean;\n  fallback?: boolean;\n  fetchPageContent?: boolean;\n  waitFor?: number;\n  screenshot?: boolean;\n  fullPageScreenshot?: boolean;\n  headers?: Record<string, string>;\n  replaceAllPathsWithAbsolutePaths?: boolean;\n  parsePDF?: boolean;\n  removeTags?: string | string[];\n  onlyIncludeTags?: string | string[];\n  includeLinks?: boolean;\n  useFastMode?: boolean; // beta\n  disableJsDom?: boolean; // beta\n  atsv?: boolean; // anti-bot solver, beta\n  actions?: Action[]; // beta\n  geolocation?: {\n    country?: string;\n  };\n  skipTlsVerification?: boolean;\n  removeBase64Images?: boolean;\n  mobile?: boolean;\n};\n\nexport type ExtractorOptions = {\n  mode:\n    | \"markdown\"\n    | \"llm-extraction\"\n    | \"llm-extraction-from-markdown\"\n    | \"llm-extraction-from-raw-html\";\n  extractionPrompt?: string;\n  extractionSchema?: Record<string, any>;\n  userPrompt?: string;\n};\n\nexport type SearchOptions = {\n  limit?: number;\n  tbs?: string;\n  filter?: string;\n  lang?: string;\n  country?: string;\n  location?: string;\n};\n\nexport type CrawlerOptions = {\n  returnOnlyUrls?: boolean;\n  includes?: string | string[];\n  excludes?: string | string[];\n  maxCrawledLinks?: number;\n  maxDepth?: number;\n  limit?: number;\n  generateImgAltText?: boolean;\n  replaceAllPathsWithAbsolutePaths?: boolean;\n  ignoreSitemap?: boolean;\n  mode?: \"default\" | \"fast\"; // have a mode of some sort\n  allowBackwardCrawling?: boolean;\n  allowExternalContentLinks?: boolean;\n};\n\nexport type WebScraperOptions = {\n  jobId: string;\n  urls: string[];\n  mode: \"single_urls\" | \"sitemap\" | \"crawl\";\n  crawlerOptions?: CrawlerOptions;\n  pageOptions?: PageOptions;\n  extractorOptions?: ExtractorOptions;\n  concurrentRequests?: number;\n  bullJobId?: string;\n  priority?: number;\n  teamId?: string;\n};\n\nexport interface DocumentUrl {\n  url: string;\n}\n\nexport class Document {\n  id?: string;\n  url?: string; // Used only in /search for now\n  content: string;\n  markdown?: string;\n  html?: string;\n  rawHtml?: string;\n  llm_extraction?: Record<string, any>;\n  createdAt?: Date;\n  updatedAt?: Date;\n  type?: string;\n  metadata: {\n    sourceURL?: string;\n    [key: string]: any;\n  };\n  childrenLinks?: string[];\n  provider?: string;\n  warning?: string;\n  actions?: {\n    screenshots?: string[];\n    scrapes?: ScrapeActionContent[];\n  };\n\n  index?: number;\n  linksOnPage?: string[]; // Add this new field as a separate property\n\n  constructor(data: Partial<Document>) {\n    if (!data.content) {\n      throw new Error(\"Missing required fields\");\n    }\n    this.content = data.content;\n    this.createdAt = data.createdAt || new Date();\n    this.updatedAt = data.updatedAt || new Date();\n    this.type = data.type || \"unknown\";\n    this.metadata = data.metadata || { sourceURL: \"\" };\n    this.markdown = data.markdown || \"\";\n    this.childrenLinks = data.childrenLinks || undefined;\n    this.provider = data.provider || undefined;\n    this.linksOnPage = data.linksOnPage; // Assign linksOnPage if provided\n  }\n}\n\nexport class SearchResult {\n  url: string;\n  title: string;\n  description: string;\n\n  constructor(url: string, title: string, description: string) {\n    this.url = url;\n    this.title = title;\n    this.description = description;\n  }\n\n  toString(): string {\n    return `SearchResult(url=${this.url}, title=${this.title}, description=${this.description})`;\n  }\n}\n\nexport interface ScrapeActionContent {\n  url: string;\n  html: string;\n}\n\nexport interface FireEngineResponse {\n  html: string;\n  screenshots?: string[];\n  pageStatusCode?: number;\n  pageError?: string;\n  scrapeActionContent?: ScrapeActionContent[];\n}\n\nexport interface FireEngineOptions {\n  mobileProxy?: boolean;\n  method?: string;\n  engine?: string;\n  blockMedia?: boolean;\n  blockAds?: boolean;\n  disableJsDom?: boolean;\n  atsv?: boolean; // beta\n}\n"]}