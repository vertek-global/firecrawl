{"version":3,"file":"v1.js","sourceRoot":"","sources":["../../../src/routes/v1.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { NextFunction, Request, Response } from \"express\";\nimport { crawlController } from \"../controllers/v1/crawl\";\n// import { crawlStatusController } from \"../../src/controllers/v1/crawl-status\";\nimport { scrapeController } from \"../../src/controllers/v1/scrape\";\nimport { crawlStatusController } from \"../controllers/v1/crawl-status\";\nimport { mapController } from \"../controllers/v1/map\";\nimport {\n  ErrorResponse,\n  isAgentExtractModelValid,\n  RequestWithACUC,\n  RequestWithAuth,\n  RequestWithMaybeAuth,\n} from \"../controllers/v1/types\";\nimport { RateLimiterMode } from \"../types\";\nimport { authenticateUser } from \"../controllers/auth\";\nimport { createIdempotencyKey } from \"../services/idempotency/create\";\nimport { validateIdempotencyKey } from \"../services/idempotency/validate\";\nimport { checkTeamCredits } from \"../services/billing/credit_billing\";\nimport expressWs from \"express-ws\";\nimport { crawlStatusWSController } from \"../controllers/v1/crawl-status-ws\";\nimport { isUrlBlocked } from \"../scraper/WebScraper/utils/blocklist\";\nimport { crawlCancelController } from \"../controllers/v1/crawl-cancel\";\nimport { logger } from \"../lib/logger\";\nimport { scrapeStatusController } from \"../controllers/v1/scrape-status\";\nimport { concurrencyCheckController } from \"../controllers/v1/concurrency-check\";\nimport { batchScrapeController } from \"../controllers/v1/batch-scrape\";\nimport { extractController } from \"../controllers/v1/extract\";\nimport { extractStatusController } from \"../controllers/v1/extract-status\";\nimport { creditUsageController } from \"../controllers/v1/credit-usage\";\nimport { BLOCKLISTED_URL_MESSAGE } from \"../lib/strings\";\nimport { searchController } from \"../controllers/v1/search\";\nimport { crawlErrorsController } from \"../controllers/v1/crawl-errors\";\nimport { generateLLMsTextController } from \"../controllers/v1/generate-llmstxt\";\nimport { generateLLMsTextStatusController } from \"../controllers/v1/generate-llmstxt-status\";\nimport { deepResearchController } from \"../controllers/v1/deep-research\";\nimport { deepResearchStatusController } from \"../controllers/v1/deep-research-status\";\nimport { tokenUsageController } from \"../controllers/v1/token-usage\";\nimport { ongoingCrawlsController } from \"../controllers/v1/crawl-ongoing\";\n\nfunction checkCreditsMiddleware(\n  _minimum?: number,\n): (req: RequestWithAuth, res: Response, next: NextFunction) => void {\n  return (req, res, next) => {\n    let minimum = _minimum;\n    (async () => {\n      if (!minimum && req.body) {\n        minimum =\n          (req.body as any)?.limit ?? (req.body as any)?.urls?.length ?? 1;\n      }\n      const { success, remainingCredits, chunk } = await checkTeamCredits(\n        req.acuc,\n        req.auth.team_id,\n        minimum ?? 1,\n      );\n      if (chunk) {\n        req.acuc = chunk;\n      }\n      req.account = { remainingCredits };\n      if (!success) {\n        if (!minimum && req.body && (req.body as any).limit !== undefined && remainingCredits > 0) {\n          logger.warn(\"Adjusting limit to remaining credits\", {\n            teamId: req.auth.team_id,\n            remainingCredits,\n            request: req.body,\n          });\n          (req.body as any).limit = remainingCredits;\n          return next();\n        }\n\n        const currencyName = req.acuc.is_extract ? \"tokens\" : \"credits\"\n        logger.error(\n          `Insufficient ${currencyName}: ${JSON.stringify({ team_id: req.auth.team_id, minimum, remainingCredits })}`,\n          {\n            teamId: req.auth.team_id,\n            minimum,\n            remainingCredits,\n            request: req.body,\n            path: req.path\n          }\n        );\n        if (!res.headersSent && req.auth.team_id !== \"8c528896-7882-4587-a4b6-768b721b0b53\") {\n          return res.status(402).json({\n            success: false,\n            error:\n              \"Insufficient \" + currencyName + \" to perform this request. For more \" + currencyName + \", you can upgrade your plan at \" + (currencyName === \"credits\" ? \"https://firecrawl.dev/pricing or try changing the request limit to a lower value\" : \"https://www.firecrawl.dev/extract#pricing\") + \".\",\n          });\n        }\n      }\n      next();\n    })().catch((err) => next(err));\n  };\n}\n\nexport function authMiddleware(\n  rateLimiterMode: RateLimiterMode\n): (req: RequestWithMaybeAuth, res: Response, next: NextFunction) => void {\n  return (req, res, next) => {\n    (async () => {\n      let currentRateLimiterMode = rateLimiterMode;\n      if (currentRateLimiterMode === RateLimiterMode.Extract && isAgentExtractModelValid((req.body as any)?.agent?.model)) {\n        currentRateLimiterMode = RateLimiterMode.ExtractAgentPreview;\n      }\n\n      // if (currentRateLimiterMode === RateLimiterMode.Scrape && isAgentExtractModelValid((req.body as any)?.agent?.model)) {\n      //   currentRateLimiterMode = RateLimiterMode.ScrapeAgentPreview;\n      // }\n\n      const auth = await authenticateUser(req, res, currentRateLimiterMode);\n\n      if (!auth.success) {\n        if (!res.headersSent) {\n          return res\n            .status(auth.status)\n            .json({ success: false, error: auth.error });\n        } else {\n          return;\n        }\n      }\n\n      const { team_id, chunk } = auth;\n\n      req.auth = { team_id };\n      req.acuc = chunk ?? undefined;\n      if (chunk) {\n        req.account = { remainingCredits: chunk.remaining_credits };\n      }\n      next();\n    })().catch((err) => next(err));\n  };\n}\n\nfunction idempotencyMiddleware(\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) {\n  (async () => {\n    if (req.headers[\"x-idempotency-key\"]) {\n      const isIdempotencyValid = await validateIdempotencyKey(req);\n      if (!isIdempotencyValid) {\n        if (!res.headersSent) {\n          return res\n            .status(409)\n            .json({ success: false, error: \"Idempotency key already used\" });\n        }\n      }\n      createIdempotencyKey(req);\n    }\n    next();\n  })().catch((err) => next(err));\n}\n\nfunction blocklistMiddleware(req: RequestWithACUC<any, any, any>, res: Response, next: NextFunction) {\n  if (typeof req.body.url === \"string\" && isUrlBlocked(req.body.url, req.acuc?.flags ?? null)) {\n    if (!res.headersSent) {\n      return res.status(403).json({\n        success: false,\n        error: BLOCKLISTED_URL_MESSAGE,\n      });\n    }\n  }\n  next();\n}\n\nexport function wrap(\n  controller: (req: Request, res: Response) => Promise<any>,\n): (req: Request, res: Response, next: NextFunction) => any {\n  return (req, res, next) => {\n    controller(req, res).catch((err) => next(err));\n  };\n}\n\nexpressWs(express());\n\nexport const v1Router = express.Router();\n\nv1Router.post(\n  \"/scrape\",\n  authMiddleware(RateLimiterMode.Scrape),\n  checkCreditsMiddleware(1),\n  blocklistMiddleware,\n  wrap(scrapeController),\n);\n\nv1Router.post(\n  \"/crawl\",\n  authMiddleware(RateLimiterMode.Crawl),\n  checkCreditsMiddleware(),\n  blocklistMiddleware,\n  idempotencyMiddleware,\n  wrap(crawlController),\n);\n\nv1Router.post(\n  \"/batch/scrape\",\n  authMiddleware(RateLimiterMode.Scrape),\n  checkCreditsMiddleware(),\n  blocklistMiddleware,\n  idempotencyMiddleware,\n  wrap(batchScrapeController),\n);\n\nv1Router.post(\n  \"/search\",\n  authMiddleware(RateLimiterMode.Search),\n  checkCreditsMiddleware(),\n  wrap(searchController),\n);\n\nv1Router.post(\n  \"/map\",\n  authMiddleware(RateLimiterMode.Map),\n  checkCreditsMiddleware(1),\n  blocklistMiddleware,\n  wrap(mapController),\n);\n\nv1Router.get(\n  \"/crawl/ongoing\",\n  authMiddleware(RateLimiterMode.CrawlStatus),\n  wrap(ongoingCrawlsController),\n);\n\n// Public facing, same as ongoing\nv1Router.get(\n  \"/crawl/active\",\n  authMiddleware(RateLimiterMode.CrawlStatus),\n  wrap(ongoingCrawlsController),\n);\n\nv1Router.get(\n  \"/crawl/:jobId\",\n  authMiddleware(RateLimiterMode.CrawlStatus),\n  wrap(crawlStatusController),\n);\n\nv1Router.get(\n  \"/batch/scrape/:jobId\",\n  authMiddleware(RateLimiterMode.CrawlStatus),\n  // Yes, it uses the same controller as the normal crawl status controller\n  wrap((req: any, res): any => crawlStatusController(req, res, true)),\n);\n\nv1Router.get(\n  \"/crawl/:jobId/errors\",\n  authMiddleware(RateLimiterMode.CrawlStatus),\n  wrap(crawlErrorsController),\n);\n\nv1Router.get(\n  \"/batch/scrape/:jobId/errors\",\n  authMiddleware(RateLimiterMode.CrawlStatus),\n  wrap(crawlErrorsController),\n);\n\nv1Router.get(\n  \"/scrape/:jobId\",\n  authMiddleware(RateLimiterMode.CrawlStatus),\n  wrap(scrapeStatusController),\n);\n\nv1Router.get(\n  \"/concurrency-check\",\n  authMiddleware(RateLimiterMode.CrawlStatus),\n  wrap(concurrencyCheckController),\n);\n\nv1Router.ws(\"/crawl/:jobId\", crawlStatusWSController);\n\nv1Router.post(\n  \"/extract\",\n  authMiddleware(RateLimiterMode.Extract),\n  checkCreditsMiddleware(1),\n  wrap(extractController),\n);\n\nv1Router.get(\n  \"/extract/:jobId\",\n  authMiddleware(RateLimiterMode.ExtractStatus),\n  wrap(extractStatusController),\n);\n\nv1Router.post(\n  \"/llmstxt\",\n  authMiddleware(RateLimiterMode.Scrape),\n  blocklistMiddleware,\n  wrap(generateLLMsTextController),\n);\n\nv1Router.get(\n  \"/llmstxt/:jobId\",\n  authMiddleware(RateLimiterMode.CrawlStatus),\n  wrap(generateLLMsTextStatusController),\n);\n\nv1Router.post(\n  \"/deep-research\",\n  authMiddleware(RateLimiterMode.Crawl),\n  checkCreditsMiddleware(1),\n  wrap(deepResearchController),\n);\n\nv1Router.get(\n  \"/deep-research/:jobId\",\n  authMiddleware(RateLimiterMode.CrawlStatus),\n  wrap(deepResearchStatusController),\n);\n\n// v1Router.post(\"/crawlWebsitePreview\", crawlPreviewController);\n\nv1Router.delete(\n  \"/crawl/:jobId\",\n  authMiddleware(RateLimiterMode.CrawlStatus),\n  crawlCancelController,\n);\n\nv1Router.delete(\n  \"/batch/scrape/:jobId\",\n  authMiddleware(RateLimiterMode.CrawlStatus),\n  crawlCancelController,\n);\n// v1Router.get(\"/checkJobStatus/:jobId\", crawlJobStatusPreviewController);\n\n// // Auth route for key based authentication\n// v1Router.get(\"/keyAuth\", keyAuthController);\n\n// // Search routes\n// v0Router.post(\"/search\", searchController);\n\n// Health/Probe routes\n// v1Router.get(\"/health/liveness\", livenessController);\n// v1Router.get(\"/health/readiness\", readinessController);\n\nv1Router.get(\n  \"/team/credit-usage\",\n  authMiddleware(RateLimiterMode.CrawlStatus),\n  wrap(creditUsageController),\n);\n\nv1Router.get(\n  \"/team/token-usage\",\n  authMiddleware(RateLimiterMode.ExtractStatus),\n  wrap(tokenUsageController),\n);\n"]}