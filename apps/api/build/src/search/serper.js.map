{"version":3,"file":"serper.js","sourceRoot":"","sources":["../../../src/search/serper.ts"],"names":[],"mappings":";;;;;AAMA,sCAyCC;AA/CD,kDAA0B;AAC1B,oDAA4B;AAG5B,gBAAM,CAAC,MAAM,EAAE,CAAC;AAET,KAAK,UAAU,aAAa,CACjC,CAAC,EACD,OAQC;IAED,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC,EAAE,CAAC;QACJ,EAAE,EAAE,OAAO,CAAC,IAAI;QAChB,EAAE,EAAE,OAAO,CAAC,OAAO;QACnB,QAAQ,EAAE,OAAO,CAAC,QAAQ;QAC1B,GAAG,EAAE,OAAO,CAAC,GAAG;QAChB,GAAG,EAAE,OAAO,CAAC,WAAW;QACxB,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC;KACxB,CAAC,CAAC;IAEH,IAAI,MAAM,GAAG;QACX,MAAM,EAAE,MAAM;QACd,GAAG,EAAE,kCAAkC;QACvC,OAAO,EAAE;YACP,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc;YACvC,cAAc,EAAE,kBAAkB;SACnC;QACD,IAAI,EAAE,IAAI;KACX,CAAC;IACF,MAAM,QAAQ,GAAG,MAAM,IAAA,eAAK,EAAC,MAAM,CAAC,CAAC;IACrC,IAAI,QAAQ,IAAI,QAAQ,CAAC,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;QACtE,OAAO,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACvC,GAAG,EAAE,CAAC,CAAC,IAAI;YACX,KAAK,EAAE,CAAC,CAAC,KAAK;YACd,WAAW,EAAE,CAAC,CAAC,OAAO;SACvB,CAAC,CAAC,CAAC;IACN,CAAC;SAAM,CAAC;QACN,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC","sourcesContent":["import axios from \"axios\";\nimport dotenv from \"dotenv\";\nimport { SearchResult } from \"../../src/lib/entities\";\n\ndotenv.config();\n\nexport async function serper_search(\n  q,\n  options: {\n    tbs?: string;\n    filter?: string;\n    lang?: string;\n    country?: string;\n    location?: string;\n    num_results: number;\n    page?: number;\n  },\n): Promise<SearchResult[]> {\n  let data = JSON.stringify({\n    q: q,\n    hl: options.lang,\n    gl: options.country,\n    location: options.location,\n    tbs: options.tbs,\n    num: options.num_results,\n    page: options.page ?? 1,\n  });\n\n  let config = {\n    method: \"POST\",\n    url: \"https://google.serper.dev/search\",\n    headers: {\n      \"X-API-KEY\": process.env.SERPER_API_KEY,\n      \"Content-Type\": \"application/json\",\n    },\n    data: data,\n  };\n  const response = await axios(config);\n  if (response && response.data && Array.isArray(response.data.organic)) {\n    return response.data.organic.map((a) => ({\n      url: a.link,\n      title: a.title,\n      description: a.snippet,\n    }));\n  } else {\n    return [];\n  }\n}\n"]}