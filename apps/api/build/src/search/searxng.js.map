{"version":3,"file":"searxng.js","sourceRoot":"","sources":["../../../src/search/searxng.ts"],"names":[],"mappings":";;;;;AAiBA,wCA8CC;AA/DD,kDAA0B;AAC1B,oDAA4B;AAE5B,0CAAsC;AAEtC,gBAAM,CAAC,MAAM,EAAE,CAAC;AAYT,KAAK,UAAU,cAAc,CAClC,CAAS,EACT,OAAsB;IAEtB,MAAM,MAAM,GAAG;QACb,CAAC,EAAE,CAAC;QACJ,QAAQ,EAAE,OAAO,CAAC,IAAI;QACtB,mDAAmD;QACnD,0DAA0D;QAC1D,wDAAwD;QACxD,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,EAAE;QAC1C,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,EAAE;QAChD,MAAM,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC;QACzB,MAAM,EAAE,MAAM;KACf,CAAC;IAEF,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAiB,CAAC;IAC1C,qCAAqC;IACrC,MAAM,UAAU,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAE9D,2CAA2C;IAC3C,MAAM,QAAQ,GAAG,UAAU,GAAG,SAAS,CAAC;IAExC,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,QAAQ,EAAE;YACzC,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;YACD,MAAM,EAAE,MAAM;SACf,CAAC,CAAC;QAEH,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;QAE3B,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;YACxC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC;gBACnC,GAAG,EAAE,CAAC,CAAC,GAAG;gBACV,KAAK,EAAE,CAAC,CAAC,KAAK;gBACd,WAAW,EAAE,CAAC,CAAC,OAAO;aACvB,CAAC,CAAC,CAAC;QACN,CAAC;aAAM,CAAC;YACN,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,eAAM,CAAC,KAAK,CAAC,0CAA0C,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QACpE,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC","sourcesContent":["import axios from \"axios\";\nimport dotenv from \"dotenv\";\nimport { SearchResult } from \"../../src/lib/entities\";\nimport { logger } from \"../lib/logger\"\n\ndotenv.config();\n\ninterface SearchOptions {\n  tbs?: string;\n  filter?: string;\n  lang?: string;\n  country?: string;\n  location?: string;\n  num_results: number;\n  page?: number;\n}\n\nexport async function searxng_search(\n  q: string,\n  options: SearchOptions,\n): Promise<SearchResult[]> {\n  const params = {\n    q: q,\n    language: options.lang,\n    // gl: options.country, //not possible with SearXNG\n    // location: options.location, //not possible with SearXNG\n    // num: options.num_results, //not possible with SearXNG\n    engines: process.env.SEARXNG_ENGINES || \"\",\n    categories: process.env.SEARXNG_CATEGORIES || \"\",\n    pageno: options.page ?? 1,\n    format: \"json\"\n  };\n\n  const url = process.env.SEARXNG_ENDPOINT!;\n  // Remove trailing slash if it exists\n  const cleanedUrl = url.endsWith('/') ? url.slice(0, -1) : url;\n\n  // Concatenate \"/search\" to the cleaned URL\n  const finalUrl = cleanedUrl + \"/search\";\n\n  try {\n    const response = await axios.get(finalUrl, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      params: params,\n    });\n\n    const data = response.data;\n\n    if (data && Array.isArray(data.results)) {\n      return data.results.map((a: any) => ({\n        url: a.url,\n        title: a.title,\n        description: a.content,\n      }));\n    } else {\n      return [];\n    }\n  } catch (error) {\n    logger.error(`There was an error searching for content`, { error });\n    return [];\n  }\n}\n"]}