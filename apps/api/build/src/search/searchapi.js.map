{"version":3,"file":"searchapi.js","sourceRoot":"","sources":["../../../src/search/searchapi.ts"],"names":[],"mappings":";;;;;AAgBA,4CA6CC;AA7DD,kDAA0B;AAC1B,oDAA4B;AAG5B,gBAAM,CAAC,MAAM,EAAE,CAAC;AAYT,KAAK,UAAU,gBAAgB,CACpC,CAAS,EACT,OAAsB;IAEtB,MAAM,MAAM,GAAG;QACb,CAAC,EAAE,CAAC;QACJ,EAAE,EAAE,OAAO,CAAC,IAAI;QAChB,EAAE,EAAE,OAAO,CAAC,OAAO;QACnB,QAAQ,EAAE,OAAO,CAAC,QAAQ;QAC1B,GAAG,EAAE,OAAO,CAAC,WAAW;QACxB,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC;QACvB,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,QAAQ;KACjD,CAAC;IAEF,MAAM,GAAG,GAAG,wCAAwC,CAAC;IAErD,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,GAAG,EAAE;YACpC,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE;gBACxD,cAAc,EAAE,kBAAkB;gBAClC,oBAAoB,EAAE,WAAW;aAClC;YACD,MAAM,EAAE,MAAM;SACf,CAAC,CAAC;QAEH,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;QAC9D,CAAC;QAED,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;QAE3B,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC;YAChD,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC;gBAC3C,GAAG,EAAE,CAAC,CAAC,IAAI;gBACX,KAAK,EAAE,CAAC,CAAC,KAAK;gBACd,WAAW,EAAE,CAAC,CAAC,OAAO;aACvB,CAAC,CAAC,CAAC;QACN,CAAC;aAAM,CAAC;YACN,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,6CAA6C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC5E,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC","sourcesContent":["import axios from \"axios\";\nimport dotenv from \"dotenv\";\nimport { SearchResult } from \"../../src/lib/entities\";\n\ndotenv.config();\n\ninterface SearchOptions {\n  tbs?: string;\n  filter?: string;\n  lang?: string;\n  country?: string;\n  location?: string;\n  num_results: number;\n  page?: number;\n}\n\nexport async function searchapi_search(\n  q: string,\n  options: SearchOptions,\n): Promise<SearchResult[]> {\n  const params = {\n    q: q,\n    hl: options.lang,\n    gl: options.country,\n    location: options.location,\n    num: options.num_results,\n    page: options.page ?? 1,\n    engine: process.env.SEARCHAPI_ENGINE || \"google\",\n  };\n\n  const url = `https://www.searchapi.io/api/v1/search`;\n\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${process.env.SEARCHAPI_API_KEY}`,\n        \"Content-Type\": \"application/json\",\n        \"X-SearchApi-Source\": \"Firecrawl\",\n      },\n      params: params,\n    });\n\n    if (response.status === 401) {\n      throw new Error(\"Unauthorized. Please check your API key.\");\n    }\n\n    const data = response.data;\n\n    if (data && Array.isArray(data.organic_results)) {\n      return data.organic_results.map((a: any) => ({\n        url: a.link,\n        title: a.title,\n        description: a.snippet,\n      }));\n    } else {\n      return [];\n    }\n  } catch (error) {\n    console.error(`There was an error searching for content: ${error.message}`);\n    return [];\n  }\n}\n"]}