{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../../../src/__tests__/e2e_v1_withAuth_all_params/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import request from \"supertest\";\nimport { configDotenv } from \"dotenv\";\nimport { ScrapeRequest } from \"../../controllers/v1/types\";\n\nconfigDotenv();\nconst FIRECRAWL_API_URL = \"http://127.0.0.1:3002\";\nconst E2E_TEST_SERVER_URL = \"http://firecrawl-e2e-test.vercel.app\"; // @rafaelsideguide/firecrawl-e2e-test\n\ndescribe(\"E2E Tests for v1 API Routes\", () => {\n  it.concurrent(\n    \"should return a successful response for a scrape with 403 page\",\n    async () => {\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: \"https://httpstat.us/403\" });\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      expect(response.body.data).toHaveProperty(\"markdown\");\n      expect(response.body.data).toHaveProperty(\"metadata\");\n      expect(response.body.data.metadata.statusCode).toBe(403);\n    },\n    30000,\n  );\n\n  it.concurrent(\n    \"should handle 'formats:markdown (default)' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n\n      expect(response.body.data).toHaveProperty(\"markdown\");\n\n      expect(response.body.data.markdown).toContain(\n        \"This page is used for end-to-end (e2e) testing with Firecrawl.\",\n      );\n      expect(response.body.data.markdown).toContain(\n        \"Content with id #content-1\",\n      );\n      // expect(response.body.data.markdown).toContain(\"Loading...\");\n      expect(response.body.data.markdown).toContain(\"Click me!\");\n      expect(response.body.data.markdown).toContain(\n        \"Power your AI apps with clean data crawled from any website. It's also open-source.\",\n      ); // firecrawl.dev inside an iframe\n      expect(response.body.data.markdown).toContain(\n        \"This content loads only when you see it. Don't blink! 👼\",\n      ); // the browser always scroll to the bottom\n      expect(response.body.data.markdown).not.toContain(\"Header\"); // Only main content is returned by default\n      expect(response.body.data.markdown).not.toContain(\"footer\"); // Only main content is returned by default\n      expect(response.body.data.markdown).not.toContain(\n        \"This content is only visible on mobile\",\n      );\n    },\n    30000,\n  );\n\n  it.concurrent(\n    \"should handle 'formats:html' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        formats: [\"html\"],\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n\n      expect(response.body.data).not.toHaveProperty(\"markdown\");\n      expect(response.body.data).toHaveProperty(\"html\");\n\n      expect(response.body.data.html).not.toContain(\n        '<header class=\"row-start-1\" style=\"\">Header</header>',\n      );\n      expect(response.body.data.html).toContain(\n        '<p style=\"\">This page is used for end-to-end (e2e) testing with Firecrawl.</p>',\n      );\n    },\n    30000,\n  );\n\n  it.concurrent(\n    \"should handle 'rawHtml' in 'formats' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        formats: [\"rawHtml\"],\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n\n      expect(response.body.data).not.toHaveProperty(\"markdown\");\n      expect(response.body.data).toHaveProperty(\"rawHtml\");\n\n      expect(response.body.data.rawHtml).toContain(\n        \">This page is used for end-to-end (e2e) testing with Firecrawl.</p>\",\n      );\n      expect(response.body.data.rawHtml).toContain(\">Header</header>\");\n    },\n    30000,\n  );\n\n  // - TODO: tests for links\n  // - TODO: tests for screenshot\n  // - TODO: tests for screenshot@fullPage\n\n  it.concurrent(\n    \"should handle 'headers' parameter correctly\",\n    async () => {\n      // @ts-ignore\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        headers: { \"e2e-header-test\": \"firecrawl\" },\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n\n      expect(response.body.data.markdown).toContain(\n        \"e2e-header-test: firecrawl\",\n      );\n    },\n    30000,\n  );\n\n  it.concurrent(\n    \"should handle 'includeTags' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        includeTags: [\"#content-1\"],\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n\n      expect(response.body.data.markdown).not.toContain(\n        \"<p>This page is used for end-to-end (e2e) testing with Firecrawl.</p>\",\n      );\n      expect(response.body.data.markdown).toContain(\n        \"Content with id #content-1\",\n      );\n    },\n    30000,\n  );\n\n  it.concurrent(\n    \"should handle 'excludeTags' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        excludeTags: [\"#content-1\"],\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n\n      expect(response.body.data.markdown).toContain(\n        \"This page is used for end-to-end (e2e) testing with Firecrawl.\",\n      );\n      expect(response.body.data.markdown).not.toContain(\n        \"Content with id #content-1\",\n      );\n    },\n    30000,\n  );\n\n  it.concurrent(\n    \"should handle 'onlyMainContent' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        formats: [\"html\", \"markdown\"],\n        onlyMainContent: false,\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n\n      expect(response.body.data.markdown).toContain(\n        \"This page is used for end-to-end (e2e) testing with Firecrawl.\",\n      );\n      expect(response.body.data.html).toContain(\n        '<header class=\"row-start-1\" style=\"\">Header</header>',\n      );\n    },\n    30000,\n  );\n\n  it.concurrent(\n    \"should handle 'timeout' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        timeout: 500,\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(408);\n\n      if (!(\"error\" in response.body)) {\n        throw new Error(\"Expected response body to have 'error' property\");\n      }\n      expect(response.body.error).toBe(\"Request timed out\");\n      expect(response.body.success).toBe(false);\n    },\n    30000,\n  );\n\n  it.concurrent(\n    \"should handle 'mobile' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        mobile: true,\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      expect(response.body.data.markdown).toContain(\n        \"This content is only visible on mobile\",\n      );\n    },\n    30000,\n  );\n\n  it.concurrent(\n    \"should handle 'parsePDF' parameter correctly\",\n    async () => {\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: \"https://arxiv.org/pdf/astro-ph/9301001.pdf\" });\n      await new Promise((r) => setTimeout(r, 6000));\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n\n      expect(response.body.data.markdown).toContain(\n        \"arXiv:astro-ph/9301001v1 7 Jan 1993\",\n      );\n      expect(response.body.data.markdown).not.toContain(\n        \"h7uKu14adDL6yGfnGf2qycY5uq8kC3OKCWkPxm\",\n      );\n\n      const responseNoParsePDF: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          url: \"https://arxiv.org/pdf/astro-ph/9301001.pdf\",\n          parsePDF: false,\n        });\n      await new Promise((r) => setTimeout(r, 6000));\n\n      expect(responseNoParsePDF.statusCode).toBe(200);\n      expect(responseNoParsePDF.body).toHaveProperty(\"data\");\n      if (!(\"data\" in responseNoParsePDF.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      expect(responseNoParsePDF.body.data.markdown).toContain(\n        \"h7uKu14adDL6yGfnGf2qycY5uq8kC3OKCWkPxm\",\n      );\n    },\n    30000,\n  );\n\n  // it.concurrent(\"should handle 'location' parameter correctly\",\n  //   async () => {\n  //     const scrapeRequest: ScrapeRequest = {\n  //       url: \"https://roastmywebsite.ai\",\n  //       location: {\n  //         country: \"US\",\n  //         languages: [\"en\"]\n  //       }\n  //     };\n\n  //     const response: any = await request(FIRECRAWL_API_URL)\n  //       .post(\"/v1/scrape\")\n  //       .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n  //       .set(\"Content-Type\", \"application/json\")\n  //       .send(scrapeRequest);\n\n  //     expect(response.statusCode).toBe(200);\n  //     // Add assertions to verify location is handled correctly\n  //   },\n  // 30000);\n\n  it.concurrent(\n    \"should handle 'skipTlsVerification' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: \"https://expired.badssl.com/\",\n        timeout: 120000,\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n      console.log(\"Error1a\");\n      // console.log(response.body)\n      expect(response.statusCode).toBe(200);\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      expect(response.body.data.metadata.pageStatusCode).toBe(500);\n      console.log(\"Error?\");\n\n      const scrapeRequestWithSkipTlsVerification = {\n        url: \"https://expired.badssl.com/\",\n        skipTlsVerification: true,\n        timeout: 120000,\n      } as ScrapeRequest;\n\n      const responseWithSkipTlsVerification: any = await request(\n        FIRECRAWL_API_URL,\n      )\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequestWithSkipTlsVerification);\n\n      console.log(\"Error1b\");\n      // console.log(responseWithSkipTlsVerification.body)\n      expect(responseWithSkipTlsVerification.statusCode).toBe(200);\n      if (!(\"data\" in responseWithSkipTlsVerification.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      // console.log(responseWithSkipTlsVerification.body.data)\n      expect(responseWithSkipTlsVerification.body.data.markdown).toContain(\n        \"badssl.com\",\n      );\n    },\n    60000,\n  );\n\n  it.concurrent(\n    \"should handle 'removeBase64Images' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        removeBase64Images: true,\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      // console.log(response.body.data.markdown)\n      // - TODO: not working for every image\n      // expect(response.body.data.markdown).toContain(\"Image-Removed\");\n    },\n    30000,\n  );\n\n  it.concurrent(\n    \"should handle 'action wait' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        actions: [\n          {\n            type: \"wait\",\n            milliseconds: 10000,\n          },\n        ],\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      expect(response.body.data.markdown).not.toContain(\"Loading...\");\n      expect(response.body.data.markdown).toContain(\n        \"Content loaded after 5 seconds!\",\n      );\n    },\n    30000,\n  );\n\n  // screenshot\n  it.concurrent(\n    \"should handle 'action screenshot' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        actions: [\n          {\n            type: \"screenshot\",\n          },\n        ],\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      if (!response.body.data.actions?.screenshots) {\n        throw new Error(\"Expected response body to have screenshots array\");\n      }\n      expect(response.body.data.actions.screenshots[0].length).toBeGreaterThan(\n        0,\n      );\n      expect(response.body.data.actions.screenshots[0]).toContain(\n        \"https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-\",\n      );\n\n      // TODO compare screenshot with expected screenshot\n    },\n    30000,\n  );\n\n  it.concurrent(\n    \"should handle 'action screenshot@fullPage' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        actions: [\n          {\n            type: \"screenshot\",\n            fullPage: true,\n          },\n          {\n            type: \"scrape\",\n          },\n        ],\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      // console.log(response.body.data.actions?.screenshots[0])\n      if (!response.body.data.actions?.screenshots) {\n        throw new Error(\"Expected response body to have screenshots array\");\n      }\n      expect(response.body.data.actions.screenshots[0].length).toBeGreaterThan(\n        0,\n      );\n      expect(response.body.data.actions.screenshots[0]).toContain(\n        \"https://service.firecrawl.dev/storage/v1/object/public/media/screenshot-\",\n      );\n\n      if (!response.body.data.actions?.scrapes) {\n        throw new Error(\"Expected response body to have scrapes array\");\n      }\n      expect(response.body.data.actions.scrapes[0].url).toBe(\n        \"https://firecrawl-e2e-test.vercel.app/\",\n      );\n      expect(response.body.data.actions.scrapes[0].html).toContain(\n        \"This page is used for end-to-end (e2e) testing with Firecrawl.</p>\",\n      );\n      // TODO compare screenshot with expected full page screenshot\n    },\n    30000,\n  );\n\n  it.concurrent(\n    \"should handle 'action click' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        actions: [\n          {\n            type: \"click\",\n            selector: \"#click-me\",\n          },\n        ],\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n      expect(response.body.data.markdown).not.toContain(\"Click me!\");\n      expect(response.body.data.markdown).toContain(\n        \"Text changed after click!\",\n      );\n    },\n    30000,\n  );\n\n  it.concurrent(\n    \"should handle 'action write' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        formats: [\"html\"],\n        actions: [\n          {\n            type: \"click\",\n            selector: \"#input-1\",\n          },\n          {\n            type: \"write\",\n            text: \"Hello, world!\",\n          },\n        ],\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      expect(response.statusCode).toBe(200);\n      if (!(\"data\" in response.body)) {\n        throw new Error(\"Expected response body to have 'data' property\");\n      }\n\n      // TODO: fix this test (need to fix fire-engine first)\n      // uncomment the following line:\n      // expect(response.body.data.html).toContain(\"<input id=\\\"input-1\\\" type=\\\"text\\\" placeholder=\\\"Enter text here...\\\" style=\\\"padding:8px;margin:10px;border:1px solid #ccc;border-radius:4px;background-color:#000\\\" value=\\\"Hello, world!\\\">\");\n    },\n    30000,\n  );\n\n  // TODO: fix this test (need to fix fire-engine first)\n  it.concurrent(\n    \"should handle 'action pressKey' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        formats: [\"markdown\"],\n        actions: [\n          {\n            type: \"press\",\n            key: \"ArrowDown\",\n          },\n        ],\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      // // TODO: fix this test (need to fix fire-engine first)\n      // // right now response.body is: { success: false, error: '(Internal server error) - null' }\n      // expect(response.statusCode).toBe(200);\n      // if (!(\"data\" in response.body)) {\n      //   throw new Error(\"Expected response body to have 'data' property\");\n      // }\n      // expect(response.body.data.markdown).toContain(\"Last Key Clicked: ArrowDown\")\n    },\n    30000,\n  );\n\n  // TODO: fix this test (need to fix fire-engine first)\n  it.concurrent(\n    \"should handle 'action scroll' parameter correctly\",\n    async () => {\n      const scrapeRequest = {\n        url: E2E_TEST_SERVER_URL,\n        formats: [\"markdown\"],\n        actions: [\n          {\n            type: \"click\",\n            selector: \"#scroll-bottom-loader\",\n          },\n          {\n            type: \"scroll\",\n            direction: \"down\",\n            amount: 2000,\n          },\n        ],\n      } as ScrapeRequest;\n\n      const response: any = await request(FIRECRAWL_API_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(scrapeRequest);\n\n      // TODO: uncomment this tests\n      // expect(response.statusCode).toBe(200);\n      // if (!(\"data\" in response.body)) {\n      //   throw new Error(\"Expected response body to have 'data' property\");\n      // }\n      //\n      // expect(response.body.data.markdown).toContain(\"You have reached the bottom!\")\n    },\n    30000,\n  );\n\n  // TODO: test scrape action\n});\n"]}