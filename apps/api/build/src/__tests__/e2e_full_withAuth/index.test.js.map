{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../../../src/__tests__/e2e_full_withAuth/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import request from \"supertest\";\nimport dotenv from \"dotenv\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { BLOCKLISTED_URL_MESSAGE } from \"../../lib/strings\";\n\ndotenv.config();\n\n// const TEST_URL = 'http://localhost:3002'\nconst TEST_URL = \"http://127.0.0.1:3002\";\n\ndescribe(\"E2E Tests for API Routes\", () => {\n  beforeAll(() => {\n    process.env.USE_DB_AUTHENTICATION = \"true\";\n  });\n\n  afterAll(() => {\n    delete process.env.USE_DB_AUTHENTICATION;\n  });\n  describe(\"GET /\", () => {\n    it.concurrent(\"should return Hello, world! message\", async () => {\n      const response = await request(TEST_URL).get(\"/\");\n\n      expect(response.statusCode).toBe(200);\n      expect(response.text).toContain(\"SCRAPERS-JS: Hello, world! Fly.io\");\n    });\n  });\n\n  describe(\"GET /test\", () => {\n    it.concurrent(\"should return Hello, world! message\", async () => {\n      const response = await request(TEST_URL).get(\"/test\");\n      expect(response.statusCode).toBe(200);\n      expect(response.text).toContain(\"Hello, world!\");\n    });\n  });\n\n  describe(\"POST /v0/scrape\", () => {\n    it.concurrent(\"should require authorization\", async () => {\n      const response = await request(TEST_URL).post(\"/v0/scrape\");\n      expect(response.statusCode).toBe(401);\n    });\n\n    it.concurrent(\n      \"should return an error response with an invalid API key\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer invalid-api-key`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://firecrawl.dev\" });\n        expect(response.statusCode).toBe(401);\n      },\n    );\n\n    it.concurrent(\"should return an error for a blocklisted URL\", async () => {\n      const blocklistedUrl = \"https://facebook.com/fake-test\";\n      const response = await request(TEST_URL)\n        .post(\"/v0/scrape\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: blocklistedUrl });\n      expect(response.statusCode).toBe(403);\n      expect(response.body.error).toContain(BLOCKLISTED_URL_MESSAGE);\n    });\n\n\n    it.concurrent(\n      \"should return a successful response with a valid API key\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://roastmywebsite.ai\" });\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"markdown\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data).not.toHaveProperty(\"html\");\n        expect(response.body.data.content).toContain(\"_Roast_\");\n        expect(response.body.data.metadata).toHaveProperty(\"title\");\n        expect(response.body.data.metadata).toHaveProperty(\"description\");\n        expect(response.body.data.metadata).toHaveProperty(\"keywords\");\n        expect(response.body.data.metadata).toHaveProperty(\"robots\");\n        expect(response.body.data.metadata).toHaveProperty(\"ogTitle\");\n        expect(response.body.data.metadata).toHaveProperty(\"ogDescription\");\n        expect(response.body.data.metadata).toHaveProperty(\"ogUrl\");\n        expect(response.body.data.metadata).toHaveProperty(\"ogImage\");\n        expect(response.body.data.metadata).toHaveProperty(\"ogLocaleAlternate\");\n        expect(response.body.data.metadata).toHaveProperty(\"ogSiteName\");\n        expect(response.body.data.metadata).toHaveProperty(\"sourceURL\");\n        expect(response.body.data.metadata).toHaveProperty(\"pageStatusCode\");\n        expect(response.body.data.metadata.pageError).toBeUndefined();\n        expect(response.body.data.metadata.title).toBe(\"Roast My Website\");\n        expect(response.body.data.metadata.description).toBe(\n          \"Welcome to Roast My Website, the ultimate tool for putting your website through the wringer! This repository harnesses the power of Firecrawl to scrape and capture screenshots of websites, and then unleashes the latest LLM vision models to mercilessly roast them. 🌶️\",\n        );\n        expect(response.body.data.metadata.keywords).toBe(\n          \"Roast My Website,Roast,Website,GitHub,Firecrawl\",\n        );\n        expect(response.body.data.metadata.robots).toBe(\"follow, index\");\n        expect(response.body.data.metadata.ogTitle).toBe(\"Roast My Website\");\n        expect(response.body.data.metadata.ogDescription).toBe(\n          \"Welcome to Roast My Website, the ultimate tool for putting your website through the wringer! This repository harnesses the power of Firecrawl to scrape and capture screenshots of websites, and then unleashes the latest LLM vision models to mercilessly roast them. 🌶️\",\n        );\n        expect(response.body.data.metadata.ogUrl).toBe(\n          \"https://www.roastmywebsite.ai\",\n        );\n        expect(response.body.data.metadata.ogImage).toBe(\n          \"https://www.roastmywebsite.ai/og.png\",\n        );\n        expect(response.body.data.metadata.ogLocaleAlternate).toStrictEqual([]);\n        expect(response.body.data.metadata.ogSiteName).toBe(\"Roast My Website\");\n        expect(response.body.data.metadata.sourceURL).toBe(\n          \"https://roastmywebsite.ai\",\n        );\n        expect(response.body.data.metadata.pageStatusCode).toBe(200);\n      },\n      30000,\n    ); // 30 seconds timeout\n\n    it.concurrent(\n      \"should return a successful response with a valid API key and includeHtml set to true\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://roastmywebsite.ai\",\n            pageOptions: { includeHtml: true },\n          });\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"markdown\");\n        expect(response.body.data).toHaveProperty(\"html\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.content).toContain(\"_Roast_\");\n        expect(response.body.data.markdown).toContain(\"_Roast_\");\n        expect(response.body.data.html).toContain(\"<h1\");\n        expect(response.body.data.metadata.pageStatusCode).toBe(200);\n        expect(response.body.data.metadata.pageError).toBeUndefined();\n      },\n      30000,\n    ); // 30 seconds timeout\n\n    it.concurrent(\n      \"should return a successful response with a valid API key and includeRawHtml set to true\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://roastmywebsite.ai\",\n            pageOptions: { includeRawHtml: true },\n          });\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"markdown\");\n        expect(response.body.data).toHaveProperty(\"rawHtml\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.content).toContain(\"_Roast_\");\n        expect(response.body.data.markdown).toContain(\"_Roast_\");\n        expect(response.body.data.rawHtml).toContain(\"<h1\");\n        expect(response.body.data.metadata.pageStatusCode).toBe(200);\n        expect(response.body.data.metadata.pageError).toBeUndefined();\n      },\n      30000,\n    ); // 30 seconds timeout\n\n    it.concurrent(\n      \"should return a successful response for a valid scrape with PDF file\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://arxiv.org/pdf/astro-ph/9301001.pdf\" });\n        await new Promise((r) => setTimeout(r, 6000));\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.content).toContain(\n          \"We present spectrophotometric observations of the Broad Line Radio Galaxy\",\n        );\n        expect(response.body.data.metadata.pageStatusCode).toBe(200);\n        expect(response.body.data.metadata.pageError).toBeUndefined();\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response for a valid scrape with PDF file without explicit .pdf extension\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://arxiv.org/pdf/astro-ph/9301001\" });\n        await new Promise((r) => setTimeout(r, 6000));\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.content).toContain(\n          \"We present spectrophotometric observations of the Broad Line Radio Galaxy\",\n        );\n        expect(response.body.data.metadata.pageStatusCode).toBe(200);\n        expect(response.body.data.metadata.pageError).toBeUndefined();\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response for a valid scrape with PDF file and parsePDF set to false\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://arxiv.org/pdf/astro-ph/9301001.pdf\",\n            pageOptions: { parsePDF: false },\n          });\n        await new Promise((r) => setTimeout(r, 6000));\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.content).toContain(\n          \"/Title(arXiv:astro-ph/9301001v1  7 Jan 1993)>>endobj\",\n        );\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response with a valid API key with removeTags option\",\n      async () => {\n        const responseWithoutRemoveTags = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://www.scrapethissite.com/\" });\n        expect(responseWithoutRemoveTags.statusCode).toBe(200);\n        expect(responseWithoutRemoveTags.body).toHaveProperty(\"data\");\n        expect(responseWithoutRemoveTags.body.data).toHaveProperty(\"content\");\n        expect(responseWithoutRemoveTags.body.data).toHaveProperty(\"markdown\");\n        expect(responseWithoutRemoveTags.body.data).toHaveProperty(\"metadata\");\n        expect(responseWithoutRemoveTags.body.data).not.toHaveProperty(\"html\");\n        expect(responseWithoutRemoveTags.body.data.content).toContain(\n          \"Scrape This Site\",\n        );\n        expect(responseWithoutRemoveTags.body.data.content).toContain(\n          \"Lessons and Videos\",\n        ); // #footer\n        expect(responseWithoutRemoveTags.body.data.content).toContain(\n          \"[Sandbox](\",\n        ); // .nav\n        expect(responseWithoutRemoveTags.body.data.content).toContain(\n          \"web scraping\",\n        ); // strong\n\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://www.scrapethissite.com/\",\n            pageOptions: { removeTags: [\".nav\", \"#footer\", \"strong\"] },\n          });\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"markdown\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data).not.toHaveProperty(\"html\");\n        expect(response.body.data.content).toContain(\"Scrape This Site\");\n        expect(response.body.data.content).not.toContain(\"Lessons and Videos\"); // #footer\n        expect(response.body.data.content).not.toContain(\"[Sandbox](\"); // .nav\n        expect(response.body.data.content).not.toContain(\"web scraping\"); // strong\n      },\n      30000,\n    ); // 30 seconds timeout\n\n    // TODO: add this test back once we nail the waitFor option to be more deterministic\n    // it.concurrent(\"should return a successful response with a valid API key and waitFor option\", async () => {\n    //   const startTime = Date.now();\n    //   const response = await request(TEST_URL)\n    //     .post(\"/v0/scrape\")\n    //     .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n    //     .set(\"Content-Type\", \"application/json\")\n    //     .send({ url: \"https://firecrawl.dev\", pageOptions: { waitFor: 7000 } });\n    //   const endTime = Date.now();\n    //   const duration = endTime - startTime;\n\n    //   expect(response.statusCode).toBe(200);\n    //   expect(response.body).toHaveProperty(\"data\");\n    //   expect(response.body.data).toHaveProperty(\"content\");\n    //   expect(response.body.data).toHaveProperty(\"markdown\");\n    //   expect(response.body.data).toHaveProperty(\"metadata\");\n    //   expect(response.body.data).not.toHaveProperty(\"html\");\n    //   expect(response.body.data.content).toContain(\"🔥 Firecrawl\");\n    //   expect(duration).toBeGreaterThanOrEqual(7000);\n    // }, 12000); // 12 seconds timeout\n\n    it.concurrent(\n      \"should return a successful response for a scrape with 400 page\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://httpstat.us/400\" });\n        await new Promise((r) => setTimeout(r, 5000));\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.metadata.pageStatusCode).toBe(400);\n        expect(response.body.data.metadata.pageError.toLowerCase()).toContain(\n          \"bad request\",\n        );\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response for a scrape with 401 page\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://httpstat.us/401\" });\n        await new Promise((r) => setTimeout(r, 5000));\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.metadata.pageStatusCode).toBe(401);\n        expect(response.body.data.metadata.pageError.toLowerCase()).toContain(\n          \"unauthorized\",\n        );\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response for a scrape with 403 page\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://httpstat.us/403\" });\n\n        await new Promise((r) => setTimeout(r, 5000));\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.metadata.pageStatusCode).toBe(403);\n        expect(response.body.data.metadata.pageError.toLowerCase()).toContain(\n          \"forbidden\",\n        );\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response for a scrape with 404 page\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://httpstat.us/404\" });\n        await new Promise((r) => setTimeout(r, 5000));\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.metadata.pageStatusCode).toBe(404);\n        expect(response.body.data.metadata.pageError.toLowerCase()).toContain(\n          \"not found\",\n        );\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response for a scrape with 405 page\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://httpstat.us/405\" });\n        await new Promise((r) => setTimeout(r, 5000));\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.metadata.pageStatusCode).toBe(405);\n        expect(response.body.data.metadata.pageError.toLowerCase()).toContain(\n          \"method not allowed\",\n        );\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response for a scrape with 500 page\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://httpstat.us/500\" });\n        await new Promise((r) => setTimeout(r, 5000));\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.metadata.pageStatusCode).toBe(500);\n        expect(response.body.data.metadata.pageError.toLowerCase()).toContain(\n          \"internal server error\",\n        );\n      },\n      60000,\n    ); // 60 seconds\n  });\n\n  describe(\"POST /v0/crawl\", () => {\n    it.concurrent(\"should require authorization\", async () => {\n      const response = await request(TEST_URL).post(\"/v0/crawl\");\n      expect(response.statusCode).toBe(401);\n    });\n\n    it.concurrent(\n      \"should return an error response with an invalid API key\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer invalid-api-key`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://firecrawl.dev\" });\n        expect(response.statusCode).toBe(401);\n      },\n    );\n\n    it.concurrent(\"should return an error for a blocklisted URL\", async () => {\n      const blocklistedUrl = \"https://twitter.com/fake-test\";\n      const response = await request(TEST_URL)\n        .post(\"/v0/crawl\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: blocklistedUrl });\n      expect(response.statusCode).toBe(403);\n      expect(response.body.error).toContain(BLOCKLISTED_URL_MESSAGE);\n    });\n\n    it.concurrent(\n      \"should return a successful response with a valid API key for crawl\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://firecrawl.dev\" });\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"jobId\");\n        expect(response.body.jobId).toMatch(\n          /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/,\n        );\n      },\n    );\n    it.concurrent(\n      \"should prevent duplicate requests using the same idempotency key\",\n      async () => {\n        const uniqueIdempotencyKey = uuidv4();\n\n        // First request with the idempotency key\n        const firstResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .set(\"x-idempotency-key\", uniqueIdempotencyKey)\n          .send({ url: \"https://docs.firecrawl.dev\" });\n\n        expect(firstResponse.statusCode).toBe(200);\n\n        // Second request with the same idempotency key\n        const secondResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .set(\"x-idempotency-key\", uniqueIdempotencyKey)\n          .send({ url: \"https://docs.firecrawl.dev\" });\n\n        expect(secondResponse.statusCode).toBe(409);\n        expect(secondResponse.body.error).toBe(\"Idempotency key already used\");\n      },\n    );\n\n    it.concurrent(\n      \"should return a successful response with a valid API key and valid includes option\",\n      async () => {\n        const crawlResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://mendable.ai\",\n            limit: 10,\n            crawlerOptions: {\n              includes: [\"blog/*\"],\n            },\n          });\n\n        let response;\n        let isFinished = false;\n\n        while (!isFinished) {\n          response = await request(TEST_URL)\n            .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n          expect(response.statusCode).toBe(200);\n          expect(response.body).toHaveProperty(\"status\");\n          isFinished = response.body.status === \"completed\";\n\n          if (!isFinished) {\n            await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n          }\n        }\n\n        const completedResponse = response;\n\n        const urls = completedResponse.body.data.map(\n          (item: any) => item.metadata?.sourceURL,\n        );\n        expect(urls.length).toBeGreaterThan(5);\n        urls.forEach((url: string) => {\n          expect(url.startsWith(\"https://www.mendable.ai/blog/\")).toBeTruthy();\n        });\n\n        expect(completedResponse.statusCode).toBe(200);\n        expect(completedResponse.body).toHaveProperty(\"status\");\n        expect(completedResponse.body.status).toBe(\"completed\");\n        expect(completedResponse.body).toHaveProperty(\"data\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"content\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n        expect(completedResponse.body.data[0].content).toContain(\"Mendable\");\n        expect(completedResponse.body.data[0].metadata.pageStatusCode).toBe(\n          200,\n        );\n        expect(\n          completedResponse.body.data[0].metadata.pageError,\n        ).toBeUndefined();\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response with a valid API key and valid excludes option\",\n      async () => {\n        const crawlResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://mendable.ai\",\n            limit: 10,\n            crawlerOptions: {\n              excludes: [\"blog/*\"],\n            },\n          });\n\n        let isFinished = false;\n        let response;\n\n        while (!isFinished) {\n          response = await request(TEST_URL)\n            .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n          expect(response.statusCode).toBe(200);\n          expect(response.body).toHaveProperty(\"status\");\n          isFinished = response.body.status === \"completed\";\n\n          if (!isFinished) {\n            await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n          }\n        }\n\n        const completedResponse = response;\n\n        const urls = completedResponse.body.data.map(\n          (item: any) => item.metadata?.sourceURL,\n        );\n        expect(urls.length).toBeGreaterThan(5);\n        urls.forEach((url: string) => {\n          expect(url.startsWith(\"https://wwww.mendable.ai/blog/\")).toBeFalsy();\n        });\n      },\n      90000,\n    ); // 90 seconds\n\n    it.concurrent(\n      \"should return a successful response with a valid API key and limit to 3\",\n      async () => {\n        const crawlResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://mendable.ai\",\n            crawlerOptions: { limit: 3 },\n          });\n\n        let isFinished = false;\n        let response;\n\n        while (!isFinished) {\n          response = await request(TEST_URL)\n            .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n          expect(response.statusCode).toBe(200);\n          expect(response.body).toHaveProperty(\"status\");\n          isFinished = response.body.status === \"completed\";\n\n          if (!isFinished) {\n            await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n          }\n        }\n\n        const completedResponse = response;\n\n        expect(completedResponse.statusCode).toBe(200);\n        expect(completedResponse.body).toHaveProperty(\"status\");\n        expect(completedResponse.body.status).toBe(\"completed\");\n        expect(completedResponse.body).toHaveProperty(\"data\");\n        expect(completedResponse.body.data.length).toBe(3);\n        expect(completedResponse.body.data[0]).toHaveProperty(\"content\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n        expect(completedResponse.body.data[0].content).toContain(\"Mendable\");\n        expect(completedResponse.body.data[0].metadata.pageStatusCode).toBe(\n          200,\n        );\n        expect(\n          completedResponse.body.data[0].metadata.pageError,\n        ).toBeUndefined();\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response with max depth option for a valid crawl job\",\n      async () => {\n        const crawlResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://www.scrapethissite.com\",\n            crawlerOptions: { maxDepth: 1 },\n          });\n        expect(crawlResponse.statusCode).toBe(200);\n\n        const response = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"status\");\n        expect([\"active\", \"waiting\"]).toContain(response.body.status);\n        // wait for 60 seconds\n        let isCompleted = false;\n        while (!isCompleted) {\n          const statusCheckResponse = await request(TEST_URL)\n            .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n          expect(statusCheckResponse.statusCode).toBe(200);\n          isCompleted = statusCheckResponse.body.status === \"completed\";\n          if (!isCompleted) {\n            await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n          }\n        }\n        const completedResponse = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n        expect(completedResponse.statusCode).toBe(200);\n        expect(completedResponse.body).toHaveProperty(\"status\");\n        expect(completedResponse.body.status).toBe(\"completed\");\n        expect(completedResponse.body).toHaveProperty(\"data\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"content\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n        expect(completedResponse.body.data[0].metadata.pageStatusCode).toBe(\n          200,\n        );\n        expect(\n          completedResponse.body.data[0].metadata.pageError,\n        ).toBeUndefined();\n        const urls = completedResponse.body.data.map(\n          (item: any) => item.metadata?.sourceURL,\n        );\n        expect(urls.length).toBeGreaterThan(1);\n\n        // Check if all URLs have a maximum depth of 1\n        urls.forEach((url: string) => {\n          const pathSplits = new URL(url).pathname.split(\"/\");\n          const depth =\n            pathSplits.length -\n            (pathSplits[0].length === 0 &&\n            pathSplits[pathSplits.length - 1].length === 0\n              ? 1\n              : 0);\n          expect(depth).toBeLessThanOrEqual(2);\n        });\n      },\n      180000,\n    );\n\n    it.concurrent(\n      \"should return a successful response with relative max depth option for a valid crawl job\",\n      async () => {\n        const crawlResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://www.scrapethissite.com/pages/\",\n            crawlerOptions: { maxDepth: 1 },\n          });\n        expect(crawlResponse.statusCode).toBe(200);\n\n        const response = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"status\");\n        expect([\"active\", \"waiting\"]).toContain(response.body.status);\n        // wait for 60 seconds\n        let isCompleted = false;\n        while (!isCompleted) {\n          const statusCheckResponse = await request(TEST_URL)\n            .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n          expect(statusCheckResponse.statusCode).toBe(200);\n          isCompleted = statusCheckResponse.body.status === \"completed\";\n          if (!isCompleted) {\n            await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n          }\n        }\n        const completedResponse = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n        expect(completedResponse.statusCode).toBe(200);\n        expect(completedResponse.body).toHaveProperty(\"status\");\n        expect(completedResponse.body.status).toBe(\"completed\");\n        expect(completedResponse.body).toHaveProperty(\"data\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"content\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n        const urls = completedResponse.body.data.map(\n          (item: any) => item.metadata?.sourceURL,\n        );\n        expect(urls.length).toBeGreaterThan(1);\n\n        // Check if all URLs have an absolute maximum depth of 3 after the base URL depth was 2 and the maxDepth was 1\n        urls.forEach((url: string) => {\n          const pathSplits = new URL(url).pathname.split(\"/\");\n          const depth =\n            pathSplits.length -\n            (pathSplits[0].length === 0 &&\n            pathSplits[pathSplits.length - 1].length === 0\n              ? 1\n              : 0);\n          expect(depth).toBeLessThanOrEqual(3);\n        });\n      },\n      180000,\n    );\n\n    it.concurrent(\n      \"should return a successful response with relative max depth option for a valid crawl job with maxDepths equals to zero\",\n      async () => {\n        const crawlResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://www.mendable.ai\",\n            crawlerOptions: { maxDepth: 0 },\n          });\n        expect(crawlResponse.statusCode).toBe(200);\n\n        const response = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"status\");\n        expect([\"active\", \"waiting\"]).toContain(response.body.status);\n        // wait for 60 seconds\n        let isCompleted = false;\n        while (!isCompleted) {\n          const statusCheckResponse = await request(TEST_URL)\n            .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n          expect(statusCheckResponse.statusCode).toBe(200);\n          isCompleted = statusCheckResponse.body.status === \"completed\";\n          if (!isCompleted) {\n            await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n          }\n        }\n        const completedResponse = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n        const testurls = completedResponse.body.data.map(\n          (item: any) => item.metadata?.sourceURL,\n        );\n        //console.log(testurls)\n\n        expect(completedResponse.statusCode).toBe(200);\n        expect(completedResponse.body).toHaveProperty(\"status\");\n        expect(completedResponse.body.status).toBe(\"completed\");\n        expect(completedResponse.body).toHaveProperty(\"data\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"content\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n        const urls = completedResponse.body.data.map(\n          (item: any) => item.metadata?.sourceURL,\n        );\n        expect(urls.length).toBeGreaterThanOrEqual(1);\n\n        // Check if all URLs have an absolute maximum depth of 3 after the base URL depth was 2 and the maxDepth was 1\n        urls.forEach((url: string) => {\n          const pathSplits = new URL(url).pathname.split(\"/\");\n          const depth =\n            pathSplits.length -\n            (pathSplits[0].length === 0 &&\n            pathSplits[pathSplits.length - 1].length === 0\n              ? 1\n              : 0);\n          expect(depth).toBeLessThanOrEqual(1);\n        });\n      },\n      180000,\n    );\n\n    // it.concurrent(\"should return a successful response with a valid API key and valid limit option\", async () => {\n    //   const crawlResponse = await request(TEST_URL)\n    //     .post(\"/v0/crawl\")\n    //     .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n    //     .set(\"Content-Type\", \"application/json\")\n    //     .send({\n    //       url: \"https://mendable.ai\",\n    //       crawlerOptions: { limit: 10 },\n    //     });\n\n    //   const response = await request(TEST_URL)\n    //     .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n    //     .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n    //   expect(response.statusCode).toBe(200);\n    //   expect(response.body).toHaveProperty(\"status\");\n    //   expect(response.body.status).toBe(\"active\");\n\n    //   let isCompleted = false;\n    //   while (!isCompleted) {\n    //     const statusCheckResponse = await request(TEST_URL)\n    //       .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n    //       .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n    //     expect(statusCheckResponse.statusCode).toBe(200);\n    //     isCompleted = statusCheckResponse.body.status === \"completed\";\n    //     if (!isCompleted) {\n    //       await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n    //     }\n    //   }\n\n    //   const completedResponse = await request(TEST_URL)\n    //     .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n    //     .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n    //   expect(completedResponse.statusCode).toBe(200);\n    //   expect(completedResponse.body).toHaveProperty(\"status\");\n    //   expect(completedResponse.body.status).toBe(\"completed\");\n    //   expect(completedResponse.body).toHaveProperty(\"data\");\n    //   expect(completedResponse.body.data.length).toBe(10);\n    //   expect(completedResponse.body.data[0]).toHaveProperty(\"content\");\n    //   expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n    //   expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n    //   expect(completedResponse.body.data[0].content).toContain(\"Mendable\");\n    //   expect(completedResponse.body.data[0].content).not.toContain(\"main menu\");\n    // }, 60000); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response for a valid crawl job with includeHtml set to true option\",\n      async () => {\n        const crawlResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://roastmywebsite.ai\",\n            pageOptions: { includeHtml: true },\n          });\n        expect(crawlResponse.statusCode).toBe(200);\n\n        const response = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"status\");\n        expect([\"active\", \"waiting\"]).toContain(response.body.status);\n\n        let isCompleted = false;\n        while (!isCompleted) {\n          const statusCheckResponse = await request(TEST_URL)\n            .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n          expect(statusCheckResponse.statusCode).toBe(200);\n          isCompleted = statusCheckResponse.body.status === \"completed\";\n          if (!isCompleted) {\n            await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n          }\n        }\n\n        const completedResponse = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n        expect(completedResponse.statusCode).toBe(200);\n        expect(completedResponse.body).toHaveProperty(\"status\");\n        expect(completedResponse.body.status).toBe(\"completed\");\n        expect(completedResponse.body).toHaveProperty(\"data\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"content\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n        expect(completedResponse.body.data[0].metadata.pageStatusCode).toBe(\n          200,\n        );\n        expect(\n          completedResponse.body.data[0].metadata.pageError,\n        ).toBeUndefined();\n\n        // 120 seconds\n        expect(completedResponse.body.data[0]).toHaveProperty(\"html\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n        expect(completedResponse.body.data[0].content).toContain(\"_Roast_\");\n        expect(completedResponse.body.data[0].markdown).toContain(\"_Roast_\");\n        expect(completedResponse.body.data[0].html).toContain(\"<h1\");\n\n        expect(completedResponse.body.data[0].metadata.pageStatusCode).toBe(\n          200,\n        );\n        expect(\n          completedResponse.body.data[0].metadata.pageError,\n        ).toBeUndefined();\n      },\n      180000,\n    );\n\n    it.concurrent(\n      \"should crawl external content links when allowed\",\n      async () => {\n        const crawlInitResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://mendable.ai\",\n            crawlerOptions: {\n              allowExternalContentLinks: true,\n              ignoreSitemap: true,\n              returnOnlyUrls: true,\n              limit: 50,\n            },\n          });\n\n        expect(crawlInitResponse.statusCode).toBe(200);\n        expect(crawlInitResponse.body).toHaveProperty(\"jobId\");\n\n        let crawlStatus: string = \"scraping\";\n        let crawlData = [];\n        while (crawlStatus !== \"completed\") {\n          const statusResponse = await request(TEST_URL)\n            .get(`/v0/crawl/status/${crawlInitResponse.body.jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n          crawlStatus = statusResponse.body.status;\n          if (statusResponse.body.data) {\n            crawlData = statusResponse.body.data;\n          }\n          if (crawlStatus !== \"completed\") {\n            await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n          }\n        }\n        expect(crawlData.length).toBeGreaterThan(0);\n        expect(crawlData).toEqual(\n          expect.arrayContaining([\n            expect.objectContaining({\n              url: expect.stringContaining(\n                \"https://firecrawl.dev/?ref=mendable+banner\",\n              ),\n            }),\n            expect.objectContaining({\n              url: expect.stringContaining(\"https://mendable.ai/pricing\"),\n            }),\n            expect.objectContaining({\n              url: expect.stringContaining(\"https://x.com/CalebPeffer\"),\n            }),\n          ]),\n        );\n      },\n      180000,\n    ); // 3 minutes timeout\n  });\n\n  describe(\"POST /v0/crawlWebsitePreview\", () => {\n    it.concurrent(\"should require authorization\", async () => {\n      const response = await request(TEST_URL).post(\"/v0/crawlWebsitePreview\");\n      expect(response.statusCode).toBe(401);\n    });\n\n    it.concurrent(\n      \"should return an error response with an invalid API key\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/crawlWebsitePreview\")\n          .set(\"Authorization\", `Bearer invalid-api-key`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://firecrawl.dev\" });\n        expect(response.statusCode).toBe(401);\n      },\n    );\n\n    // it.concurrent(\"should return an error for a blocklisted URL\", async () => {\n    //   const blocklistedUrl = \"https://instagram.com/fake-test\";\n    //   const response = await request(TEST_URL)\n    //     .post(\"/v0/crawlWebsitePreview\")\n    //     .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n    //     .set(\"Content-Type\", \"application/json\")\n    //     .send({ url: blocklistedUrl });\n    // // is returning 429 instead of 403\n    //   expect(response.statusCode).toBe(403);\n    //   expect(response.body.error).toContain(\"Firecrawl currently does not support social media scraping due to policy restrictions. We're actively working on building support for it.\");\n    // });\n\n    it.concurrent(\n      \"should return a timeout error when scraping takes longer than the specified timeout\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://firecrawl.dev\", timeout: 1000 });\n\n        expect(response.statusCode).toBe(408);\n      },\n      3000,\n    );\n  });\n\n  describe(\"POST /v0/search\", () => {\n    it.concurrent(\"should require authorization\", async () => {\n      const response = await request(TEST_URL).post(\"/v0/search\");\n      expect(response.statusCode).toBe(401);\n    });\n\n    it.concurrent(\n      \"should return an error response with an invalid API key\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/search\")\n          .set(\"Authorization\", `Bearer invalid-api-key`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ query: \"test\" });\n        expect(response.statusCode).toBe(401);\n      },\n    );\n\n    it.concurrent(\n      \"should return a successful response with a valid API key for search\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/search\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ query: \"test\" });\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"success\");\n        expect(response.body.success).toBe(true);\n        expect(response.body).toHaveProperty(\"data\");\n      },\n      30000,\n    ); // 30 seconds timeout\n  });\n\n  describe(\"GET /v0/crawl/status/:jobId\", () => {\n    it.concurrent(\"should require authorization\", async () => {\n      const response = await request(TEST_URL).get(\"/v0/crawl/status/123\");\n      expect(response.statusCode).toBe(401);\n    });\n\n    it.concurrent(\n      \"should return an error response with an invalid API key\",\n      async () => {\n        const response = await request(TEST_URL)\n          .get(\"/v0/crawl/status/123\")\n          .set(\"Authorization\", `Bearer invalid-api-key`);\n        expect(response.statusCode).toBe(401);\n      },\n    );\n\n    it.concurrent(\n      \"should return Job not found for invalid job ID\",\n      async () => {\n        const response = await request(TEST_URL)\n          .get(\"/v0/crawl/status/invalidJobId\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n        expect(response.statusCode).toBe(404);\n      },\n    );\n\n    it.concurrent(\n      \"should return a successful crawl status response for a valid crawl job\",\n      async () => {\n        const crawlResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://mendable.ai/blog\" });\n        expect(crawlResponse.statusCode).toBe(200);\n\n        let isCompleted = false;\n        let completedResponse;\n\n        while (!isCompleted) {\n          const response = await request(TEST_URL)\n            .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n          expect(response.statusCode).toBe(200);\n          expect(response.body).toHaveProperty(\"status\");\n\n          if (response.body.status === \"completed\") {\n            isCompleted = true;\n            completedResponse = response;\n          } else {\n            await new Promise((r) => setTimeout(r, 1000)); // Wait for 1 second before checking again\n          }\n        }\n        expect(completedResponse.body).toHaveProperty(\"status\");\n        expect(completedResponse.body.status).toBe(\"completed\");\n        expect(completedResponse.body).toHaveProperty(\"data\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"content\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n        expect(completedResponse.body.data[0].content).toContain(\"Mendable\");\n        expect(completedResponse.body.data[0].metadata.pageStatusCode).toBe(\n          200,\n        );\n        expect(\n          completedResponse.body.data[0].metadata.pageError,\n        ).toBeUndefined();\n\n        const childrenLinks = completedResponse.body.data.filter(\n          (doc) =>\n            doc.metadata &&\n            doc.metadata.sourceURL &&\n            doc.metadata.sourceURL.includes(\"mendable.ai/blog\"),\n        );\n\n        expect(childrenLinks.length).toBe(completedResponse.body.data.length);\n      },\n      180000,\n    ); // 120 seconds\n\n    it.concurrent(\n      \"should return a successful response for a valid crawl job with PDF files without explicit .pdf extension \",\n      async () => {\n        const crawlResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://arxiv.org/pdf/astro-ph/9301001\",\n            crawlerOptions: {\n              limit: 10,\n              excludes: [\n                \"list/*\",\n                \"login\",\n                \"abs/*\",\n                \"static/*\",\n                \"about/*\",\n                \"archive/*\",\n              ],\n            },\n          });\n        expect(crawlResponse.statusCode).toBe(200);\n\n        let isCompleted = false;\n        let completedResponse;\n\n        while (!isCompleted) {\n          const response = await request(TEST_URL)\n            .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n          expect(response.statusCode).toBe(200);\n          expect(response.body).toHaveProperty(\"status\");\n\n          if (response.body.status === \"completed\") {\n            isCompleted = true;\n            completedResponse = response;\n          } else {\n            await new Promise((r) => setTimeout(r, 1000)); // Wait for 1 second before checking again\n          }\n        }\n        expect(completedResponse.body.status).toBe(\"completed\");\n        expect(completedResponse.body).toHaveProperty(\"data\");\n        expect(completedResponse.body.data.length).toEqual(1);\n        expect(completedResponse.body.data).toEqual(\n          expect.arrayContaining([\n            expect.objectContaining({\n              content: expect.stringContaining(\n                \"asymmetries might represent, for instance, preferred source orientations to our line of sight.\",\n              ),\n            }),\n          ]),\n        );\n\n        expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n        expect(completedResponse.body.data[0].metadata.pageStatusCode).toBe(\n          200,\n        );\n        expect(\n          completedResponse.body.data[0].metadata.pageError,\n        ).toBeUndefined();\n      },\n      180000,\n    ); // 120 seconds\n\n    it.concurrent(\n      \"should return a successful response for a valid crawl job with includeHtml set to true option (2)\",\n      async () => {\n        const crawlResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://roastmywebsite.ai\",\n            pageOptions: { includeHtml: true },\n          });\n        expect(crawlResponse.statusCode).toBe(200);\n\n        const response = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"status\");\n        expect([\"active\", \"waiting\"]).toContain(response.body.status);\n\n        let isFinished = false;\n        let completedResponse;\n\n        while (!isFinished) {\n          const response = await request(TEST_URL)\n            .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n          expect(response.statusCode).toBe(200);\n          expect(response.body).toHaveProperty(\"status\");\n\n          if (response.body.status === \"completed\") {\n            isFinished = true;\n            completedResponse = response;\n          } else {\n            await new Promise((r) => setTimeout(r, 1000)); // Wait for 1 second before checking again\n          }\n        }\n\n        expect(completedResponse.statusCode).toBe(200);\n        expect(completedResponse.body).toHaveProperty(\"status\");\n        expect(completedResponse.body.status).toBe(\"completed\");\n        expect(completedResponse.body).toHaveProperty(\"data\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"content\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"html\");\n        expect(completedResponse.body.data[0].content).toContain(\"_Roast_\");\n        expect(completedResponse.body.data[0].markdown).toContain(\"_Roast_\");\n        expect(completedResponse.body.data[0].html).toContain(\"<h1\");\n        expect(completedResponse.body.data[0].metadata.pageStatusCode).toBe(\n          200,\n        );\n        expect(\n          completedResponse.body.data[0].metadata.pageError,\n        ).toBeUndefined();\n      },\n      60000,\n    );\n  }); // 60 seconds\n\n  it.concurrent(\n    \"should return a successful response for a valid crawl job with allowBackwardCrawling set to true option\",\n    async () => {\n      const crawlResponse = await request(TEST_URL)\n        .post(\"/v0/crawl\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          url: \"https://mendable.ai/blog\",\n          pageOptions: { includeHtml: true },\n          crawlerOptions: { allowBackwardCrawling: true },\n        });\n      expect(crawlResponse.statusCode).toBe(200);\n\n      let isFinished = false;\n      let completedResponse;\n\n      while (!isFinished) {\n        const response = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"status\");\n\n        if (response.body.status === \"completed\") {\n          isFinished = true;\n          completedResponse = response;\n        } else {\n          await new Promise((r) => setTimeout(r, 1000)); // Wait for 1 second before checking again\n        }\n      }\n\n      expect(completedResponse.statusCode).toBe(200);\n      expect(completedResponse.body).toHaveProperty(\"status\");\n      expect(completedResponse.body.status).toBe(\"completed\");\n      expect(completedResponse.body).toHaveProperty(\"data\");\n      expect(completedResponse.body.data[0]).toHaveProperty(\"content\");\n      expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n      expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n      expect(completedResponse.body.data[0]).toHaveProperty(\"html\");\n      expect(completedResponse.body.data[0].content).toContain(\"Mendable\");\n      expect(completedResponse.body.data[0].markdown).toContain(\"Mendable\");\n      expect(completedResponse.body.data[0].metadata.pageStatusCode).toBe(200);\n      expect(completedResponse.body.data[0].metadata.pageError).toBeUndefined();\n\n      const onlyChildrenLinks = completedResponse.body.data.filter((doc) => {\n        return (\n          doc.metadata &&\n          doc.metadata.sourceURL &&\n          doc.metadata.sourceURL.includes(\"mendable.ai/blog\")\n        );\n      });\n\n      expect(completedResponse.body.data.length).toBeGreaterThan(\n        onlyChildrenLinks.length,\n      );\n    },\n    60000,\n  );\n\n  it.concurrent(\n    \"If someone cancels a crawl job, it should turn into failed status\",\n    async () => {\n      const crawlResponse = await request(TEST_URL)\n        .post(\"/v0/crawl\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: \"https://jestjs.io\" });\n\n      expect(crawlResponse.statusCode).toBe(200);\n\n      await new Promise((r) => setTimeout(r, 20000));\n\n      const responseCancel = await request(TEST_URL)\n        .delete(`/v0/crawl/cancel/${crawlResponse.body.jobId}`)\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n      expect(responseCancel.statusCode).toBe(200);\n      expect(responseCancel.body).toHaveProperty(\"status\");\n      expect(responseCancel.body.status).toBe(\"cancelled\");\n\n      await new Promise((r) => setTimeout(r, 10000));\n      const completedResponse = await request(TEST_URL)\n        .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n      expect(completedResponse.statusCode).toBe(200);\n      expect(completedResponse.body).toHaveProperty(\"status\");\n      expect(completedResponse.body.status).toBe(\"failed\");\n      expect(completedResponse.body).toHaveProperty(\"data\");\n      expect(completedResponse.body.data).toBeNull();\n      expect(completedResponse.body).toHaveProperty(\"partial_data\");\n      expect(completedResponse.body.partial_data[0]).toHaveProperty(\"content\");\n      expect(completedResponse.body.partial_data[0]).toHaveProperty(\"markdown\");\n      expect(completedResponse.body.partial_data[0]).toHaveProperty(\"metadata\");\n      expect(\n        completedResponse.body.partial_data[0].metadata.pageStatusCode,\n      ).toBe(200);\n      expect(\n        completedResponse.body.partial_data[0].metadata.pageError,\n      ).toBeUndefined();\n    },\n    60000,\n  ); // 60 seconds\n\n  describe(\"POST /v0/scrape with LLM Extraction\", () => {\n    it.concurrent(\n      \"should extract data using LLM extraction mode\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://mendable.ai\",\n            pageOptions: {\n              onlyMainContent: true,\n            },\n            extractorOptions: {\n              mode: \"llm-extraction\",\n              extractionPrompt:\n                \"Based on the information on the page, find what the company's mission is and whether it supports SSO, and whether it is open source\",\n              extractionSchema: {\n                type: \"object\",\n                properties: {\n                  company_mission: {\n                    type: \"string\",\n                  },\n                  supports_sso: {\n                    type: \"boolean\",\n                  },\n                  is_open_source: {\n                    type: \"boolean\",\n                  },\n                },\n                required: [\"company_mission\", \"supports_sso\", \"is_open_source\"],\n              },\n            },\n          });\n\n        // Ensure that the job was successfully created before proceeding with LLM extraction\n        expect(response.statusCode).toBe(200);\n\n        // Assuming the LLM extraction object is available in the response body under `data.llm_extraction`\n        let llmExtraction = response.body.data.llm_extraction;\n\n        // Check if the llm_extraction object has the required properties with correct types and values\n        expect(llmExtraction).toHaveProperty(\"company_mission\");\n        expect(typeof llmExtraction.company_mission).toBe(\"string\");\n        expect(llmExtraction).toHaveProperty(\"supports_sso\");\n        expect(llmExtraction.supports_sso).toBe(true);\n        expect(typeof llmExtraction.supports_sso).toBe(\"boolean\");\n        expect(llmExtraction).toHaveProperty(\"is_open_source\");\n        expect(llmExtraction.is_open_source).toBe(false);\n        expect(typeof llmExtraction.is_open_source).toBe(\"boolean\");\n      },\n      60000,\n    ); // 60 secs\n\n    it.concurrent(\n      \"should extract data using LLM extraction mode with RawHtml\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://mendable.ai\",\n\n            extractorOptions: {\n              mode: \"llm-extraction-from-raw-html\",\n              extractionPrompt:\n                \"Based on the information on the page, what are the primary and secondary CTA buttons?\",\n              extractionSchema: {\n                type: \"object\",\n                properties: {\n                  primary_cta: {\n                    type: \"string\",\n                  },\n                  secondary_cta: {\n                    type: \"string\",\n                  },\n                },\n                required: [\"primary_cta\", \"secondary_cta\"],\n              },\n            },\n          });\n\n        // Ensure that the job was successfully created before proceeding with LLM extraction\n        expect(response.statusCode).toBe(200);\n\n        // Assuming the LLM extraction object is available in the response body under `data.llm_extraction`\n        let llmExtraction = response.body.data.llm_extraction;\n\n        // Check if the llm_extraction object has the required properties with correct types and values\n        expect(llmExtraction).toHaveProperty(\"primary_cta\");\n        expect(typeof llmExtraction.primary_cta).toBe(\"string\");\n        expect(llmExtraction).toHaveProperty(\"secondary_cta\");\n        expect(typeof llmExtraction.secondary_cta).toBe(\"string\");\n      },\n      60000,\n    ); // 60 secs\n  });\n\n  // describe(\"POST /v0/scrape for Top 100 Companies\", () => {\n  //   it.concurrent(\"should extract data for the top 100 companies\", async () => {\n  //     const response = await request(TEST_URL)\n  //       .post(\"/v0/scrape\")\n  //       .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n  //       .set(\"Content-Type\", \"application/json\")\n  //       .send({\n  //         url: \"https://companiesmarketcap.com/\",\n  //         pageOptions: {\n  //           onlyMainContent: true\n  //         },\n  //         extractorOptions: {\n  //           mode: \"llm-extraction\",\n  //           extractionPrompt: \"Extract the name, market cap, price, and today's change for the top 20 companies listed on the page.\",\n  //           extractionSchema: {\n  //             type: \"object\",\n  //             properties: {\n  //               companies: {\n  //                 type: \"array\",\n  //                 items: {\n  //                   type: \"object\",\n  //                   properties: {\n  //                     rank: { type: \"number\" },\n  //                     name: { type: \"string\" },\n  //                     marketCap: { type: \"string\" },\n  //                     price: { type: \"string\" },\n  //                     todayChange: { type: \"string\" }\n  //                   },\n  //                   required: [\"rank\", \"name\", \"marketCap\", \"price\", \"todayChange\"]\n  //                 }\n  //               }\n  //             },\n  //             required: [\"companies\"]\n  //           }\n  //         }\n  //       });\n\n  //     // Print the response body to the console for debugging purposes\n  //     console.log(\"Response companies:\", response.body.data.llm_extraction.companies);\n\n  //     // Check if the response has the correct structure and data types\n  //     expect(response.status).toBe(200);\n  //     expect(Array.isArray(response.body.data.llm_extraction.companies)).toBe(true);\n  //     expect(response.body.data.llm_extraction.companies.length).toBe(40);\n\n  //     // Sample check for the first company\n  //     const firstCompany = response.body.data.llm_extraction.companies[0];\n  //     expect(firstCompany).toHaveProperty(\"name\");\n  //     expect(typeof firstCompany.name).toBe(\"string\");\n  //     expect(firstCompany).toHaveProperty(\"marketCap\");\n  //     expect(typeof firstCompany.marketCap).toBe(\"string\");\n  //     expect(firstCompany).toHaveProperty(\"price\");\n  //     expect(typeof firstCompany.price).toBe(\"string\");\n  //     expect(firstCompany).toHaveProperty(\"todayChange\");\n  //     expect(typeof firstCompany.todayChange).toBe(\"string\");\n  //   }, 120000); // 120 secs\n  // });\n\n  describe(\"POST /v0/crawl with fast mode\", () => {\n    it.concurrent(\n      \"should complete the crawl under 20 seconds\",\n      async () => {\n        const startTime = Date.now();\n\n        const crawlResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://flutterbricks.com\",\n            crawlerOptions: {\n              mode: \"fast\",\n            },\n          });\n\n        expect(crawlResponse.statusCode).toBe(200);\n\n        const jobId = crawlResponse.body.jobId;\n        let statusResponse;\n        let isFinished = false;\n\n        while (!isFinished) {\n          statusResponse = await request(TEST_URL)\n            .get(`/v0/crawl/status/${jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n          expect(statusResponse.statusCode).toBe(200);\n          isFinished = statusResponse.body.status === \"completed\";\n\n          if (!isFinished) {\n            await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n          }\n        }\n\n        // const endTime = Date.now();\n        // const timeElapsed = (endTime - startTime) / 1000; // Convert to seconds\n\n        // console.log(`Time elapsed: ${timeElapsed} seconds`);\n\n        expect(statusResponse.body.status).toBe(\"completed\");\n        expect(statusResponse.body).toHaveProperty(\"data\");\n        expect(statusResponse.body.data[0]).toHaveProperty(\"content\");\n        expect(statusResponse.body.data[0]).toHaveProperty(\"markdown\");\n        expect(statusResponse.body.data[0]).toHaveProperty(\"metadata\");\n        expect(statusResponse.body.data[0].metadata.pageStatusCode).toBe(200);\n        expect(statusResponse.body.data[0].metadata.pageError).toBeUndefined();\n\n        const results = statusResponse.body.data;\n        // results.forEach((result, i) => {\n        //   console.log(result.metadata.sourceURL);\n        // });\n        expect(results.length).toBeGreaterThanOrEqual(10);\n        expect(results.length).toBeLessThanOrEqual(15);\n      },\n      20000,\n    );\n\n    // it.concurrent(\"should complete the crawl in more than 10 seconds\", async () => {\n    //   const startTime = Date.now();\n\n    //   const crawlResponse = await request(TEST_URL)\n    //     .post(\"/v0/crawl\")\n    //     .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n    //     .set(\"Content-Type\", \"application/json\")\n    //     .send({\n    //       url: \"https://flutterbricks.com\",\n    //     });\n\n    //   expect(crawlResponse.statusCode).toBe(200);\n\n    //   const jobId = crawlResponse.body.jobId;\n    //   let statusResponse;\n    //   let isFinished = false;\n\n    //   while (!isFinished) {\n    //     statusResponse = await request(TEST_URL)\n    //       .get(`/v0/crawl/status/${jobId}`)\n    //       .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n    //     expect(statusResponse.statusCode).toBe(200);\n    //     isFinished = statusResponse.body.status === \"completed\";\n\n    //     if (!isFinished) {\n    //       await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n    //     }\n    //   }\n\n    //   const endTime = Date.now();\n    //   const timeElapsed = (endTime - startTime) / 1000; // Convert to seconds\n\n    //   console.log(`Time elapsed: ${timeElapsed} seconds`);\n\n    //   expect(statusResponse.body.status).toBe(\"completed\");\n    //   expect(statusResponse.body).toHaveProperty(\"data\");\n    //   expect(statusResponse.body.data[0]).toHaveProperty(\"content\");\n    //   expect(statusResponse.body.data[0]).toHaveProperty(\"markdown\");\n    //   const results = statusResponse.body.data;\n    //   // results.forEach((result, i) => {\n    //   //   console.log(result.metadata.sourceURL);\n    //   // });\n    //   expect(results.length).toBeGreaterThanOrEqual(10);\n    //   expect(results.length).toBeLessThanOrEqual(15);\n\n    // }, 50000);// 15 seconds timeout to account for network delays\n  });\n\n  describe(\"GET /is-production\", () => {\n    it.concurrent(\"should return the production status\", async () => {\n      const response = await request(TEST_URL).get(\"/is-production\");\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"isProduction\");\n    });\n  });\n\n  describe(\"Rate Limiter\", () => {\n    it.concurrent(\n      \"should return 429 when rate limit is exceeded for preview token\",\n      async () => {\n        for (let i = 0; i < 5; i++) {\n          const response = await request(TEST_URL)\n            .post(\"/v0/scrape\")\n            .set(\"Authorization\", `Bearer ${process.env.PREVIEW_TOKEN}`)\n            .set(\"Content-Type\", \"application/json\")\n            .send({ url: \"https://www.scrapethissite.com\" });\n\n          expect(response.statusCode).toBe(200);\n        }\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.PREVIEW_TOKEN}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://www.scrapethissite.com\" });\n\n        expect(response.statusCode).toBe(429);\n      },\n      90000,\n    );\n  });\n\n  // it.concurrent(\"should return 429 when rate limit is exceeded for API key\", async () => {\n  //   for (let i = 0; i < parseInt(process.env.RATE_LIMIT_TEST_API_KEY_SCRAPE); i++) {\n  //     const response = await request(TEST_URL)\n  //       .post(\"/v0/scrape\")\n  //       .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n  //       .set(\"Content-Type\", \"application/json\")\n  //       .send({ url: \"https://www.scrapethissite.com\" });\n\n  //     expect(response.statusCode).toBe(200);\n  //   }\n\n  //   const response = await request(TEST_URL)\n  //     .post(\"/v0/scrape\")\n  //     .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n  //     .set(\"Content-Type\", \"application/json\")\n  //     .send({ url: \"https://www.scrapethissite.com\" });\n\n  //   expect(response.statusCode).toBe(429);\n  // }, 60000);\n\n  // it.concurrent(\"should return 429 when rate limit is exceeded for API key\", async () => {\n  //   for (let i = 0; i < parseInt(process.env.RATE_LIMIT_TEST_API_KEY_CRAWL); i++) {\n  //     const response = await request(TEST_URL)\n  //       .post(\"/v0/crawl\")\n  //       .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n  //       .set(\"Content-Type\", \"application/json\")\n  //       .send({ url: \"https://www.scrapethissite.com\" });\n\n  //     expect(response.statusCode).toBe(200);\n  //   }\n\n  //   const response = await request(TEST_URL)\n  //     .post(\"/v0/crawl\")\n  //     .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n  //     .set(\"Content-Type\", \"application/json\")\n  //     .send({ url: \"https://www.scrapethissite.com\" });\n\n  //   expect(response.statusCode).toBe(429);\n  // }, 60000);\n});\n"]}