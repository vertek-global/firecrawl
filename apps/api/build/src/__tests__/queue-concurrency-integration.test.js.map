{"version":3,"file":"queue-concurrency-integration.test.js","sourceRoot":"","sources":["../../../src/__tests__/queue-concurrency-integration.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { redisConnection } from \"../services/queue-service\";\nimport { addScrapeJob, addScrapeJobs } from \"../services/queue-jobs\";\nimport {\n  cleanOldConcurrencyLimitEntries,\n  pushConcurrencyLimitActiveJob,\n  takeConcurrencyLimitedJob,\n  removeConcurrencyLimitActiveJob,\n} from \"../lib/concurrency-limit\";\nimport { WebScraperOptions } from \"../types\";\nimport { getACUCTeam } from \"../controllers/auth\";\n\n// Mock all the dependencies\nconst mockAdd = jest.fn();\njest.mock(\"../services/queue-service\", () => ({\n  redisConnection: {\n    zremrangebyscore: jest.fn(),\n    zrangebyscore: jest.fn(),\n    zadd: jest.fn(),\n    zrem: jest.fn(),\n    zmpop: jest.fn(),\n    zcard: jest.fn(),\n    smembers: jest.fn(),\n  },\n  getScrapeQueue: jest.fn(() => ({\n    add: mockAdd,\n  })),\n}));\n\njest.mock(\"uuid\", () => ({\n  v4: jest.fn(() => \"mock-uuid\"),\n}));\n\ndescribe(\"Queue Concurrency Integration\", () => {\n  const mockTeamId = \"test-team-id\";\n  const mockNow = Date.now();\n\n  const defaultScrapeOptions = {\n    formats: [\"markdown\"] as (\n      | \"markdown\"\n      | \"html\"\n      | \"rawHtml\"\n      | \"links\"\n      | \"screenshot\"\n      | \"screenshot@fullPage\"\n      | \"extract\"\n      | \"json\"\n    )[],\n    onlyMainContent: true,\n    waitFor: 0,\n    mobile: false,\n    parsePDF: false,\n    timeout: 30000,\n    extract: {\n      mode: \"llm\" as const,\n      systemPrompt: \"test\",\n      schema: {},\n    },\n    extractOptions: { mode: \"llm\" as const, systemPrompt: \"test\" },\n    javascript: true,\n    headers: {},\n    cookies: [],\n    blockResources: true,\n    skipTlsVerification: false,\n    removeBase64Images: true,\n    fastMode: false,\n    blockAds: true,\n    maxAge: 0,\n    storeInCache: true,\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.spyOn(Date, \"now\").mockImplementation(() => mockNow);\n  });\n\n  describe(\"Single Job Addition\", () => {\n    const mockWebScraperOptions: WebScraperOptions = {\n      url: \"https://test.com\",\n      mode: \"single_urls\",\n      team_id: mockTeamId,\n      scrapeOptions: defaultScrapeOptions,\n      crawlerOptions: null,\n      zeroDataRetention: false,\n    };\n\n    it(\"should add job directly to BullMQ when under concurrency limit\", async () => {\n      // Mock current active jobs to be under limit\n      (redisConnection.zrangebyscore as jest.Mock).mockResolvedValue([]);\n\n      await addScrapeJob(mockWebScraperOptions);\n\n      // Should have checked concurrency\n      expect(redisConnection.zrangebyscore).toHaveBeenCalled();\n\n      // Should have added to BullMQ\n      expect(mockAdd).toHaveBeenCalled();\n\n      // Should have added to active jobs\n      expect(redisConnection.zadd).toHaveBeenCalledWith(\n        expect.stringContaining(\"concurrency-limiter\"),\n        expect.any(Number),\n        expect.any(String),\n      );\n    });\n\n    it(\"should add job to concurrency queue when at concurrency limit\", async () => {\n      // Mock current active jobs to be at limit\n      (getACUCTeam as jest.Mock).mockResolvedValue({\n        concurrency: 15,\n      } as any);\n      const activeJobs = Array(15).fill(\"active-job\");\n      (redisConnection.zrangebyscore as jest.Mock).mockResolvedValue(\n        activeJobs,\n      );\n\n      await addScrapeJob(mockWebScraperOptions);\n\n      // Should have checked concurrency\n      expect(redisConnection.zrangebyscore).toHaveBeenCalled();\n\n      // Should NOT have added to BullMQ\n      expect(mockAdd).not.toHaveBeenCalled();\n\n      // Should have added to concurrency queue\n      expect(redisConnection.zadd).toHaveBeenCalledWith(\n        expect.stringContaining(\"concurrency-limit-queue\"),\n        expect.any(Number),\n        expect.stringContaining(\"mock-uuid\"),\n      );\n    });\n  });\n\n  describe(\"Batch Job Addition\", () => {\n    const createMockJobs = (count: number) =>\n      Array(count)\n        .fill(null)\n        .map((_, i) => ({\n          data: {\n            url: `https://test${i}.com`,\n            mode: \"single_urls\",\n            team_id: mockTeamId,\n            scrapeOptions: defaultScrapeOptions,\n            zeroDataRetention: false,\n          } as WebScraperOptions,\n          opts: {\n            jobId: `job-${i}`,\n            priority: 1,\n          },\n        }));\n\n    it(\"should handle batch jobs respecting concurrency limits\", async () => {\n      const maxConcurrency = 15;\n      (getACUCTeam as jest.Mock).mockResolvedValue({\n        concurrency: maxConcurrency,\n      } as any);\n      const totalJobs = maxConcurrency + 5; // Some jobs should go to queue\n      const mockJobs = createMockJobs(totalJobs);\n\n      // Mock current active jobs to be empty\n      (redisConnection.zrangebyscore as jest.Mock).mockResolvedValue([]);\n\n      await addScrapeJobs(mockJobs);\n\n      // Should have added maxConcurrency jobs to BullMQ\n      expect(mockAdd).toHaveBeenCalledTimes(maxConcurrency);\n\n      // Should have added remaining jobs to concurrency queue\n      expect(redisConnection.zadd).toHaveBeenCalledWith(\n        expect.stringContaining(\"concurrency-limit-queue\"),\n        expect.any(Number),\n        expect.any(String),\n      );\n    });\n\n    it(\"should handle empty job array\", async () => {\n      const result = await addScrapeJobs([]);\n      expect(result).toBe(true);\n      expect(mockAdd).not.toHaveBeenCalled();\n      expect(redisConnection.zadd).not.toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Queue Worker Integration\", () => {\n    it(\"should process next queued job when active job completes\", async () => {\n      const mockJob = {\n        id: \"test-job\",\n        data: {\n          team_id: mockTeamId,\n          zeroDataRetention: false,\n        },\n      };\n\n      // Mock a queued job\n      const queuedJob = {\n        id: \"queued-job\",\n        data: { test: \"data\" },\n        opts: {},\n      };\n      (redisConnection.zmpop as jest.Mock).mockResolvedValueOnce([\n        \"key\",\n        [[JSON.stringify(queuedJob)]],\n      ]);\n\n      // Simulate job completion in worker\n      await removeConcurrencyLimitActiveJob(mockTeamId, mockJob.id);\n      await cleanOldConcurrencyLimitEntries(mockTeamId);\n\n      const nextJob = await takeConcurrencyLimitedJob(mockTeamId);\n\n      // Should have taken next job from queue\n      expect(nextJob).toEqual(queuedJob);\n\n      // Should have added new job to active jobs\n      await pushConcurrencyLimitActiveJob(mockTeamId, nextJob!.id, 2 * 60 * 1000);\n      expect(redisConnection.zadd).toHaveBeenCalledWith(\n        expect.stringContaining(\"concurrency-limiter\"),\n        expect.any(Number),\n        nextJob!.id,\n      );\n    });\n\n    it(\"should handle job failure and cleanup\", async () => {\n      const mockJob = {\n        id: \"failing-job\",\n        data: {\n          team_id: mockTeamId,\n        },\n      };\n\n      // Add job to active jobs\n      await pushConcurrencyLimitActiveJob(mockTeamId, mockJob.id, 2 * 60 * 1000);\n\n      // Simulate job failure and cleanup\n      await removeConcurrencyLimitActiveJob(mockTeamId, mockJob.id);\n      await cleanOldConcurrencyLimitEntries(mockTeamId);\n\n      // Verify job was removed from active jobs\n      expect(redisConnection.zrem).toHaveBeenCalledWith(\n        expect.stringContaining(\"concurrency-limiter\"),\n        mockJob.id,\n      );\n    });\n  });\n\n  describe(\"Edge Cases\", () => {\n    it(\"should handle stalled jobs cleanup\", async () => {\n      const stalledTime = mockNow - 3 * 60 * 1000; // 3 minutes ago\n\n      // Mock stalled jobs in Redis\n      (redisConnection.zrangebyscore as jest.Mock).mockResolvedValueOnce([\n        \"stalled-job\",\n      ]);\n\n      await cleanOldConcurrencyLimitEntries(mockTeamId, mockNow);\n\n      // Should have cleaned up stalled jobs\n      expect(redisConnection.zremrangebyscore).toHaveBeenCalledWith(\n        expect.stringContaining(\"concurrency-limiter\"),\n        -Infinity,\n        mockNow,\n      );\n    });\n\n    it(\"should handle race conditions in job queue processing\", async () => {\n      // Mock a race condition where job is taken by another worker\n      (redisConnection.zmpop as jest.Mock).mockResolvedValueOnce(null);\n\n      const nextJob = await takeConcurrencyLimitedJob(mockTeamId);\n\n      // Should handle gracefully when no job is available\n      expect(nextJob).toBeNull();\n    });\n  });\n});\n"]}