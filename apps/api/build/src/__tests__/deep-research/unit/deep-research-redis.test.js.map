{"version":3,"file":"deep-research-redis.test.js","sourceRoot":"","sources":["../../../../../src/__tests__/deep-research/unit/deep-research-redis.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { redisConnection } from \"../../../services/queue-service\";\nimport {\n  saveDeepResearch,\n  getDeepResearch,\n  updateDeepResearch,\n  getDeepResearchExpiry,\n  StoredDeepResearch,\n} from \"../../../lib/deep-research/deep-research-redis\";\n\njest.mock(\"../../../services/queue-service\", () => ({\n  redisConnection: {\n    set: jest.fn(),\n    get: jest.fn(),\n    expire: jest.fn(),\n    pttl: jest.fn(),\n  },\n}));\n\ndescribe(\"Deep Research Redis Operations\", () => {\n  const mockResearch: StoredDeepResearch = {\n    id: \"test-id\",\n    team_id: \"team-1\",\n    createdAt: Date.now(),\n    status: \"processing\",\n    currentDepth: 0,\n    maxDepth: 5,\n    completedSteps: 0,\n    totalExpectedSteps: 25,\n    findings: [],\n    sources: [],\n    activities: [],\n    summaries: [],\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"saveDeepResearch\", () => {\n    it(\"should save research data to Redis with TTL\", async () => {\n      await saveDeepResearch(\"test-id\", mockResearch);\n\n      expect(redisConnection.set).toHaveBeenCalledWith(\n        \"deep-research:test-id\",\n        JSON.stringify(mockResearch)\n      );\n      expect(redisConnection.expire).toHaveBeenCalledWith(\n        \"deep-research:test-id\",\n        6 * 60 * 60\n      );\n    });\n  });\n\n  describe(\"getDeepResearch\", () => {\n    it(\"should retrieve research data from Redis\", async () => {\n      (redisConnection.get as jest.Mock).mockResolvedValue(\n        JSON.stringify(mockResearch)\n      );\n\n      const result = await getDeepResearch(\"test-id\");\n      expect(result).toEqual(mockResearch);\n      expect(redisConnection.get).toHaveBeenCalledWith(\"deep-research:test-id\");\n    });\n\n    it(\"should return null when research not found\", async () => {\n      (redisConnection.get as jest.Mock).mockResolvedValue(null);\n\n      const result = await getDeepResearch(\"non-existent-id\");\n      expect(result).toBeNull();\n    });\n  });\n\n  describe(\"updateDeepResearch\", () => {\n    it(\"should update existing research with new data\", async () => {\n      (redisConnection.get as jest.Mock).mockResolvedValue(\n        JSON.stringify(mockResearch)\n      );\n\n      const update = {\n        status: \"completed\" as const,\n        finalAnalysis: \"Test analysis\",\n        activities: [\n          {\n            type: \"search\" as const,\n            status: \"complete\" as const,\n            message: \"New activity\",\n            timestamp: new Date().toISOString(),\n            depth: 1,\n          },\n        ],\n      };\n\n      await updateDeepResearch(\"test-id\", update);\n\n      const expectedUpdate = {\n        ...mockResearch,\n        ...update,\n        activities: [...mockResearch.activities, ...update.activities],\n      };\n\n      expect(redisConnection.set).toHaveBeenCalledWith(\n        \"deep-research:test-id\",\n        JSON.stringify(expectedUpdate)\n      );\n      expect(redisConnection.expire).toHaveBeenCalledWith(\n        \"deep-research:test-id\",\n        6 * 60 * 60\n      );\n    });\n\n    it(\"should do nothing if research not found\", async () => {\n      (redisConnection.get as jest.Mock).mockResolvedValue(null);\n\n      await updateDeepResearch(\"test-id\", { status: \"completed\" });\n\n      expect(redisConnection.set).not.toHaveBeenCalled();\n      expect(redisConnection.expire).not.toHaveBeenCalled();\n    });\n  });\n\n  describe(\"getDeepResearchExpiry\", () => {\n    it(\"should return correct expiry date\", async () => {\n      const mockTTL = 3600000; // 1 hour in milliseconds\n      (redisConnection.pttl as jest.Mock).mockResolvedValue(mockTTL);\n\n      const result = await getDeepResearchExpiry(\"test-id\");\n      \n      expect(result).toBeInstanceOf(Date);\n      expect(result.getTime()).toBeCloseTo(\n        new Date().getTime() + mockTTL,\n        -2 // Allow 100ms precision\n      );\n    });\n  });\n}); "]}