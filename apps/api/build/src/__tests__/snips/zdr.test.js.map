{"version":3,"file":"zdr.test.js","sourceRoot":"","sources":["../../../../src/__tests__/snips/zdr.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { supabase_service } from \"../../services/supabase\";\nimport { getJobFromGCS } from \"../../lib/gcs-jobs\";\nimport { scrape, crawl, batchScrape, scrapeStatusRaw, zdrcleaner, idmux } from \"./lib\";\nimport { readFile, stat } from \"node:fs/promises\";\n\nconst logIgnoreList = [\"Billing queue created\", \"No billing operations to process in batch\", \"billing batch queue\", \"billing batch processing lock\", \"Batch billing team\", \"Successfully billed team\", \"Billing batch processing\", \"Processing batch of\", \"Billing team\"];\n\nif (process.env.TEST_SUITE_SELF_HOSTED) {\n    it(\"mocked\", () => {\n        expect(true).toBe(true);\n    });\n} else {\n    async function getServerLogs() {\n        if (!process.env.GITHUB_ACTIONS) {\n            try {\n                await stat(\"api.log\");\n            } catch (e) {\n                console.warn(\"No api.log file found\");\n                return [];\n            }\n        }\n        const logs = await readFile(\"api.log\", \"utf8\");\n        return logs.split(\"\\n\").filter(x => x.trim().length > 0 && !logIgnoreList.some(y => x.includes(y)));\n    }\n\n    async function getWorkerLogs() {\n        if (!process.env.GITHUB_ACTIONS) {\n            try {\n                await stat(\"worker.log\");\n            } catch (e) {\n                console.warn(\"No worker.log file found\");\n                return [];\n            }\n        }\n        const logs = await readFile(\"worker.log\", \"utf8\");\n        return logs.split(\"\\n\").filter(x => x.trim().length > 0 && !logIgnoreList.some(y => x.includes(y)));\n    }\n\n    describe(\"Zero Data Retention\", () => {\n        describe.each([\"Team-scoped\", \"Request-scoped\"] as const)(\"%s\", (scope) => {\n            it(\"should clean up a scrape immediately\", async () => {\n                let identity = await idmux({\n                    name: `zdr/${scope}/scrape`,\n                    credits: 10000,\n                    flags: {\n                        allowZDR: true,\n                        ...(scope === \"Team-scoped\" ? {\n                            forceZDR: true,\n                        } : {}),\n                    },\n                });\n\n                const testId = crypto.randomUUID();\n                const scrape1 = await scrape({\n                    url: \"https://firecrawl.dev/?test=\" + testId,\n                    zeroDataRetention: scope === \"Request-scoped\" ? true : undefined,\n                }, identity);\n\n                const gcsJob = await getJobFromGCS(scrape1.metadata.scrapeId!);\n                expect(gcsJob).toBeNull();\n\n                const { data, error } = await supabase_service.from(\"firecrawl_jobs\")\n                    .select(\"*\")\n                    .eq(\"job_id\", scrape1.metadata.scrapeId!)\n                    .limit(1);\n\n                expect(error).toBeFalsy();\n                expect(data).toHaveLength(1);\n\n                if (data && data.length === 1) {\n                    const record = data[0];\n                    expect(record.url).not.toContain(\"://\"); // no url stored\n                    expect(record.docs).toBeNull();\n                    expect(record.page_options).toBeNull();\n                    expect(record.crawler_options).toBeNull();\n                }\n\n                if (scope === \"Request-scoped\") {\n                    const status = await scrapeStatusRaw(scrape1.metadata.scrapeId!, identity);\n\n                    expect(status.statusCode).toBe(404);\n                }\n            }, 60000);\n\n            it(\"should clean up a crawl\", async () => {\n                const preServerLogs = await getServerLogs();\n                const preWorkerLogs = await getWorkerLogs();\n\n                let identity = await idmux({\n                    name: `zdr/${scope}/crawl`,\n                    credits: 10000,\n                    flags: {\n                        allowZDR: true,\n                        ...(scope === \"Team-scoped\" ? {\n                            forceZDR: true,\n                        } : {}),\n                    },\n                });\n\n                const crawl1 = await crawl({\n                    url: \"https://firecrawl.dev\",\n                    limit: 10,\n                    zeroDataRetention: scope === \"Request-scoped\" ? true : undefined,\n                }, identity);\n\n                const postServerLogs = (await getServerLogs()).slice(preServerLogs.length);\n                const postWorkerLogs = (await getWorkerLogs()).slice(preWorkerLogs.length);\n\n                if (postWorkerLogs.length > 0 || postServerLogs.length > 0) {\n                    console.warn(\"Logs changed during crawl\", postServerLogs, postWorkerLogs);\n                }\n\n                expect(postServerLogs).toHaveLength(0);\n                expect(postWorkerLogs).toHaveLength(0);\n\n                const { data, error } = await supabase_service.from(\"firecrawl_jobs\")\n                    .select(\"*\")\n                    .eq(\"job_id\", crawl1.id)\n                    .limit(1);\n\n                expect(error).toBeFalsy();\n                expect(data).toHaveLength(1);\n\n                if (data && data.length === 1) {\n                    const record = data[0];\n                    expect(record.url).not.toContain(\"://\"); // no url stored\n                    expect(record.docs).toBeNull();\n                    expect(record.page_options).toBeNull();\n                    expect(record.crawler_options).toBeNull();\n                }\n\n                const { data: jobs, error: jobsError } = await supabase_service.from(\"firecrawl_jobs\")\n                    .select(\"*\")\n                    .eq(\"crawl_id\", crawl1.id);\n\n                expect(jobsError).toBeFalsy();\n                expect((jobs ?? []).length).toBeGreaterThanOrEqual(1);\n\n                for (const job of jobs ?? []) {\n                    expect(job.url).not.toContain(\"://\"); // no url stored\n                    expect(job.docs).toBeNull();\n                    expect(job.page_options).toBeNull();\n                    expect(job.crawler_options).toBeNull();\n                    expect(typeof job.dr_clean_by).toBe(\"string\"); // clean up happens async on a worker after expiry\n\n                    if (job.success) {\n                        const gcsJob = await getJobFromGCS(job.job_id);\n                        expect(gcsJob).not.toBeNull(); // clean up happens async on a worker after expiry\n                    }\n                }\n\n                await zdrcleaner(identity.teamId!);\n\n                for (const job of jobs ?? []) {\n                    const gcsJob = await getJobFromGCS(job.job_id);\n                    expect(gcsJob).toBeNull();\n\n                    if (scope === \"Request-scoped\") {\n                        const status = await scrapeStatusRaw(job.job_id, identity);\n                        expect(status.statusCode).toBe(404);\n                    }\n                }\n            }, 600000);\n\n            it(\"should clean up a batch scrape\", async () => {\n                const preServerLogs = await getServerLogs();\n                const preWorkerLogs = await getWorkerLogs();\n\n                let identity = await idmux({\n                    name: `zdr/${scope}/batch-scrape`,\n                    credits: 10000,\n                    flags: {\n                        allowZDR: true,\n                        ...(scope === \"Team-scoped\" ? {\n                            forceZDR: true,\n                        } : {}),\n                    },\n                });\n\n                const crawl1 = await batchScrape({\n                    urls: [\"https://firecrawl.dev\", \"https://mendable.ai\"],\n                    zeroDataRetention: scope === \"Request-scoped\" ? true : undefined,\n                }, identity);\n\n                const postServerLogs = (await getServerLogs()).slice(preServerLogs.length);\n                const postWorkerLogs = (await getWorkerLogs()).slice(preWorkerLogs.length);\n\n                if (postWorkerLogs.length > 0 || postServerLogs.length > 0) {\n                    console.warn(\"Logs changed during batch scrape\", postServerLogs, postWorkerLogs);\n                }\n\n                expect(postServerLogs).toHaveLength(0);\n                expect(postWorkerLogs).toHaveLength(0);\n\n                const { data, error } = await supabase_service.from(\"firecrawl_jobs\")\n                    .select(\"*\")\n                    .eq(\"job_id\", crawl1.id)\n                    .limit(1);\n\n                expect(error).toBeFalsy();\n                expect(data).toHaveLength(1);\n\n                if (data && data.length === 1) {\n                    const record = data[0];\n                    expect(record.url).not.toContain(\"://\"); // no url stored\n                    expect(record.docs).toBeNull();\n                    expect(record.page_options).toBeNull();\n                    expect(record.crawler_options).toBeNull();\n                }\n\n                const { data: jobs, error: jobsError } = await supabase_service.from(\"firecrawl_jobs\")\n                    .select(\"*\")\n                    .eq(\"crawl_id\", crawl1.id);\n\n                expect(jobsError).toBeFalsy();\n                expect((jobs ?? []).length).toBe(2);\n\n                for (const job of jobs ?? []) {\n                    expect(job.url).not.toContain(\"://\"); // no url stored\n                    expect(job.docs).toBeNull();\n                    expect(job.page_options).toBeNull();\n                    expect(job.crawler_options).toBeNull();\n                    expect(typeof job.dr_clean_by).toBe(\"string\"); // clean up happens async on a worker after expiry\n\n                    if (job.success) {\n                        const gcsJob = await getJobFromGCS(job.job_id);\n                        expect(gcsJob).not.toBeNull(); // clean up happens async on a worker after expiry\n                    }\n                }\n\n                await zdrcleaner(identity.teamId!);\n\n                for (const job of jobs ?? []) {\n                    const gcsJob = await getJobFromGCS(job.job_id);\n                    expect(gcsJob).toBeNull();\n\n                    if (scope === \"Request-scoped\") {\n                        const status = await scrapeStatusRaw(job.job_id, identity);\n                        expect(status.statusCode).toBe(404);\n                    }\n                }\n            }, 600000);\n        });\n    });\n}\n"]}