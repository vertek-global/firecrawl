{"version":3,"file":"extract.test.js","sourceRoot":"","sources":["../../../../src/__tests__/snips/extract.test.ts"],"names":[],"mappings":";;AAAA,+BAAiD;AAEjD,IAAI,QAAkB,CAAC;AAEvB,SAAS,CAAC,KAAK,IAAI,EAAE;IACnB,QAAQ,GAAG,MAAM,IAAA,WAAK,EAAC;QACrB,IAAI,EAAE,SAAS;QACf,WAAW,EAAE,GAAG;QAChB,MAAM,EAAE,OAAO;KAChB,CAAC,CAAC;AACL,CAAC,EAAE,KAAK,CAAC,CAAC;AAEV,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC3B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC;QACnG,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;YAC9B,MAAM,GAAG,GAAG,MAAM,IAAA,aAAO,EAAC;gBACtB,IAAI,EAAE,CAAC,uBAAuB,CAAC;gBAC/B,MAAM,EAAE;oBACJ,MAAM,EAAE,QAAQ;oBAChB,YAAY,EAAE;wBACV,iBAAiB,EAAE;4BACf,MAAM,EAAE,QAAQ;yBACnB;wBACD,gBAAgB,EAAE;4BACd,MAAM,EAAE,SAAS;yBACpB;qBACJ;oBACD,UAAU,EAAE;wBACR,iBAAiB;wBACjB,gBAAgB;qBACnB;iBACJ;gBACD,aAAa,EAAE;oBACX,OAAO,EAAE,KAAK;iBACjB;gBACD,MAAM,EAAE,SAAS;aACpB,EAAE,QAAQ,CAAC,CAAC;YAEb,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YACnD,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YACtD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;YAClD,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACvD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC,EAAE,KAAK,CAAC,CAAC;QAEV,EAAE,CAAC,UAAU,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,GAAG,GAAG,MAAM,IAAA,aAAO,EAAC;gBACtB,IAAI,EAAE,CAAC,uBAAuB,CAAC;gBAC/B,MAAM,EAAE;oBACJ,MAAM,EAAE,QAAQ;oBAChB,YAAY,EAAE;wBACV,cAAc,EAAE;4BACZ,MAAM,EAAE,QAAQ;4BAChB,SAAS,EAAE,gBAAgB;yBAC9B;qBACJ;oBACD,UAAU,EAAE;wBACR,cAAc;qBACjB;iBACJ;gBACD,aAAa,EAAE;oBACX,OAAO,EAAE,KAAK;iBACjB;gBACD,MAAM,EAAE,SAAS;aACpB,EAAE,QAAQ,CAAC,CAAC;YAEb,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAChD,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACvD,CAAC,EAAE,KAAK,CAAC,CAAC;IACd,CAAC;SAAM,CAAC;QACJ,EAAE,CAAC,UAAU,CAAC,YAAY,EAAE,GAAG,EAAE;YAC7B,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { extract, idmux, Identity } from \"./lib\";\n\nlet identity: Identity;\n\nbeforeAll(async () => {\n  identity = await idmux({\n    name: \"extract\",\n    concurrency: 100,\n    tokens: 1000000,\n  });\n}, 10000);\n\ndescribe(\"Extract tests\", () => {\n    if (!process.env.TEST_SUITE_SELF_HOSTED || process.env.OPENAI_API_KEY || process.env.OLLAMA_BASE_URL) {\n        it.concurrent(\"works\", async () => {\n            const res = await extract({\n                urls: [\"https://firecrawl.dev\"],\n                schema: {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"company_mission\": {\n                            \"type\": \"string\"\n                        },\n                        \"is_open_source\": {\n                            \"type\": \"boolean\"\n                        }\n                    },\n                    \"required\": [\n                        \"company_mission\",\n                        \"is_open_source\"\n                    ]\n                },\n                scrapeOptions: {\n                    timeout: 75000,\n                },\n                origin: \"api-sdk\",\n            }, identity);\n\n            expect(res.data).toHaveProperty(\"company_mission\");\n            expect(typeof res.data.company_mission).toBe(\"string\")\n            expect(res.data).toHaveProperty(\"is_open_source\");\n            expect(typeof res.data.is_open_source).toBe(\"boolean\");\n            expect(res.data.is_open_source).toBe(true);\n        }, 90000);\n\n        it.concurrent(\"works with unsupported JSON schema parameters\", async () => {\n            const res = await extract({\n                urls: [\"https://firecrawl.dev\"],\n                schema: {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"company_name\": {\n                            \"type\": \"string\",\n                            \"pattern\": \"^[a-zA-Z0-9]+$\"\n                        },\n                    },\n                    \"required\": [\n                        \"company_name\"\n                    ]\n                },\n                scrapeOptions: {\n                    timeout: 75000,\n                },\n                origin: \"api-sdk\",\n            }, identity);\n\n            expect(res.data).toHaveProperty(\"company_name\");\n            expect(typeof res.data.company_name).toBe(\"string\")\n        }, 90000);\n    } else {\n        it.concurrent(\"dummy test\", () => {\n            expect(true).toBe(true);\n        });\n    }\n});\n"]}