{"version":3,"file":"lib.js","sourceRoot":"","sources":["../../../../src/__tests__/snips/lib.ts"],"names":[],"mappings":";;;;;;AA8BA,sBAmCC;AA+BD,wBASC;AAED,8CAOC;AAED,0CAKC;AAED,oCAQC;AA4BD,oCAKC;AAkBD,gCAIC;AAED,0DAWC;AAED,kCAUC;AAED,sBAsBC;AAqCD,kCAiBC;AAMD,kBAMC;AAED,gDAKC;AAoCD,0BAcC;AAsBD,wBAIC;AAMD,kCAWC;AAED,gCAKC;AAMD,4CASC;AAED,oEAqBC;AAED,gFAqBC;AAMD,gCAOC;AAoCD,oCAyBC;AA/hBD,mCAAsC;AACtC,IAAA,qBAAY,GAAE,CAAC;AAGf,0DAAgC;AAEhC,4CAA4C;AAC5C,gBAAgB;AAChB,4CAA4C;AAE5C,MAAM,QAAQ,GAAG,uBAAuB,CAAC;AAEzC,gHAAgH;AACnG,QAAA,aAAa,GAAG,KAAK,CAAC;AACtB,QAAA,aAAa,GAAG,KAAK,CAAC;AAgB5B,KAAK,UAAU,KAAK,CAAC,GAAiB;IACzC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;QACzB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,CAAC;YACtC,OAAO,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;QACzE,CAAC;QACD,OAAO;YACH,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,YAAa;YACjC,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,YAAa;SACpC,CAAA;IACL,CAAC;IAED,IAAI,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAkB,CAAC,CAAC;IACzD,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,SAAS,EAAE,CAAC;QACpE,SAAS,GAAG,CAAC,CAAC;IAClB,CAAC;IAED,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,GAAG,EAAE;QACjD,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;YACjB,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,eAAgB;YACrC,SAAS;YACT,WAAW,EAAE,GAAG,CAAC,WAAW,IAAI,GAAG;YACnC,GAAG,GAAG;SACT,CAAC;QACF,OAAO,EAAE;YACL,cAAc,EAAE,kBAAkB;SACrC;KACJ,CAAC,CAAC;IAEH,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;QACV,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;IACpC,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,OAAO,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;AAC5B,CAAC;AAOD,4CAA4C;AAC5C,aAAa;AACb,4CAA4C;AAE5C,KAAK,UAAU,SAAS,CAAC,IAAwB,EAAE,QAAkB;IACjE,OAAO,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SACzB,IAAI,CAAC,YAAY,CAAC;SAClB,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;SACvC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpB,CAAC;AAED,SAAS,qBAAqB,CAAC,QAA+C;IAC1E,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,MAAM,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrD,CAAC;AAED,SAAS,kBAAkB,CAAC,QAA+C;IACvE,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1C,MAAM,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACtD,CAAC;AAEM,KAAK,UAAU,MAAM,CAAC,IAAwB,EAAE,QAAkB;IACrE,MAAM,GAAG,GAAG,MAAM,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC5C,qBAAqB,CAAC,GAAG,CAAC,CAAC;IAC3B,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;QAC3B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC7D,CAAC;SAAM,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,OAAO,EAAE,CAAC;QAC/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3D,CAAC;IACD,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;AACzB,CAAC;AAEM,KAAK,UAAU,iBAAiB,CAAC,IAAwB,EAAE,QAAkB;IAIhF,MAAM,GAAG,GAAG,MAAM,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC5C,kBAAkB,CAAC,GAAG,CAAC,CAAC;IACxB,OAAO,GAAG,CAAC,IAAI,CAAC;AACpB,CAAC;AAEM,KAAK,UAAU,eAAe,CAAC,KAAa,EAAE,QAAkB;IACnE,OAAO,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SACzB,GAAG,CAAC,aAAa,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;SAC9C,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,IAAI,EAAE,CAAC;AAChB,CAAC;AAEM,KAAK,UAAU,YAAY,CAAC,KAAa,EAAE,QAAkB;IAChE,MAAM,GAAG,GAAG,MAAM,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACnD,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IACrC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;IACpC,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;AACzB,CAAC;AAED,4CAA4C;AAC5C,YAAY;AACZ,4CAA4C;AAE5C,KAAK,UAAU,UAAU,CAAC,IAAuB,EAAE,QAAkB;IACjE,OAAO,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SACzB,IAAI,CAAC,WAAW,CAAC;SACjB,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;SACvC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpB,CAAC;AAED,KAAK,UAAU,WAAW,CAAC,EAAU,EAAE,QAAkB;IACrD,OAAO,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SACzB,GAAG,CAAC,YAAY,GAAG,kBAAkB,CAAC,EAAE,CAAC,CAAC;SAC1C,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,IAAI,EAAE,CAAC;AAChB,CAAC;AAED,KAAK,UAAU,eAAe,CAAC,QAAkB;IAC7C,OAAO,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SACzB,GAAG,CAAC,mBAAmB,CAAC;SACxB,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,IAAI,EAAE,CAAC;AAChB,CAAC;AAEM,KAAK,UAAU,YAAY,CAAC,QAAkB;IACjD,MAAM,GAAG,GAAG,MAAM,eAAe,CAAC,QAAQ,CAAC,CAAC;IAC5C,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,OAAO,GAAG,CAAC,IAAI,CAAC;AACpB,CAAC;AAED,SAAS,yBAAyB,CAAC,QAAgD;IAC/E,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,MAAM,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACnD,CAAC;AAED,SAAS,oBAAoB,CAAC,QAAiD;IAC3E,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,MAAM,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAC7C,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC;AAEM,KAAK,UAAU,UAAU,CAAC,IAAuB,EAAE,QAAkB;IACxE,MAAM,EAAE,GAAG,MAAM,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC5C,yBAAyB,CAAC,EAAE,CAAC,CAAC;IAC9B,OAAO,EAAE,CAAC,IAAI,CAAC;AACnB,CAAC;AAEM,KAAK,UAAU,uBAAuB,CAAC,EAAU,EAAE,QAAkB;IACxE,IAAI,CAAC,CAAC;IAEN,GAAG,CAAC;QACA,CAAC,GAAG,MAAM,WAAW,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QACpC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChD,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;IAEvC,oBAAoB,CAAC,CAAC,CAAC,CAAC;IACxB,OAAO,CAAC,CAAC,IAAI,CAAC;AAClB,CAAC;AAEM,KAAK,UAAU,WAAW,CAAC,EAAU,EAAE,QAAkB;IAC5D,MAAM,GAAG,GAAG,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SAC9B,GAAG,CAAC,YAAY,GAAG,EAAE,GAAG,SAAS,CAAC;SAClC,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,IAAI,EAAE,CAAC;IAEZ,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEzC,OAAO,GAAG,CAAC,IAAI,CAAC;AACpB,CAAC;AAEM,KAAK,UAAU,KAAK,CAAC,IAAuB,EAAE,QAAkB;IACnE,MAAM,EAAE,GAAG,MAAM,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC5C,yBAAyB,CAAC,EAAE,CAAC,CAAC;IAE9B,IAAI,CAAC,CAAC;IAEN,GAAG,CAAC;QACA,CAAC,GAAG,MAAM,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC5C,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChD,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;IAEvC,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IACvD,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC3B,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,cAAc,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IACtE,CAAC;IAED,oBAAoB,CAAC,CAAC,CAAC,CAAC;IACxB,OAAO;QACH,GAAG,CAAC,CAAC,IAAI;QACT,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;KACjB,CAAC;AACN,CAAC;AAED,4CAA4C;AAC5C,mBAAmB;AACnB,4CAA4C;AAE5C,KAAK,UAAU,gBAAgB,CAAC,IAA6B,EAAE,QAAkB;IAC7E,OAAO,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SACzB,IAAI,CAAC,kBAAkB,CAAC;SACxB,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;SACvC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpB,CAAC;AAED,KAAK,UAAU,iBAAiB,CAAC,EAAU,EAAE,QAAkB;IAC3D,OAAO,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SACzB,GAAG,CAAC,mBAAmB,GAAG,kBAAkB,CAAC,EAAE,CAAC,CAAC;SACjD,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,IAAI,EAAE,CAAC;AAChB,CAAC;AAED,SAAS,+BAA+B,CAAC,QAAsD;IAC3F,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,MAAM,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACnD,CAAC;AAED,SAAS,0BAA0B,CAAC,QAAuD;IACvF,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,MAAM,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAC7C,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC;AAEM,KAAK,UAAU,WAAW,CAAC,IAA6B,EAAE,QAAkB;IAC/E,MAAM,GAAG,GAAG,MAAM,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACnD,+BAA+B,CAAC,GAAG,CAAC,CAAC;IAErC,IAAI,CAAC,CAAC;IAEN,GAAG,CAAC;QACA,CAAC,GAAG,MAAM,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QACnD,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChD,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;IAEvC,0BAA0B,CAAC,CAAC,CAAC,CAAC;IAC9B,OAAO;QACH,GAAG,CAAC,CAAC,IAAI;QACT,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE;KAClB,CAAC;AACN,CAAC;AAED,4CAA4C;AAC5C,UAAU;AACV,4CAA4C;AAErC,KAAK,UAAU,GAAG,CAAC,IAAqB,EAAE,QAAkB;IAC/D,OAAO,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SACzB,IAAI,CAAC,SAAS,CAAC;SACf,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;SACvC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpB,CAAC;AAED,SAAgB,kBAAkB,CAAC,QAAyC;IACxE,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC;AAED,4CAA4C;AAC5C,cAAc;AACd,4CAA4C;AAE5C,KAAK,UAAU,YAAY,CAAC,IAAyB,EAAE,QAAkB;IACrE,OAAO,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SACzB,IAAI,CAAC,aAAa,CAAC;SACnB,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;SACvC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpB,CAAC;AAED,KAAK,UAAU,aAAa,CAAC,EAAU,EAAE,QAAkB;IACvD,OAAO,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SACzB,GAAG,CAAC,cAAc,GAAG,kBAAkB,CAAC,EAAE,CAAC,CAAC;SAC5C,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,IAAI,EAAE,CAAC;AAChB,CAAC;AAGD,SAAS,2BAA2B,CAAC,QAAkD;IACnF,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,MAAM,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACnD,CAAC;AAED,SAAS,sBAAsB,CAAC,QAAmD;IAC/E,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,MAAM,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjD,CAAC;AAEM,KAAK,UAAU,OAAO,CAAC,IAAyB,EAAE,QAAkB;IACvE,MAAM,EAAE,GAAG,MAAM,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC9C,2BAA2B,CAAC,EAAE,CAAC,CAAC;IAEhC,IAAI,CAAC,CAAC;IAEN,GAAG,CAAC;QACA,CAAC,GAAG,MAAM,aAAa,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC9C,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChD,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,YAAY,EAAE;IAEzC,sBAAsB,CAAC,CAAC,CAAC,CAAC;IAC1B,OAAO,CAAC,CAAC,IAAI,CAAC;AAClB,CAAC;AAED,4CAA4C;AAC5C,aAAa;AACb,4CAA4C;AAE5C,KAAK,UAAU,SAAS,CAAC,IAAwB,EAAE,QAAkB;IACjE,OAAO,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SACzB,IAAI,CAAC,YAAY,CAAC;SAClB,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;SACvC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpB,CAAC;AAED,SAAS,qBAAqB,CAAC,QAA+C;IAC1E,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,MAAM,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC;AAEM,KAAK,UAAU,MAAM,CAAC,IAAwB,EAAE,QAAkB;IACrE,MAAM,GAAG,GAAG,MAAM,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC5C,qBAAqB,CAAC,GAAG,CAAC,CAAC;IAC3B,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;AACzB,CAAC;AAED,4CAA4C;AAC5C,cAAc;AACd,4CAA4C;AAErC,KAAK,UAAU,WAAW,CAAC,QAAkB;IAChD,MAAM,GAAG,GAAG,CAAC,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SACnC,GAAG,CAAC,uBAAuB,CAAC;SAC5B,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC,CAAC;IAE1C,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;QACrB,MAAM,GAAG,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;AACzB,CAAC;AAEM,KAAK,UAAU,UAAU,CAAC,QAAkB;IAC/C,OAAO,CAAC,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SAC1B,GAAG,CAAC,sBAAsB,CAAC;SAC3B,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;AAC5D,CAAC;AAED,4CAA4C;AAC5C,kBAAkB;AAClB,4CAA4C;AAErC,KAAK,UAAU,gBAAgB,CAAC,QAAkB;IACrD,MAAM,CAAC,GAAG,CAAC,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SAC7B,GAAG,CAAC,uBAAuB,CAAC;SAC5B,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC,CAAC;IAE9C,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC/B,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClC,OAAO,CAAC,CAAC,IAAI,CAAC;AAClB,CAAC;AAEM,KAAK,UAAU,4BAA4B,CAAC,IAAuB,EAAE,QAAkB;IAI1F,MAAM,EAAE,GAAG,MAAM,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC5C,yBAAyB,CAAC,EAAE,CAAC,CAAC;IAE9B,IAAI,CAAC,EAAE,aAAa,GAAa,EAAE,CAAC;IAEpC,GAAG,CAAC;QACA,CAAC,GAAG,MAAM,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC5C,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5C,aAAa,CAAC,IAAI,CAAC,CAAC,MAAM,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;IACvE,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;IAEvC,oBAAoB,CAAC,CAAC,CAAC,CAAC;IACxB,OAAO;QACH,KAAK,EAAE,CAAC,CAAC,IAAI;QACb,aAAa;KAChB,CAAC;AACN,CAAC;AAEM,KAAK,UAAU,kCAAkC,CAAC,IAA6B,EAAE,QAAkB;IAItG,MAAM,EAAE,GAAG,MAAM,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAClD,+BAA+B,CAAC,EAAE,CAAC,CAAC;IAEpC,IAAI,CAAC,EAAE,aAAa,GAAa,EAAE,CAAC;IAEpC,GAAG,CAAC;QACA,CAAC,GAAG,MAAM,iBAAiB,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5C,aAAa,CAAC,IAAI,CAAC,CAAC,MAAM,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;IACvE,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;IAEvC,0BAA0B,CAAC,CAAC,CAAC,CAAC;IAC9B,OAAO;QACH,WAAW,EAAE,CAAC,CAAC,IAAI;QACnB,aAAa;KAChB,CAAC;AACN,CAAC;AAED,4CAA4C;AAC5C,UAAU;AACV,4CAA4C;AAErC,KAAK,UAAU,UAAU,CAAC,MAAc;IAC3C,MAAM,GAAG,GAAI,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SAC/B,GAAG,CAAC,UAAU,OAAO,CAAC,GAAG,CAAC,aAAa,aAAa,CAAC;SACrD,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IAEvB,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnC,CAAC;AAED,4CAA4C;AAC5C,4CAA4C;AAE5C,KAAK,UAAU,iBAAiB,CAAC,IAUhC,EAAE,QAAkB;IACnB,OAAO,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SAC3B,IAAI,CAAC,mBAAmB,CAAC;SACzB,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;SACvC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,CAAC;AAED,KAAK,UAAU,kBAAkB,CAAC,EAAU,EAAE,QAAkB;IAC9D,OAAO,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;SAC3B,GAAG,CAAC,oBAAoB,GAAG,kBAAkB,CAAC,EAAE,CAAC,CAAC;SAClD,GAAG,CAAC,eAAe,EAAE,UAAU,QAAQ,CAAC,MAAM,EAAE,CAAC;SACjD,IAAI,EAAE,CAAC;AACZ,CAAC;AAED,SAAS,gCAAgC,CAAC,QAAuD;IAC/F,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,MAAM,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACjD,CAAC;AAEM,KAAK,UAAU,YAAY,CAAC,IAUlC,EAAE,QAAkB;IACnB,MAAM,EAAE,GAAG,MAAM,iBAAiB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACnD,gCAAgC,CAAC,EAAE,CAAC,CAAC;IAErC,IAAI,CAAC,CAAC;IAEN,GAAG,CAAC;QACF,CAAC,GAAG,MAAM,kBAAkB,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QACnD,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,YAAY,EAAE;IAEzC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACxC,OAAO,CAAC,CAAC,IAAI,CAAC;AAChB,CAAC","sourcesContent":["import { configDotenv } from \"dotenv\";\nconfigDotenv();\n\nimport { ScrapeRequestInput, Document, ExtractRequestInput, ExtractResponse, CrawlRequestInput, MapRequestInput, BatchScrapeRequestInput, SearchRequestInput, CrawlStatusResponse, CrawlResponse, OngoingCrawlsResponse, ErrorResponse, CrawlErrorsResponse, TeamFlags } from \"../../controllers/v1/types\";\nimport request from \"supertest\";\n\n// =========================================\n// Configuration\n// =========================================\n\nconst TEST_URL = \"http://127.0.0.1:3002\";\n\n// Due to the limited resources of the CI runner, we need to set a longer timeout for the many many scrape tests\nexport const scrapeTimeout = 90000;\nexport const indexCooldown = 30000;\n\n// =========================================\n// idmux\n// =========================================\n\nexport type IdmuxRequest = {\n    name: string,\n\n    concurrency?: number,\n    credits?: number,\n    tokens?: number,\n    flags?: TeamFlags,\n    teamId?: string;\n}\n\nexport async function idmux(req: IdmuxRequest): Promise<Identity> {\n    if (!process.env.IDMUX_URL) {\n        if (!process.env.TEST_SUITE_SELF_HOSTED) {\n            console.warn(\"IDMUX_URL is not set, using test API key and team ID\");\n        }\n        return {\n            apiKey: process.env.TEST_API_KEY!,\n            teamId: process.env.TEST_TEAM_ID!,\n        }\n    }\n\n    let runNumber = parseInt(process.env.GITHUB_RUN_NUMBER!);\n    if (isNaN(runNumber) || runNumber === null || runNumber === undefined) {\n        runNumber = 0;\n    }\n\n    const res = await fetch(process.env.IDMUX_URL + \"/\", {\n        method: \"POST\",\n        body: JSON.stringify({\n            refName: process.env.GITHUB_REF_NAME!,\n            runNumber,\n            concurrency: req.concurrency ?? 100,\n            ...req,\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    });\n\n    if (!res.ok) {\n        console.error(await res.text());\n    }\n\n    expect(res.ok).toBe(true);\n    return await res.json();\n}\n\nexport type Identity = {\n    apiKey: string;\n    teamId: string;\n}\n\n// =========================================\n// Scrape API\n// =========================================\n\nasync function scrapeRaw(body: ScrapeRequestInput, identity: Identity) {\n    return await request(TEST_URL)\n        .post(\"/v1/scrape\")\n        .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(body);\n}\n\nfunction expectScrapeToSucceed(response: Awaited<ReturnType<typeof scrapeRaw>>) {\n    expect(response.statusCode).toBe(200);\n    expect(response.body.success).toBe(true);\n    expect(typeof response.body.data).toBe(\"object\");\n}\n\nfunction expectScrapeToFail(response: Awaited<ReturnType<typeof scrapeRaw>>) {\n    expect(response.statusCode).not.toBe(200);\n    expect(response.body.success).toBe(false);\n    expect(typeof response.body.error).toBe(\"string\");\n}\n\nexport async function scrape(body: ScrapeRequestInput, identity: Identity): Promise<Document> {\n    const raw = await scrapeRaw(body, identity);\n    expectScrapeToSucceed(raw);\n    if (body.proxy === \"stealth\") {\n        expect(raw.body.data.metadata.proxyUsed).toBe(\"stealth\");\n    } else if (!body.proxy || body.proxy === \"basic\") {\n        expect(raw.body.data.metadata.proxyUsed).toBe(\"basic\");\n    }\n    return raw.body.data;\n}\n\nexport async function scrapeWithFailure(body: ScrapeRequestInput, identity: Identity): Promise<{\n    success: false;\n    error: string;\n}> {\n    const raw = await scrapeRaw(body, identity);\n    expectScrapeToFail(raw);\n    return raw.body;\n}\n\nexport async function scrapeStatusRaw(jobId: string, identity: Identity) {\n    return await request(TEST_URL)\n        .get(\"/v1/scrape/\" + encodeURIComponent(jobId))\n        .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n        .send();\n}\n\nexport async function scrapeStatus(jobId: string, identity: Identity): Promise<Document> {\n    const raw = await scrapeStatusRaw(jobId, identity);\n    expect(raw.statusCode).toBe(200);\n    expect(raw.body.success).toBe(true);\n    expect(typeof raw.body.data).toBe(\"object\");\n    expect(raw.body.data).not.toBeNull();\n    expect(raw.body.data).toBeDefined();\n    return raw.body.data;\n}\n\n// =========================================\n// Crawl API\n// =========================================\n\nasync function crawlStart(body: CrawlRequestInput, identity: Identity) {\n    return await request(TEST_URL)\n        .post(\"/v1/crawl\")\n        .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(body);\n}\n\nasync function crawlStatus(id: string, identity: Identity) {\n    return await request(TEST_URL)\n        .get(\"/v1/crawl/\" + encodeURIComponent(id))\n        .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n        .send();\n}\n\nasync function crawlOngoingRaw(identity: Identity) {\n    return await request(TEST_URL)\n        .get(\"/v1/crawl/ongoing\")\n        .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n        .send();\n}\n\nexport async function crawlOngoing(identity: Identity): Promise<Exclude<OngoingCrawlsResponse, ErrorResponse>> {\n    const res = await crawlOngoingRaw(identity);\n    expect(res.statusCode).toBe(200);\n    expect(res.body.success).toBe(true);\n    return res.body;\n}\n\nfunction expectCrawlStartToSucceed(response: Awaited<ReturnType<typeof crawlStart>>) {\n    expect(response.statusCode).toBe(200);\n    expect(response.body.success).toBe(true);\n    expect(typeof response.body.id).toBe(\"string\");\n}\n\nfunction expectCrawlToSucceed(response: Awaited<ReturnType<typeof crawlStatus>>) {\n    expect(response.statusCode).toBe(200);\n    expect(response.body.success).toBe(true);\n    expect(typeof response.body.status).toBe(\"string\");\n    expect(response.body.status).toBe(\"completed\");\n    expect(response.body).toHaveProperty(\"data\");\n    expect(Array.isArray(response.body.data)).toBe(true);\n    expect(response.body.data.length).toBeGreaterThan(0);\n}\n\nexport async function asyncCrawl(body: CrawlRequestInput, identity: Identity): Promise<Exclude<CrawlResponse, ErrorResponse>> {\n    const cs = await crawlStart(body, identity);\n    expectCrawlStartToSucceed(cs);\n    return cs.body;\n}\n\nexport async function asyncCrawlWaitForFinish(id: string, identity: Identity): Promise<Exclude<CrawlStatusResponse, ErrorResponse>> {\n    let x;\n\n    do {\n        x = await crawlStatus(id, identity);\n        expect(x.statusCode).toBe(200);\n        expect(typeof x.body.status).toBe(\"string\");\n    } while (x.body.status === \"scraping\");\n\n    expectCrawlToSucceed(x);\n    return x.body;\n}\n\nexport async function crawlErrors(id: string, identity: Identity): Promise<Exclude<CrawlErrorsResponse, ErrorResponse>> {\n    const res = await request(TEST_URL)\n        .get(\"/v1/crawl/\" + id + \"/errors\")\n        .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n        .send();\n    \n    expect(res.statusCode).toBe(200);\n    expect(res.body.success).not.toBe(false);\n\n    return res.body;\n}\n\nexport async function crawl(body: CrawlRequestInput, identity: Identity): Promise<Exclude<CrawlStatusResponse & { id: string }, ErrorResponse>> {\n    const cs = await crawlStart(body, identity);\n    expectCrawlStartToSucceed(cs);\n\n    let x;\n\n    do {\n        x = await crawlStatus(cs.body.id, identity);\n        expect(x.statusCode).toBe(200);\n        expect(typeof x.body.status).toBe(\"string\");\n    } while (x.body.status === \"scraping\");\n\n    const errors = await crawlErrors(cs.body.id, identity);\n    if (errors.errors.length > 0) {\n        console.warn(\"Crawl \", cs.body.id, \" had errors:\", errors.errors);\n    }\n\n    expectCrawlToSucceed(x);\n    return {\n        ...x.body,\n        id: cs.body.id,\n    };\n}\n\n// =========================================\n// Batch Scrape API\n// =========================================\n\nasync function batchScrapeStart(body: BatchScrapeRequestInput, identity: Identity) {\n    return await request(TEST_URL)\n        .post(\"/v1/batch/scrape\")\n        .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(body);\n}\n\nasync function batchScrapeStatus(id: string, identity: Identity) {\n    return await request(TEST_URL)\n        .get(\"/v1/batch/scrape/\" + encodeURIComponent(id))\n        .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n        .send();\n}\n\nfunction expectBatchScrapeStartToSucceed(response: Awaited<ReturnType<typeof batchScrapeStart>>) {\n    expect(response.statusCode).toBe(200);\n    expect(response.body.success).toBe(true);\n    expect(typeof response.body.id).toBe(\"string\");\n}\n\nfunction expectBatchScrapeToSucceed(response: Awaited<ReturnType<typeof batchScrapeStatus>>) {\n    expect(response.statusCode).toBe(200);\n    expect(response.body.success).toBe(true);\n    expect(typeof response.body.status).toBe(\"string\");\n    expect(response.body.status).toBe(\"completed\");\n    expect(response.body).toHaveProperty(\"data\");\n    expect(Array.isArray(response.body.data)).toBe(true);\n    expect(response.body.data.length).toBeGreaterThan(0);\n}\n\nexport async function batchScrape(body: BatchScrapeRequestInput, identity: Identity): Promise<Exclude<CrawlStatusResponse, ErrorResponse> & { id: string }> {\n    const bss = await batchScrapeStart(body, identity);\n    expectBatchScrapeStartToSucceed(bss);\n\n    let x;\n\n    do {\n        x = await batchScrapeStatus(bss.body.id, identity);\n        expect(x.statusCode).toBe(200);\n        expect(typeof x.body.status).toBe(\"string\");\n    } while (x.body.status === \"scraping\");\n\n    expectBatchScrapeToSucceed(x);\n    return {\n        ...x.body,\n        id: bss.body.id,\n    };\n}\n\n// =========================================\n// Map API\n// =========================================\n\nexport async function map(body: MapRequestInput, identity: Identity) {\n    return await request(TEST_URL)\n        .post(\"/v1/map\")\n        .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(body);\n}\n\nexport function expectMapToSucceed(response: Awaited<ReturnType<typeof map>>) {\n    expect(response.statusCode).toBe(200);\n    expect(response.body.success).toBe(true);\n    expect(Array.isArray(response.body.links)).toBe(true);\n    expect(response.body.links.length).toBeGreaterThan(0);\n}\n\n// =========================================\n// Extract API\n// =========================================\n\nasync function extractStart(body: ExtractRequestInput, identity: Identity) {\n    return await request(TEST_URL)\n        .post(\"/v1/extract\")\n        .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(body);\n}\n\nasync function extractStatus(id: string, identity: Identity) {\n    return await request(TEST_URL)\n        .get(\"/v1/extract/\" + encodeURIComponent(id))\n        .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n        .send();\n}\n\n\nfunction expectExtractStartToSucceed(response: Awaited<ReturnType<typeof extractStart>>) {\n    expect(response.statusCode).toBe(200);\n    expect(response.body.success).toBe(true);\n    expect(typeof response.body.id).toBe(\"string\");\n}\n\nfunction expectExtractToSucceed(response: Awaited<ReturnType<typeof extractStatus>>) {\n    expect(response.statusCode).toBe(200);\n    expect(response.body.success).toBe(true);\n    expect(typeof response.body.status).toBe(\"string\");\n    expect(response.body.status).toBe(\"completed\");\n    expect(response.body).toHaveProperty(\"data\");\n}\n\nexport async function extract(body: ExtractRequestInput, identity: Identity): Promise<ExtractResponse> {\n    const es = await extractStart(body, identity);\n    expectExtractStartToSucceed(es);\n\n    let x;\n\n    do {\n        x = await extractStatus(es.body.id, identity);\n        expect(x.statusCode).toBe(200);\n        expect(typeof x.body.status).toBe(\"string\");\n    } while (x.body.status === \"processing\");\n\n    expectExtractToSucceed(x);\n    return x.body;\n}\n\n// =========================================\n// Search API\n// =========================================\n\nasync function searchRaw(body: SearchRequestInput, identity: Identity) {\n    return await request(TEST_URL)\n        .post(\"/v1/search\")\n        .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send(body);\n}\n\nfunction expectSearchToSucceed(response: Awaited<ReturnType<typeof searchRaw>>) {\n    expect(response.statusCode).toBe(200);\n    expect(response.body.success).toBe(true);\n    expect(typeof response.body.data).toBe(\"object\");\n    expect(Array.isArray(response.body.data)).toBe(true);\n    expect(response.body.data.length).toBeGreaterThan(0);\n}\n\nexport async function search(body: SearchRequestInput, identity: Identity): Promise<Document[]> {\n    const raw = await searchRaw(body, identity);\n    expectSearchToSucceed(raw);\n    return raw.body.data;\n}\n\n// =========================================\n// Billing API\n// =========================================\n\nexport async function creditUsage(identity: Identity): Promise<{ remaining_credits: number }> {\n    const req = (await request(TEST_URL)\n    .get(\"/v1/team/credit-usage\")\n    .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n    .set(\"Content-Type\", \"application/json\"));\n\n    if (req.status !== 200) {\n        throw req.body;\n    }\n\n    return req.body.data;\n}\n\nexport async function tokenUsage(identity: Identity): Promise<{ remaining_tokens: number }> {\n    return (await request(TEST_URL)\n        .get(\"/v1/team/token-usage\")\n        .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n        .set(\"Content-Type\", \"application/json\")).body.data;\n}\n\n// =========================================\n// Concurrency API\n// =========================================\n\nexport async function concurrencyCheck(identity: Identity): Promise<{ concurrency: number, maxConcurrency: number }> {\n    const x = (await request(TEST_URL)\n        .get(\"/v1/concurrency-check\")\n        .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n        .set(\"Content-Type\", \"application/json\"));\n    \n    expect(x.statusCode).toBe(200);\n    expect(x.body.success).toBe(true);\n    return x.body;\n}\n\nexport async function crawlWithConcurrencyTracking(body: CrawlRequestInput, identity: Identity): Promise<{\n    crawl: Exclude<CrawlStatusResponse, ErrorResponse>;\n    concurrencies: number[];\n}> {\n    const cs = await crawlStart(body, identity);\n    expectCrawlStartToSucceed(cs);\n\n    let x, concurrencies: number[] = [];\n\n    do {\n        x = await crawlStatus(cs.body.id, identity);\n        expect(x.statusCode).toBe(200);\n        expect(typeof x.body.status).toBe(\"string\");\n        concurrencies.push((await concurrencyCheck(identity)).concurrency);\n    } while (x.body.status === \"scraping\");\n\n    expectCrawlToSucceed(x);\n    return {\n        crawl: x.body,\n        concurrencies,\n    };\n}\n\nexport async function batchScrapeWithConcurrencyTracking(body: BatchScrapeRequestInput, identity: Identity): Promise<{\n    batchScrape: Exclude<CrawlStatusResponse, ErrorResponse>;\n    concurrencies: number[];\n}> {\n    const cs = await batchScrapeStart(body, identity);\n    expectBatchScrapeStartToSucceed(cs);\n\n    let x, concurrencies: number[] = [];\n\n    do {\n        x = await batchScrapeStatus(cs.body.id, identity);\n        expect(x.statusCode).toBe(200);\n        expect(typeof x.body.status).toBe(\"string\");\n        concurrencies.push((await concurrencyCheck(identity)).concurrency);\n    } while (x.body.status === \"scraping\");\n\n    expectBatchScrapeToSucceed(x);\n    return {\n        batchScrape: x.body,\n        concurrencies,\n    };\n}\n\n// =========================================\n// ZDR API\n// =========================================\n\nexport async function zdrcleaner(teamId: string) {\n    const res =  await request(TEST_URL)\n        .get(`/admin/${process.env.BULL_AUTH_KEY}/zdrcleaner`)\n        .query({ teamId });\n\n    expect(res.statusCode).toBe(200);\n    expect(res.body.ok).toBe(true);\n}\n\n// =========================================\n// =========================================\n\nasync function deepResearchStart(body: {\n  query?: string;\n  maxDepth?: number;\n  maxUrls?: number;\n  timeLimit?: number;\n  analysisPrompt?: string;\n  systemPrompt?: string;\n  formats?: string[];\n  topic?: string;\n  jsonOptions?: any;\n}, identity: Identity) {\n  return await request(TEST_URL)\n    .post(\"/v1/deep-research\")\n    .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n    .set(\"Content-Type\", \"application/json\")\n    .send(body);\n}\n\nasync function deepResearchStatus(id: string, identity: Identity) {\n  return await request(TEST_URL)\n    .get(\"/v1/deep-research/\" + encodeURIComponent(id))\n    .set(\"Authorization\", `Bearer ${identity.apiKey}`)\n    .send();\n}\n\nfunction expectDeepResearchStartToSucceed(response: Awaited<ReturnType<typeof deepResearchStart>>) {\n  expect(response.statusCode).toBe(200);\n  expect(response.body.success).toBe(true);\n  expect(typeof response.body.id).toBe(\"string\");\n}\n\nexport async function deepResearch(body: {\n  query?: string;\n  maxDepth?: number;\n  maxUrls?: number;\n  timeLimit?: number;\n  analysisPrompt?: string;\n  systemPrompt?: string;\n  formats?: string[];\n  topic?: string;\n  jsonOptions?: any;\n}, identity: Identity) {\n  const ds = await deepResearchStart(body, identity);\n  expectDeepResearchStartToSucceed(ds);\n\n  let x;\n  \n  do {\n    x = await deepResearchStatus(ds.body.id, identity);\n    expect(x.statusCode).toBe(200);\n    expect(typeof x.body.status).toBe(\"string\");\n  } while (x.body.status === \"processing\");\n\n  expect(x.body.success).toBe(true);\n  expect(x.body.status).toBe(\"completed\");\n  return x.body;\n}\n"]}