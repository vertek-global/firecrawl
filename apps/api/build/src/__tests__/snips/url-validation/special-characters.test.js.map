{"version":3,"file":"special-characters.test.js","sourceRoot":"","sources":["../../../../../src/__tests__/snips/url-validation/special-characters.test.ts"],"names":[],"mappings":";;AAAA,yDAAoD;AACpD,2CAAqD;AAErD,IAAA,kBAAQ,EAAC,+CAA+C,EAAE,GAAG,EAAE;IAC7D,IAAA,YAAE,EAAC,gEAAgE,EAAE,GAAG,EAAE;QACxE,MAAM,OAAO,GAAG,oFAAoF,CAAC;QAErG,IAAA,gBAAM,EAAC,GAAG,EAAE,CAAC,WAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QAE/C,MAAM,SAAS,GAAG,WAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACrC,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,SAAS,CAAC,wCAAwC,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,IAAA,YAAE,EAAC,gEAAgE,EAAE,GAAG,EAAE;QACxE,MAAM,OAAO,GAAG,gFAAgF,CAAC;QAEjG,IAAA,gBAAM,EAAC,GAAG,EAAE,CAAC,WAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QAE/C,MAAM,SAAS,GAAG,WAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACrC,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QACjD,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QAC7C,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,SAAS,CAAC,+BAA+B,CAAC,CAAC;QAC7D,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,IAAA,YAAE,EAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,MAAM,OAAO,GAAG,gDAAgD,CAAC;QAEjE,IAAA,gBAAM,EAAC,GAAG,EAAE,CAAC,WAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QAE/C,MAAM,SAAS,GAAG,WAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACrC,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { url } from \"../../../controllers/v1/types\";\nimport { describe, it, expect } from \"@jest/globals\";\n\ndescribe(\"URL Schema Validation with Special Characters\", () => {\n  it(\"should handle URLs with special characters in query parameters\", () => {\n    const testUrl = \"https://www.boulanger.com/c/nav-filtre/televiseur?_merchant_des~boulanger|brand~lg\";\n    \n    expect(() => url.parse(testUrl)).not.toThrow();\n    \n    const parsedUrl = url.parse(testUrl);\n    expect(parsedUrl).toContain(\"_merchant_des%7Eboulanger%7Cbrand%7Elg\");\n  });\n\n  it(\"should preserve URL structure when encoding special characters\", () => {\n    const testUrl = \"https://example.com/path?param1=value1&param2=value~with|special&param3=normal\";\n    \n    expect(() => url.parse(testUrl)).not.toThrow();\n    \n    const parsedUrl = url.parse(testUrl);\n    expect(parsedUrl).toContain(\"example.com/path?\");\n    expect(parsedUrl).toContain(\"param1=value1\");\n    expect(parsedUrl).toContain(\"param2=value%7Ewith%7Cspecial\");\n    expect(parsedUrl).toContain(\"param3=normal\");\n  });\n\n  it(\"should handle URLs with already encoded special characters\", () => {\n    const testUrl = \"https://example.com/path?param=value%7Eencoded\";\n    \n    expect(() => url.parse(testUrl)).not.toThrow();\n    \n    const parsedUrl = url.parse(testUrl);\n    expect(parsedUrl).toContain(\"param=value%7Eencoded\");\n  });\n});\n"]}