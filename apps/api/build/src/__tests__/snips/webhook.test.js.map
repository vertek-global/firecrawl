{"version":3,"file":"webhook.test.js","sourceRoot":"","sources":["../../../../src/__tests__/snips/webhook.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { crawl, batchScrape, idmux, Identity } from \"./lib\";\nimport Express from \"express\";\nimport bodyParser from \"body-parser\";\nimport type { WebhookEventType } from \"src/types\";\nimport type { Document } from \"src/controllers/v1/types\";\n\nconst WEBHOOK_PORT_CRAWL = 3008;\nconst WEBHOOK_PORT_BATCH_SCRAPE = 3009;\n\nlet identity: Identity;\n\nbeforeAll(async () => {\n  identity = await idmux({\n    name: \"webhook\",\n    concurrency: 100,\n    credits: 1000000,\n  });\n}, 10000);\n\ndescribe(\"Webhook tests\", () => {\n    it.concurrent(\"webhook works properly for crawl\", async () => {\n        const app = Express();\n        app.use(bodyParser.json());\n\n        const calls: {\n            type: WebhookEventType,\n            id: string,\n            data: any;\n        }[] = [];\n\n        app.post(\"/webhook\", (req, res) => {\n            calls.push({\n                type: req.body.type,\n                id: req.body.id,\n                data: req.body.data,\n            });\n            res.json({ ok: true })\n        });\n\n        const server = app.listen(WEBHOOK_PORT_CRAWL);\n\n        const res = await crawl({\n            url: \"https://firecrawl.dev\",\n            limit: 10,\n            webhook: {\n                url: `http://localhost:${WEBHOOK_PORT_CRAWL}/webhook`,\n            },\n        }, identity);\n\n        // wait to settle the webhook calls\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        server.close();\n\n        let hasStarted = false;\n        let hasCompleted = false;\n\n        for (const call of calls) {\n            expect(call.type).toMatch(/^crawl\\./);\n\n            if (call.type === \"crawl.started\") {\n                hasStarted = true;\n            } else if (call.type === \"crawl.page\") {\n                const page = call.data[0] as Document;\n                expect(res.data.find(x => page.metadata.scrapeId !== undefined && page.metadata.scrapeId === x.metadata.scrapeId)).toBeDefined();\n            } else if (call.type === \"crawl.completed\") {\n                hasCompleted = true;\n            }\n        }\n\n        expect(hasStarted).toBe(true);\n        expect(hasCompleted).toBe(true);\n\n        expect(res.data.length).toBe(calls.filter(x => x.type === \"crawl.page\").length);\n    }, 600000);\n\n    it.concurrent(\"webhook works properly for batch scrape\", async () => {\n        const app = Express();\n        app.use(bodyParser.json());\n\n        const calls: {\n            type: WebhookEventType,\n            id: string,\n            data: any;\n        }[] = [];\n\n        app.post(\"/webhook\", (req, res) => {\n            calls.push({\n                type: req.body.type,\n                id: req.body.id,\n                data: req.body.data,\n            });\n            res.json({ ok: true })\n        });\n\n        const server = app.listen(WEBHOOK_PORT_BATCH_SCRAPE);\n\n        const res = await batchScrape({\n            urls: [\n                \"https://firecrawl.dev\",\n                \"https://firecrawl.dev/blog\",\n            ],\n            webhook: {\n                url: `http://localhost:${WEBHOOK_PORT_BATCH_SCRAPE}/webhook`,\n            },\n        }, identity);\n\n        // wait to settle the webhook calls\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        server.close();\n\n        let hasStarted = false;\n        let hasCompleted = false;\n\n        for (const call of calls) {\n            expect(call.type).toMatch(/^batch_scrape\\./);\n\n            if (call.type === \"batch_scrape.started\") {\n                hasStarted = true;\n            } else if (call.type === \"batch_scrape.page\") {\n                const page = call.data[0] as Document;\n                expect(res.data.find(x => page.metadata.scrapeId !== undefined && page.metadata.scrapeId === x.metadata.scrapeId)).toBeDefined();\n            } else if (call.type === \"batch_scrape.completed\") {\n                hasCompleted = true;\n            }\n        }\n\n        expect(hasStarted).toBe(true);\n        expect(hasCompleted).toBe(true);\n\n        expect(res.data.length).toBe(calls.filter(x => x.type === \"batch_scrape.page\").length);\n    }, 600000);\n});"]}