{"version":3,"file":"batch-scrape.test.js","sourceRoot":"","sources":["../../../../src/__tests__/snips/batch-scrape.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { batchScrape, scrapeTimeout, idmux, Identity } from \"./lib\";\n\nlet identity: Identity;\n\nbeforeAll(async () => {\n  identity = await idmux({\n    name: \"batch-scrape\",\n    concurrency: 100,\n    credits: 1000000,\n  });\n}, 10000);\n\ndescribe(\"Batch scrape tests\", () => {\n    it.concurrent(\"works\", async () => {\n        const response = await batchScrape({\n            urls: [\"http://firecrawl.dev\"]\n        }, identity);\n        \n        expect(response.data[0]).toHaveProperty(\"markdown\");\n        expect(response.data[0].markdown).toContain(\"Firecrawl\");\n    }, scrapeTimeout);\n\n    if (!process.env.TEST_SUITE_SELF_HOSTED) {\n        describe(\"JSON format\", () => {\n            it.concurrent(\"works\", async () => {\n                const response = await batchScrape({\n                    urls: [\"http://firecrawl.dev\"],\n                    formats: [\"json\"],\n                    jsonOptions: {\n                        prompt: \"Based on the information on the page, find what the company's mission is and whether it supports SSO, and whether it is open source.\",\n                        schema: {\n                            type: \"object\",\n                            properties: {\n                                company_mission: {\n                                    type: \"string\",\n                                },\n                                supports_sso: {\n                                    type: \"boolean\",\n                                },\n                                is_open_source: {\n                                    type: \"boolean\",\n                                },\n                            },\n                            required: [\"company_mission\", \"supports_sso\", \"is_open_source\"],\n                        },\n                    },\n                }, identity);\n            \n                expect(response.data[0]).toHaveProperty(\"json\");\n                expect(response.data[0].json).toHaveProperty(\"company_mission\");\n                expect(typeof response.data[0].json.company_mission).toBe(\"string\");\n                expect(response.data[0].json).toHaveProperty(\"supports_sso\");\n                expect(response.data[0].json.supports_sso).toBe(false);\n                expect(typeof response.data[0].json.supports_sso).toBe(\"boolean\");\n                expect(response.data[0].json).toHaveProperty(\"is_open_source\");\n                expect(response.data[0].json.is_open_source).toBe(true);\n                expect(typeof response.data[0].json.is_open_source).toBe(\"boolean\");\n            }, 180000);\n        });\n    }\n\n    it.concurrent(\"sourceURL stays unnormalized\", async () => {\n        const response = await batchScrape({\n            urls: [\"https://firecrawl.dev/?pagewanted=all&et_blog\"],\n        }, identity);\n    \n        expect(response.data[0].metadata.sourceURL).toBe(\"https://firecrawl.dev/?pagewanted=all&et_blog\");\n    }, scrapeTimeout);\n});\n"]}