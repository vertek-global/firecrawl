{"version":3,"file":"concurrency.test.js","sourceRoot":"","sources":["../../../../src/__tests__/snips/concurrency.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { batchScrapeWithConcurrencyTracking, crawlWithConcurrencyTracking, idmux } from \"./lib\";\n\nif (!process.env.TEST_SUITE_SELF_HOSTED) {\n    const accountConcurrencyLimit = 20;\n\n    describe(\"Concurrency queue and limit\", () => {\n        it.concurrent(\"crawl utilizes full concurrency limit and doesn't go over\", async () => {\n            const identity = await idmux({\n                name: \"concurrency/crawl utilizes full concurrency limit and doesn't go over\",\n                concurrency: accountConcurrencyLimit,\n                credits: 100,\n            });\n\n            const limit = accountConcurrencyLimit * 2;\n    \n            const { crawl, concurrencies } = await crawlWithConcurrencyTracking({\n                url: \"https://firecrawl.dev\",\n                limit,\n            }, identity);\n    \n            expect(Math.max(...concurrencies)).toBe(accountConcurrencyLimit);\n            expect(crawl.completed).toBe(limit);\n        }, 600000);\n    \n        it.concurrent(\"crawl handles maxConcurrency properly\", async () => {\n            const identity = await idmux({\n                name: \"concurrency/crawl handles maxConcurrency properly\",\n                concurrency: accountConcurrencyLimit,\n                credits: 100,\n            });\n\n            const { crawl, concurrencies } = await crawlWithConcurrencyTracking({\n                url: \"https://firecrawl.dev\",\n                limit: 15,\n                maxConcurrency: 5,\n            }, identity);\n    \n            expect(Math.max(...concurrencies)).toBe(5);\n            expect(crawl.completed).toBe(15);\n        }, 600000);\n    \n        it.concurrent(\"crawl maxConcurrency stacks properly\", async () => {\n            const identity = await idmux({\n                name: \"concurrency/crawl maxConcurrency stacks properly\",\n                concurrency: accountConcurrencyLimit,\n                credits: 100,\n            });\n\n            const [{ crawl: crawl1, concurrencies: concurrencies1 }, { crawl: crawl2, concurrencies: concurrencies2 }] = await Promise.all([\n                crawlWithConcurrencyTracking({\n                    url: \"https://firecrawl.dev\",\n                    limit: 15,\n                    maxConcurrency: 5,\n                }, identity),\n                crawlWithConcurrencyTracking({\n                    url: \"https://firecrawl.dev\",\n                    limit: 15,\n                    maxConcurrency: 5,\n                }, identity),\n            ]);\n    \n            expect(Math.max(...concurrencies1, ...concurrencies2)).toBe(10);\n            expect(crawl1.completed).toBe(15);\n            expect(crawl2.completed).toBe(15);\n        }, 1200000);\n\n        it.concurrent(\"batch scrape utilizes full concurrency limit and doesn't go over\", async () => {\n            const identity = await idmux({\n                name: \"concurrency/batch scrape utilizes full concurrency limit and doesn't go over\",\n                concurrency: accountConcurrencyLimit,\n                credits: 100,\n            });\n\n            const limit = accountConcurrencyLimit * 2;\n    \n            const { batchScrape, concurrencies } = await batchScrapeWithConcurrencyTracking({\n                urls: Array(limit).fill(0).map(_ => `https://firecrawl.dev`),\n            }, identity);\n    \n            expect(Math.max(...concurrencies)).toBe(accountConcurrencyLimit);\n            expect(batchScrape.completed).toBe(limit);\n        }, 600000);\n    \n        it.concurrent(\"batch scrape handles maxConcurrency properly\", async () => {\n            const identity = await idmux({\n                name: \"concurrency/batch scrape handles maxConcurrency properly\",\n                concurrency: accountConcurrencyLimit,\n                credits: 100,\n            });\n\n            const { batchScrape, concurrencies } = await batchScrapeWithConcurrencyTracking({\n                urls: Array(15).fill(0).map(_ => `https://firecrawl.dev`),\n                maxConcurrency: 5,\n            }, identity);\n    \n            expect(Math.max(...concurrencies)).toBe(5);\n            expect(batchScrape.completed).toBe(15);\n        }, 600000);\n    \n        it.concurrent(\"batch scrape maxConcurrency stacks properly\", async () => {\n            const identity = await idmux({\n                name: \"concurrency/batch scrape maxConcurrency stacks properly\",\n                concurrency: accountConcurrencyLimit,\n                credits: 100,\n            });\n\n            const [{ batchScrape: batchScrape1, concurrencies: concurrencies1 }, { batchScrape: batchScrape2, concurrencies: concurrencies2 }] = await Promise.all([\n                batchScrapeWithConcurrencyTracking({\n                    urls: Array(15).fill(0).map(_ => `https://firecrawl.dev`),\n                    maxConcurrency: 5,\n                }, identity),\n                batchScrapeWithConcurrencyTracking({\n                    urls: Array(15).fill(0).map(_ => `https://firecrawl.dev`),\n                    maxConcurrency: 5,\n                }, identity),\n            ]);\n    \n            expect(Math.max(...concurrencies1, ...concurrencies2)).toBe(10);\n            expect(batchScrape1.completed).toBe(15);\n            expect(batchScrape2.completed).toBe(15);\n        }, 1200000);\n    });    \n} else {\n    it(\"stubbed\", () => {\n        expect(true).toBe(true);\n    });\n}\n"]}