{"version":3,"file":"map.test.js","sourceRoot":"","sources":["../../../../src/__tests__/snips/map.test.ts"],"names":[],"mappings":";;AAAA,+BAAiE;AAEjE,IAAI,QAAkB,CAAC;AAEvB,SAAS,CAAC,KAAK,IAAI,EAAE;IACnB,QAAQ,GAAG,MAAM,IAAA,WAAK,EAAC;QACrB,IAAI,EAAE,KAAK;QACX,WAAW,EAAE,GAAG;QAChB,OAAO,EAAE,OAAO;KACjB,CAAC,CAAC;AACL,CAAC,EAAE,KAAK,CAAC,CAAC;AAEV,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,EAAE,CAAC,UAAU,CAAC,oBAAoB,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,QAAQ,GAAG,MAAM,IAAA,SAAG,EAAC;YACzB,GAAG,EAAE,sBAAsB;SAC5B,EAAE,QAAQ,CAAC,CAAC;QAEb,IAAA,wBAAkB,EAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC,EAAE,KAAK,CAAC,CAAC;IAEV,EAAE,CAAC,UAAU,CAAC,oBAAoB,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,QAAQ,GAAG,MAAM,IAAA,SAAG,EAAC;YACzB,GAAG,EAAE,sBAAsB;YAC3B,OAAO,EAAE,CAAC;SACX,EAAE,QAAQ,CAAC,CAAC;QAEb,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACxD,CAAC,EAAE,KAAK,CAAC,CAAC;IAEV,EAAE,CAAC,UAAU,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QAC7D,IAAI,QAAQ,GAAG,MAAM,IAAA,SAAG,EAAC;YACvB,GAAG,EAAE,yBAAyB;YAC9B,WAAW,EAAE,IAAI;YACjB,OAAO,EAAE,kBAAkB;SAC5B,EAAE,QAAQ,CAAC,CAAC;QAEb,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,yFAAyF,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvJ,CAAC,EAAE,KAAK,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC","sourcesContent":["import { expectMapToSucceed, map, idmux, Identity } from \"./lib\";\n\nlet identity: Identity;\n\nbeforeAll(async () => {\n  identity = await idmux({\n    name: \"map\",\n    concurrency: 100,\n    credits: 1000000,\n  });\n}, 10000);\n\ndescribe(\"Map tests\", () => {\n  it.concurrent(\"basic map succeeds\", async () => {\n    const response = await map({\n      url: \"http://firecrawl.dev\",\n    }, identity);\n\n    expectMapToSucceed(response);\n  }, 60000);\n\n  it.concurrent(\"times out properly\", async () => {\n    const response = await map({\n      url: \"http://firecrawl.dev\",\n      timeout: 1\n    }, identity);\n\n    expect(response.statusCode).toBe(408);\n    expect(response.body.success).toBe(false);\n    expect(response.body.error).toBe(\"Request timed out\");\n  }, 10000);\n\n  it.concurrent(\"handles query parameters correctly\", async () => {\n    let response = await map({\n      url: \"https://www.hfea.gov.uk\",\n      sitemapOnly: true,\n      useMock: \"map-query-params\",\n    }, identity);\n\n    expect(response.statusCode).toBe(200);\n    expect(response.body.success).toBe(true);\n    expect(response.body.links.some(x => x.match(/^https:\\/\\/www\\.hfea\\.gov\\.uk\\/choose-a-clinic\\/clinic-search\\/results\\/?\\?options=\\d+$/))).toBe(true);\n  }, 60000);\n});\n"]}