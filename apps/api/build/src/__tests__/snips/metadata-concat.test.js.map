{"version":3,"file":"metadata-concat.test.js","sourceRoot":"","sources":["../../../../src/__tests__/snips/metadata-concat.test.ts"],"names":[],"mappings":";;AAAA,iFAA8E;AAC9E,2CAA2D;AAE3D,IAAA,kBAAQ,EAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAA,YAAE,EAAC,sGAAsG,EAAE,KAAK,IAAI,EAAE;QACpH,MAAM,IAAI,GAAG;;;;;;;;;;;;KAYZ,CAAC;QAEF,MAAM,IAAI,GAAQ;YAChB,GAAG,EAAE,qBAAqB;YAC1B,EAAE,EAAE,SAAS;YACb,MAAM,EAAE;gBACN,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE;gBACf,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;aACjB;SACF,CAAC;QAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,iCAAe,EAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAEnD,IAAA,gBAAM,EAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAA,gBAAM,EAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxD,IAAA,gBAAM,EAAC,OAAO,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAA,gBAAM,EAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;QAE3E,IAAA,gBAAM,EAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,WAAW,EAAE,CAAC;QACjD,IAAA,gBAAM,EAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7D,IAAA,gBAAM,EAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;QAE/D,IAAA,gBAAM,EAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;QACxC,IAAA,gBAAM,EAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpD,IAAA,gBAAM,EAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { extractMetadata } from \"../../scraper/scrapeURL/lib/extractMetadata\";\nimport { jest, describe, it, expect } from \"@jest/globals\";\n\ndescribe(\"Metadata concatenation\", () => {\n  it(\"should concatenate description field into a string while preserving arrays for other metadata fields\", async () => {\n    const html = `\n      <html>\n        <head>\n          <meta name=\"description\" content=\"First description\">\n          <meta name=\"description\" content=\"Second description\">\n          <meta property=\"og:locale:alternate\" content=\"en_US\">\n          <meta property=\"og:locale:alternate\" content=\"fr_FR\">\n          <meta name=\"keywords\" content=\"first keyword\">\n          <meta name=\"keywords\" content=\"second keyword\">\n        </head>\n        <body></body>\n      </html>\n    `;\n    \n    const meta: any = {\n      url: \"https://example.com\",\n      id: \"test-id\",\n      logger: {\n        warn: jest.fn(),\n        error: jest.fn()\n      }\n    };\n    \n    const metadata = await extractMetadata(meta, html);\n    \n    expect(metadata.description).toBeDefined();\n    expect(Array.isArray(metadata.description)).toBe(false);\n    expect(typeof metadata.description).toBe(\"string\");\n    expect(metadata.description).toBe(\"First description, Second description\");\n    \n    expect(metadata.ogLocaleAlternate).toBeDefined();\n    expect(Array.isArray(metadata.ogLocaleAlternate)).toBe(true);\n    expect(metadata.ogLocaleAlternate).toEqual([\"en_US\", \"fr_FR\"]);\n    \n    expect(metadata.keywords).toBeDefined();\n    expect(Array.isArray(metadata.keywords)).toBe(true);\n    expect(metadata.keywords).toEqual([\"first keyword\", \"second keyword\"]);\n  });\n});\n"]}