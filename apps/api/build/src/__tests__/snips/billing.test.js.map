{"version":3,"file":"billing.test.js","sourceRoot":"","sources":["../../../../src/__tests__/snips/billing.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { batchScrape, crawl, creditUsage, extract, idmux, map, scrape, search, tokenUsage } from \"./lib\";\n\nconst sleep = (ms: number) => new Promise(x => setTimeout(() => x(true), ms));\nconst sleepForBatchBilling = () => sleep(40000);\n\ndescribe(\"Billing tests\", () => {\n    if (process.env.TEST_SUITE_SELF_HOSTED) {\n        it(\"dummy\", () => {\n            expect(true).toBe(true);\n        });\n    } else {\n        it.concurrent(\"bills scrape correctly\", async () => {\n            const identity = await idmux({\n                name: \"billing/bills scrape correctly\",\n                credits: 100,\n            });\n\n            const rc1 = (await creditUsage(identity)).remaining_credits;\n            \n            // Run all scrape operations in parallel with Promise.all\n            const [scrape1, scrape2, scrape3] = await Promise.all([\n                // scrape 1: regular fc.dev scrape (1 credit)\n                scrape({\n                    url: \"https://firecrawl.dev\"\n                }, identity),\n                \n                // scrape 1.1: regular fc.dev scrape (1 credit)\n                scrape({\n                    url: \"https://firecrawl.dev\"\n                }, identity),\n                \n                // scrape 2: fc.dev with json (5 credits)\n                scrape({\n                    url: \"https://firecrawl.dev\",\n                    formats: [\"json\"],\n                    jsonOptions: {\n                        schema: {\n                            type: \"object\",\n                            properties: {\n                                is_open_source: { type: \"boolean\" },\n                            },\n                            required: [\"is_open_source\"],\n                        },\n                    },\n                }, identity)\n            ]);\n\n            expect(scrape1.metadata.creditsUsed).toBe(1);\n            expect(scrape2.metadata.creditsUsed).toBe(1);\n            expect(scrape3.metadata.creditsUsed).toBe(5);\n            \n            // sum: 7 credits\n\n            await sleepForBatchBilling();\n\n            const rc2 = (await creditUsage(identity)).remaining_credits;\n\n            expect(rc1 - rc2).toBe(7);\n        }, 120000);\n\n        it.concurrent(\"bills batch scrape correctly\", async () => {\n            const identity = await idmux({\n                name: \"billing/bills batch scrape correctly\",\n                credits: 100,\n            });\n\n            const rc1 = (await creditUsage(identity)).remaining_credits;\n            \n            // Run both scrape operations in parallel with Promise.all\n            const [scrape1, scrape2] = await Promise.all([\n                // scrape 1: regular batch scrape with failing domain (2 credits)\n                batchScrape({\n                    urls: [\n                        \"https://firecrawl.dev\",\n                        \"https://mendable.ai\",\n                        \"https://thisdomaindoesnotexistandwillfail.fcr\",\n                    ],\n                }, identity),\n                \n                // scrape 2: batch scrape with json (10 credits)\n                batchScrape({\n                    urls: [\n                        \"https://firecrawl.dev\",\n                        \"https://mendable.ai\",\n                        \"https://thisdomaindoesnotexistandwillfail.fcr\",\n                    ],\n                    formats: [\"json\"],\n                    jsonOptions: {\n                        schema: {\n                            type: \"object\",\n                            properties: {\n                                four_word_summary: { type: \"string\" },\n                            },\n                            required: [\"four_word_summary\"],\n                        },\n                    },\n                }, identity)\n            ]);\n\n            expect(scrape1.data[0].metadata.creditsUsed).toBe(1);\n            expect(scrape1.data[1].metadata.creditsUsed).toBe(1);\n\n            expect(scrape2.data[0].metadata.creditsUsed).toBe(5);\n            expect(scrape2.data[1].metadata.creditsUsed).toBe(5);\n            \n            // sum: 12 credits\n\n            await sleepForBatchBilling();\n\n            const rc2 = (await creditUsage(identity)).remaining_credits;\n\n            expect(rc1 - rc2).toBe(12);\n        }, 600000);\n\n        it.concurrent(\"bills crawl correctly\", async () => {\n            const identity = await idmux({\n                name: \"billing/bills crawl correctly\",\n                credits: 200,\n            });\n\n            const rc1 = (await creditUsage(identity)).remaining_credits;\n            \n            // Run both crawl operations in parallel with Promise.all\n            const [crawl1, crawl2] = await Promise.all([\n                // crawl 1: regular fc.dev crawl (x credits)\n                crawl({\n                    url: \"https://firecrawl.dev\",\n                    limit: 10,\n                }, identity),\n                \n                // crawl 2: fc.dev crawl with json (5y credits)\n                crawl({\n                    url: \"https://firecrawl.dev\",\n                    scrapeOptions: {\n                        formats: [\"json\"],\n                        jsonOptions: {\n                            schema: {\n                                type: \"object\",\n                                properties: {\n                                    four_word_summary: { type: \"string\" },\n                                },\n                                required: [\"four_word_summary\"],\n                            },\n                        },\n                    },\n                    limit: 10,\n                }, identity)\n            ]);\n            \n            expect(crawl1.success).toBe(true);\n            expect(crawl2.success).toBe(true);\n            \n            // sum: x+5y credits\n\n            await sleepForBatchBilling();\n\n            const rc2 = (await creditUsage(identity)).remaining_credits;\n\n            if (crawl1.success && crawl2.success) {\n                expect(rc1 - rc2).toBe(crawl1.completed + crawl2.completed * 5);\n            }\n        }, 600000);\n\n        it.concurrent(\"bills map correctly\", async () => {\n            const identity = await idmux({\n                name: \"billing/bills map correctly\",\n                credits: 100,\n            });\n\n            const rc1 = (await creditUsage(identity)).remaining_credits;\n            await map({ url: \"https://firecrawl.dev\" }, identity);\n            await sleepForBatchBilling();\n            const rc2 = (await creditUsage(identity)).remaining_credits;\n            expect(rc1 - rc2).toBe(1);\n        }, 60000);\n\n        it.concurrent(\"bills search correctly\", async () => {\n            const identity = await idmux({\n                name: \"billing/bills search correctly\",\n                credits: 100,\n            });\n\n            const rc1 = (await creditUsage(identity)).remaining_credits;\n\n            const results = await search({\n                query: \"firecrawl\"\n            }, identity);\n\n            await sleepForBatchBilling();\n\n            const rc2 = (await creditUsage(identity)).remaining_credits;\n\n            expect(rc1 - rc2).toBe(results.length);\n        }, 60000);\n\n        it.concurrent(\"bills search with scrape correctly\", async () => {\n            const identity = await idmux({\n                name: \"billing/bills search with scrape correctly\",\n                credits: 100,\n            });\n\n            const rc1 = (await creditUsage(identity)).remaining_credits;\n\n            const results = await search({\n                query: \"firecrawl\",\n                scrapeOptions: {\n                    formats: [\"markdown\"],\n                },\n            }, identity);\n\n            await sleepForBatchBilling();\n\n            const rc2 = (await creditUsage(identity)).remaining_credits;\n\n            expect(rc1 - rc2).toBe(results.length);\n        }, 600000);\n\n        it.concurrent(\"bills extract correctly\", async () => {\n            const identity = await idmux({\n                name: \"billing/bills extract correctly\",\n                tokens: 1000,\n            });\n\n            const rc1 = (await tokenUsage(identity)).remaining_tokens;\n            \n            const extractResult = await extract({\n                urls: [\"https://firecrawl.dev\"],\n                schema: {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"is_open_source\": {\n                            \"type\": \"boolean\"\n                        }\n                    },\n                    \"required\": [\n                        \"is_open_source\"\n                    ]\n                },\n                origin: \"api-sdk\",\n            }, identity);\n\n            expect(extractResult.tokensUsed).toBe(305);\n\n            await sleepForBatchBilling();\n            \n            const rc2 = (await tokenUsage(identity)).remaining_tokens;\n\n            expect(rc1 - rc2).toBe(305);\n        }, 300000);\n\n        it.concurrent(\"bills ZDR scrape correctly\", async () => {\n            const identity = await idmux({\n                name: \"billing/bills ZDR scrape correctly\",\n                credits: 100,\n                flags: {\n                    allowZDR: true,                    \n                }\n            });\n\n            const rc1 = (await creditUsage(identity)).remaining_credits;\n            \n            // Run all scrape operations in parallel with Promise.all\n            const [scrape1, scrape2, scrape3] = await Promise.all([\n                // scrape 1: regular fc.dev scrape (1 credit)\n                scrape({\n                    url: \"https://firecrawl.dev\",\n                    zeroDataRetention: true,\n                }, identity),\n                \n                // scrape 1.1: regular fc.dev scrape (1 credit)\n                scrape({\n                    url: \"https://firecrawl.dev\",\n                    zeroDataRetention: true,\n                }, identity),\n                \n                // scrape 2: fc.dev with json (5 credits)\n                scrape({\n                    url: \"https://firecrawl.dev\",\n                    formats: [\"json\"],\n                    jsonOptions: {\n                        schema: {\n                            type: \"object\",\n                            properties: {\n                                is_open_source: { type: \"boolean\" },\n                            },\n                            required: [\"is_open_source\"],\n                        },\n                    },\n                    zeroDataRetention: true,\n                }, identity)\n            ]);\n\n            expect(scrape1.metadata.creditsUsed).toBe(2);\n            expect(scrape2.metadata.creditsUsed).toBe(2);\n            expect(scrape3.metadata.creditsUsed).toBe(6);\n            \n            // sum: 10 credits\n\n            await sleepForBatchBilling();\n\n            const rc2 = (await creditUsage(identity)).remaining_credits;\n\n            expect(rc1 - rc2).toBe(10);\n        }, 120000);\n\n        it.concurrent(\"bills ZDR batch scrape correctly\", async () => {\n            const identity = await idmux({\n                name: \"billing/bills ZDR batch scrape correctly\",\n                credits: 100,\n                flags: {\n                    allowZDR: true,\n                }\n            });\n\n            const rc1 = (await creditUsage(identity)).remaining_credits;\n            \n            // Run both scrape operations in parallel with Promise.all\n            const [scrape1, scrape2] = await Promise.all([\n                // scrape 1: regular batch scrape with failing domain (2 credits)\n                batchScrape({\n                    urls: [\n                        \"https://firecrawl.dev\",\n                        \"https://mendable.ai\",\n                        \"https://thisdomaindoesnotexistandwillfail.fcr\",\n                    ],\n                    zeroDataRetention: true,\n                }, identity),\n                \n                // scrape 2: batch scrape with json (10 credits)\n                batchScrape({\n                    urls: [\n                        \"https://firecrawl.dev\",\n                        \"https://mendable.ai\",\n                        \"https://thisdomaindoesnotexistandwillfail.fcr\",\n                    ],\n                    formats: [\"json\"],\n                    jsonOptions: {\n                        schema: {\n                            type: \"object\",\n                            properties: {\n                                four_word_summary: { type: \"string\" },\n                            },\n                            required: [\"four_word_summary\"],\n                        },\n                    },\n                    zeroDataRetention: true,\n                }, identity)\n            ]);\n\n            expect(scrape1.data[0].metadata.creditsUsed).toBe(2);\n            expect(scrape1.data[1].metadata.creditsUsed).toBe(2);\n\n            expect(scrape2.data[0].metadata.creditsUsed).toBe(6);\n            expect(scrape2.data[1].metadata.creditsUsed).toBe(6);\n            \n            // sum: 16 credits\n\n            await sleepForBatchBilling();\n\n            const rc2 = (await creditUsage(identity)).remaining_credits;\n\n            expect(rc1 - rc2).toBe(16);\n        }, 600000);\n\n        it.concurrent(\"bills ZDR crawl correctly\", async () => {\n            const identity = await idmux({\n                name: \"billing/bills ZDR crawl correctly\",\n                credits: 200,\n                flags: {\n                    allowZDR: true,\n                }\n            });\n\n            const rc1 = (await creditUsage(identity)).remaining_credits;\n            \n            // Run both crawl operations in parallel with Promise.all\n            const [crawl1, crawl2] = await Promise.all([\n                // crawl 1: regular fc.dev crawl (x credits)\n                crawl({\n                    url: \"https://firecrawl.dev\",\n                    limit: 10,\n                    zeroDataRetention: true,\n                }, identity),\n                \n                // crawl 2: fc.dev crawl with json (5y credits)\n                crawl({\n                    url: \"https://firecrawl.dev\",\n                    scrapeOptions: {\n                        formats: [\"json\"],\n                        jsonOptions: {\n                            schema: {\n                                type: \"object\",\n                                properties: {\n                                    four_word_summary: { type: \"string\" },\n                                },\n                                required: [\"four_word_summary\"],\n                            },\n                        },\n                    },\n                    limit: 10,\n                    zeroDataRetention: true,\n                }, identity)\n            ]);\n            \n            expect(crawl1.success).toBe(true);\n            expect(crawl2.success).toBe(true);\n            \n            // sum: 2x+6y credits\n\n            await sleepForBatchBilling();\n\n            const rc2 = (await creditUsage(identity)).remaining_credits;\n\n            if (crawl1.success && crawl2.success) {\n                expect(rc1 - rc2).toBe(crawl1.completed * 2 + crawl2.completed * 6);\n            }\n        }, 600000);\n\n        it.concurrent(\"bills custom-cost ZDR scrape correctly\", async () => {\n            const identity = await idmux({\n                name: \"billing/bills ZDR scrape correctly\",\n                credits: 100,\n                flags: {\n                    allowZDR: true,\n                    zdrCost: 0,                 \n                }\n            });\n\n            const rc1 = (await creditUsage(identity)).remaining_credits;\n            \n            // Run all scrape operations in parallel with Promise.all\n            const [scrape1, scrape2, scrape3] = await Promise.all([\n                // scrape 1: regular fc.dev scrape (1 credit)\n                scrape({\n                    url: \"https://firecrawl.dev\",\n                    zeroDataRetention: true,\n                }, identity),\n                \n                // scrape 1.1: regular fc.dev scrape (1 credit)\n                scrape({\n                    url: \"https://firecrawl.dev\",\n                    zeroDataRetention: true,\n                }, identity),\n                \n                // scrape 2: fc.dev with json (5 credits)\n                scrape({\n                    url: \"https://firecrawl.dev\",\n                    formats: [\"json\"],\n                    jsonOptions: {\n                        schema: {\n                            type: \"object\",\n                            properties: {\n                                is_open_source: { type: \"boolean\" },\n                            },\n                            required: [\"is_open_source\"],\n                        },\n                    },\n                    zeroDataRetention: true,\n                }, identity)\n            ]);\n\n            expect(scrape1.metadata.creditsUsed).toBe(1);\n            expect(scrape2.metadata.creditsUsed).toBe(1);\n            expect(scrape3.metadata.creditsUsed).toBe(5);\n            \n            // sum: 7 credits\n\n            await sleepForBatchBilling();\n\n            const rc2 = (await creditUsage(identity)).remaining_credits;\n\n            expect(rc1 - rc2).toBe(7);\n        }, 120000);\n    }\n});\n"]}