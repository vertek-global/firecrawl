{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../../../src/__tests__/e2e_extract/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import request from \"supertest\";\nimport dotenv from \"dotenv\";\nimport {\n  FirecrawlCrawlResponse,\n  FirecrawlCrawlStatusResponse,\n  FirecrawlScrapeResponse,\n} from \"../../types\";\n\ndotenv.config();\nconst TEST_URL = \"http://127.0.0.1:3002\";\n\ndescribe(\"E2E Tests for Extract API Routes\", () => {\n  it.concurrent(\n    \"should return authors of blog posts on firecrawl.dev\",\n    async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v1/extract\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          urls: [\"https://firecrawl.dev/*\"],\n          prompt: \"Who are the authors of the blog posts?\",\n          schema: {\n            type: \"object\",\n            properties: {\n              authors: { type: \"array\", items: { type: \"string\" } },\n            },\n          },\n        });\n\n      console.log(response.body);\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      expect(response.body.data).toHaveProperty(\"authors\");\n\n      let gotItRight = 0;\n      for (const author of response.body.data?.authors) {\n        if (author.includes(\"Caleb Peffer\")) gotItRight++;\n        if (author.includes(\"Gergő Móricz\")) gotItRight++;\n        if (author.includes(\"Eric Ciarla\")) gotItRight++;\n        if (author.includes(\"Nicolas Camara\")) gotItRight++;\n        if (author.includes(\"Jon\")) gotItRight++;\n        if (author.includes(\"Wendong\")) gotItRight++;\n      }\n\n      expect(gotItRight).toBeGreaterThan(1);\n    },\n    60000,\n  );\n\n  it.concurrent(\n    \"should return founders of firecrawl.dev (allowExternalLinks = true)\",\n    async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v1/extract\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          urls: [\"firecrawl.dev/*\"],\n          prompt: \"Who are the founders of the company?\",\n          allowExternalLinks: true,\n          schema: {\n            type: \"object\",\n            properties: {\n              founders: { type: \"array\", items: { type: \"string\" } },\n            },\n          },\n        });\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      expect(response.body.data).toHaveProperty(\"founders\");\n\n      console.log(response.body.data?.founders);\n      let gotItRight = 0;\n      for (const founder of response.body.data?.founders) {\n        if (founder.includes(\"Caleb\")) gotItRight++;\n        if (founder.includes(\"Eric\")) gotItRight++;\n        if (founder.includes(\"Nicolas\")) gotItRight++;\n        if (founder.includes(\"nick\")) gotItRight++;\n        if (founder.includes(\"eric\")) gotItRight++;\n        if (founder.includes(\"jon-noronha\")) gotItRight++;\n      }\n\n      expect(gotItRight).toBeGreaterThanOrEqual(2);\n    },\n    60000,\n  );\n\n  it.concurrent(\n    \"should return hiring opportunities on firecrawl.dev (allowExternalLinks = true)\",\n    async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v1/extract\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          urls: [\"https://firecrawl.dev/*\"],\n          prompt: \"What are they hiring for?\",\n          allowExternalLinks: true,\n          schema: {\n            type: \"array\",\n            items: {\n              type: \"string\",\n            },\n            required: [\"items\"],\n          },\n        });\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      console.log(response.body.data);\n\n      let gotItRight = 0;\n      for (const hiring of response.body.data?.items) {\n        if (hiring.includes(\"Firecrawl Example Creator\")) gotItRight++;\n        if (hiring.includes(\"Senior Frontend Engineer\")) gotItRight++;\n        if (hiring.includes(\"Technical Chief of Staff\")) gotItRight++;\n        if (hiring.includes(\"Founding Web Automation Engineer\")) gotItRight++;\n        if (hiring.includes(\"Founding Fullstack Engineer\")) gotItRight++;\n      }\n\n      expect(gotItRight).toBeGreaterThan(2);\n    },\n    60000,\n  );\n\n  it.concurrent(\n    \"should return PCI DSS compliance for Fivetran\",\n    async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v1/extract\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          urls: [\"fivetran.com/*\"],\n          prompt: \"Does Fivetran have PCI DSS compliance?\",\n          allowExternalLinks: true,\n          schema: {\n            type: \"object\",\n            properties: {\n              pciDssCompliance: { type: \"boolean\" },\n            },\n          },\n        });\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      expect(response.body.data?.pciDssCompliance).toBe(true);\n    },\n    60000,\n  );\n\n  it.concurrent(\n    \"should return Azure Data Connectors for Fivetran\",\n    async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v1/extract\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          urls: [\"fivetran.com/*\"],\n          prompt: \"What are the Azure Data Connectors they offer?\",\n          schema: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                connector: { type: \"string\" },\n                description: { type: \"string\" },\n                supportsCaptureDelete: { type: \"boolean\" },\n              },\n            },\n          },\n        });\n\n      console.log(response.body);\n      // expect(response.statusCode).toBe(200);\n      // expect(response.body).toHaveProperty(\"data\");\n      // expect(response.body.data?.pciDssCompliance).toBe(true);\n    },\n    60000,\n  );\n\n  it.concurrent(\n    \"should return Greenhouse Applicant Tracking System for Abnormal Security\",\n    async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v1/extract\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          urls: [\n            \"https://careers.abnormalsecurity.com/jobs/6119456003?gh_jid=6119456003\",\n          ],\n          prompt: \"what applicant tracking system is this company using?\",\n          schema: {\n            type: \"object\",\n            properties: {\n              isGreenhouseATS: { type: \"boolean\" },\n              answer: { type: \"string\" },\n            },\n          },\n          allowExternalLinks: true,\n        });\n\n      console.log(response.body);\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      expect(response.body.data?.isGreenhouseATS).toBe(true);\n    },\n    60000,\n  );\n\n  it.concurrent(\n    \"should return mintlify api components\",\n    async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v1/extract\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          urls: [\"https://mintlify.com/docs/*\"],\n          prompt: \"what are the 4 API components?\",\n          schema: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                component: { type: \"string\" },\n              },\n            },\n            required: [\"items\"],\n          },\n          allowExternalLinks: true,\n        });\n\n      console.log(response.body.data?.items);\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      expect(response.body.data?.items.length).toBe(4);\n      let gotItRight = 0;\n      for (const component of response.body.data?.items) {\n        if (component.component.toLowerCase().includes(\"parameter\"))\n          gotItRight++;\n        if (component.component.toLowerCase().includes(\"response\"))\n          gotItRight++;\n        if (component.component.toLowerCase().includes(\"expandable\"))\n          gotItRight++;\n        if (component.component.toLowerCase().includes(\"sticky\")) gotItRight++;\n        if (component.component.toLowerCase().includes(\"examples\"))\n          gotItRight++;\n      }\n      expect(gotItRight).toBeGreaterThan(2);\n    },\n    60000,\n  );\n\n  it.concurrent(\n    \"should return information about Eric Ciarla\",\n    async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v1/extract\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          urls: [\"https://ericciarla.com/\"],\n          prompt:\n            \"Who is Eric Ciarla? Where does he work? Where did he go to school?\",\n          schema: {\n            type: \"object\",\n            properties: {\n              name: { type: \"string\" },\n              work: { type: \"string\" },\n              education: { type: \"string\" },\n            },\n            required: [\"name\", \"work\", \"education\"],\n          },\n          allowExternalLinks: true,\n        });\n\n      console.log(response.body.data);\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      expect(response.body.data?.name).toBe(\"Eric Ciarla\");\n      expect(response.body.data?.work).toBeDefined();\n      expect(response.body.data?.education).toBeDefined();\n    },\n    60000,\n  );\n\n  it.concurrent(\n    \"should extract information without a schema\",\n    async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v1/extract\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          urls: [\"https://docs.firecrawl.dev\"],\n          prompt: \"What is the title and description of the page?\",\n        });\n\n      console.log(response.body.data);\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      expect(typeof response.body.data).toBe(\"object\");\n      expect(Object.keys(response.body.data).length).toBeGreaterThan(0);\n    },\n    60000,\n  );\n\n  it.concurrent(\n    \"should extract information with scrapeOptions.waitFor\",\n    async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v1/extract\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          urls: [\"https://firecrawl-e2e-test-git-main-rafaelsideguides-projects.vercel.app/\"],\n          prompt: \"What is the content right after the #content-1 id?\",\n          schema: {\n            type: \"object\",\n            properties: {\n              content: { type: \"string\" },\n            },\n            required: [\"content\"],\n          },\n          scrapeOptions: {\n            waitFor: 6000,\n          }\n        });\n\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"data\");\n      expect(typeof response.body.data).toBe(\"object\");\n      expect(response.body.data?.content).toBeDefined();\n      expect(response.body.data?.content).toBe(\"Content loaded after 5 seconds!\");\n    },\n    60000,\n  );\n});\n"]}