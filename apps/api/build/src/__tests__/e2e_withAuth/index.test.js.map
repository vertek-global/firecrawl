{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../../../src/__tests__/e2e_withAuth/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import request from \"supertest\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\nconst TEST_URL = \"http://127.0.0.1:3002\";\n\ndescribe(\"E2E Tests for v0 API Routes\", () => {\n  beforeAll(() => {\n    process.env.USE_DB_AUTHENTICATION = \"true\";\n  });\n\n  afterAll(() => {\n    delete process.env.USE_DB_AUTHENTICATION;\n  });\n\n  describe(\"GET /is-production\", () => {\n    it.concurrent(\"should return the production status\", async () => {\n      const response = await request(TEST_URL).get(\"/is-production\");\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"isProduction\");\n    });\n  });\n\n  describe(\"POST /v0/scrape\", () => {\n    it.concurrent(\"should require authorization\", async () => {\n      const response: any = await request(TEST_URL).post(\"/v0/scrape\");\n      expect(response.statusCode).toBe(401);\n    });\n\n    it.concurrent(\n      \"should return an error response with an invalid API key\",\n      async () => {\n        const response: any = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer invalid-api-key`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://firecrawl.dev\" });\n        expect(response.statusCode).toBe(401);\n      },\n    );\n\n    it.concurrent(\n      \"should return a successful response with a valid API key\",\n      async () => {\n        const response: any = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://roastmywebsite.ai\" });\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"markdown\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data).not.toHaveProperty(\"html\");\n        expect(response.body.data.content).toContain(\"_Roast_\");\n        expect(response.body.data.metadata.pageError).toBeUndefined();\n        expect(response.body.data.metadata.title).toBe(\"Roast My Website\");\n        expect(response.body.data.metadata.description).toBe(\n          \"Welcome to Roast My Website, the ultimate tool for putting your website through the wringer! This repository harnesses the power of Firecrawl to scrape and capture screenshots of websites, and then unleashes the latest LLM vision models to mercilessly roast them. 🌶️\",\n        );\n        expect(response.body.data.metadata.keywords).toBe(\n          \"Roast My Website,Roast,Website,GitHub,Firecrawl\",\n        );\n        expect(response.body.data.metadata.robots).toBe(\"follow, index\");\n        expect(response.body.data.metadata.ogTitle).toBe(\"Roast My Website\");\n        expect(response.body.data.metadata.ogDescription).toBe(\n          \"Welcome to Roast My Website, the ultimate tool for putting your website through the wringer! This repository harnesses the power of Firecrawl to scrape and capture screenshots of websites, and then unleashes the latest LLM vision models to mercilessly roast them. 🌶️\",\n        );\n        expect(response.body.data.metadata.ogUrl).toBe(\n          \"https://www.roastmywebsite.ai\",\n        );\n        expect(response.body.data.metadata.ogImage).toBe(\n          \"https://www.roastmywebsite.ai/og.png\",\n        );\n        expect(response.body.data.metadata.ogLocaleAlternate).toStrictEqual([]);\n        expect(response.body.data.metadata.ogSiteName).toBe(\"Roast My Website\");\n        expect(response.body.data.metadata.sourceURL).toBe(\n          \"https://roastmywebsite.ai\",\n        );\n        expect(response.body.data.metadata.pageStatusCode).toBe(200);\n      },\n      30000,\n    ); // 30 seconds timeout\n\n    it.concurrent(\n      \"should return a successful response with a valid API key and includeHtml set to true\",\n      async () => {\n        const response: any = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://roastmywebsite.ai\",\n            pageOptions: { includeHtml: true },\n          });\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"markdown\");\n        expect(response.body.data).toHaveProperty(\"html\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.content).toContain(\"_Roast_\");\n        expect(response.body.data.markdown).toContain(\"_Roast_\");\n        expect(response.body.data.html).toContain(\"<h1\");\n        expect(response.body.data.metadata.pageStatusCode).toBe(200);\n        expect(response.body.data.metadata.pageError).toBeUndefined();\n      },\n      30000,\n    ); // 30 seconds timeout\n\n    it.concurrent(\n      \"should return a successful response for a valid scrape with PDF file\",\n      async () => {\n        const response: any = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://arxiv.org/pdf/astro-ph/9301001.pdf\" });\n        await new Promise((r) => setTimeout(r, 6000));\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.content).toContain(\n          \"We present spectrophotometric observations of the Broad Line Radio Galaxy\",\n        );\n        expect(response.body.data.metadata.pageStatusCode).toBe(200);\n        expect(response.body.data.metadata.pageError).toBeUndefined();\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response for a valid scrape with PDF file without explicit .pdf extension\",\n      async () => {\n        const response: any = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://arxiv.org/pdf/astro-ph/9301001\" });\n        await new Promise((r) => setTimeout(r, 6000));\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.content).toContain(\n          \"We present spectrophotometric observations of the Broad Line Radio Galaxy\",\n        );\n        expect(response.body.data.metadata.pageStatusCode).toBe(200);\n        expect(response.body.data.metadata.pageError).toBeUndefined();\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response with a valid API key with removeTags option\",\n      async () => {\n        const responseWithoutRemoveTags: any = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://www.scrapethissite.com/\" });\n        expect(responseWithoutRemoveTags.statusCode).toBe(200);\n        expect(responseWithoutRemoveTags.body).toHaveProperty(\"data\");\n        expect(responseWithoutRemoveTags.body.data).toHaveProperty(\"content\");\n        expect(responseWithoutRemoveTags.body.data).toHaveProperty(\"markdown\");\n        expect(responseWithoutRemoveTags.body.data).toHaveProperty(\"metadata\");\n        expect(responseWithoutRemoveTags.body.data).not.toHaveProperty(\"html\");\n        expect(responseWithoutRemoveTags.body.data.content).toContain(\n          \"Scrape This Site\",\n        );\n        expect(responseWithoutRemoveTags.body.data.content).toContain(\n          \"Lessons and Videos\",\n        ); // #footer\n        expect(responseWithoutRemoveTags.body.data.content).toContain(\n          \"[Sandbox](\",\n        ); // .nav\n        expect(responseWithoutRemoveTags.body.data.content).toContain(\n          \"web scraping\",\n        ); // strong\n\n        const response: any = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://www.scrapethissite.com/\",\n            pageOptions: { removeTags: [\".nav\", \"#footer\", \"strong\"] },\n          });\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"markdown\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data).not.toHaveProperty(\"html\");\n        expect(response.body.data.content).toContain(\"Scrape This Site\");\n        expect(response.body.data.content).not.toContain(\"Lessons and Videos\"); // #footer\n        expect(response.body.data.content).not.toContain(\"[Sandbox](\"); // .nav\n        expect(response.body.data.content).not.toContain(\"web scraping\"); // strong\n      },\n      30000,\n    ); // 30 seconds timeout\n\n    it.concurrent(\n      \"should return a successful response for a scrape with 400 page\",\n      async () => {\n        const response: any = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://httpstat.us/400\" });\n        await new Promise((r) => setTimeout(r, 5000));\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.metadata.pageStatusCode).toBe(400);\n        expect(response.body.data.metadata.pageError.toLowerCase()).toContain(\n          \"bad request\",\n        );\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response for a scrape with 401 page\",\n      async () => {\n        const response: any = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://httpstat.us/401\" });\n        await new Promise((r) => setTimeout(r, 5000));\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.metadata.pageStatusCode).toBe(401);\n        expect(response.body.data.metadata.pageError.toLowerCase()).toContain(\n          \"unauthorized\",\n        );\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response for a scrape with 403 page\",\n      async () => {\n        const response: any = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://httpstat.us/403\" });\n\n        await new Promise((r) => setTimeout(r, 5000));\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.metadata.pageStatusCode).toBe(403);\n        expect(response.body.data.metadata.pageError.toLowerCase()).toContain(\n          \"forbidden\",\n        );\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response for a scrape with 404 page\",\n      async () => {\n        const response: any = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://httpstat.us/404\" });\n        await new Promise((r) => setTimeout(r, 5000));\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.metadata.pageStatusCode).toBe(404);\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response for a scrape with 405 page\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://httpstat.us/405\" });\n        await new Promise((r) => setTimeout(r, 5000));\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.metadata.pageStatusCode).toBe(405);\n      },\n      60000,\n    ); // 60 seconds\n\n    it.concurrent(\n      \"should return a successful response for a scrape with 500 page\",\n      async () => {\n        const response: any = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://httpstat.us/500\" });\n        await new Promise((r) => setTimeout(r, 5000));\n\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"data\");\n        expect(response.body.data).toHaveProperty(\"content\");\n        expect(response.body.data).toHaveProperty(\"metadata\");\n        expect(response.body.data.metadata.pageStatusCode).toBe(500);\n      },\n      60000,\n    ); // 60 seconds\n  });\n\n  describe(\"POST /v0/crawl\", () => {\n    it.concurrent(\"should require authorization\", async () => {\n      const response: any = await request(TEST_URL).post(\"/v0/crawl\");\n      expect(response.statusCode).toBe(401);\n    });\n\n    it.concurrent(\n      \"should return an error response with an invalid API key\",\n      async () => {\n        const response: any = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer invalid-api-key`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://firecrawl.dev\" });\n        expect(response.statusCode).toBe(401);\n      },\n    );\n\n    it.concurrent(\n      \"should return a successful response with a valid API key for crawl\",\n      async () => {\n        const response: any = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://firecrawl.dev\" });\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"jobId\");\n        expect(response.body.jobId).toMatch(\n          /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/,\n        );\n      },\n    );\n\n    it.concurrent(\n      \"should return a successful response with a valid API key and valid includes option\",\n      async () => {\n        const crawlResponse: any = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://mendable.ai\",\n            limit: 10,\n            crawlerOptions: {\n              includes: [\"blog/*\"],\n            },\n          });\n\n        let response: any;\n        let isFinished = false;\n\n        while (!isFinished) {\n          response = await request(TEST_URL)\n            .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n          expect(response.statusCode).toBe(200);\n          expect(response.body).toHaveProperty(\"status\");\n          isFinished = response.body.status === \"completed\";\n\n          if (!isFinished) {\n            await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n          }\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for data to be saved on the database\n        const completedResponse = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n        const urls = completedResponse.body.data.map(\n          (item: any) => item.metadata?.sourceURL,\n        );\n        expect(urls.length).toBeGreaterThan(5);\n        urls.forEach((url: string) => {\n          expect(url.startsWith(\"https://www.mendable.ai/blog/\")).toBeTruthy();\n        });\n\n        expect(completedResponse.statusCode).toBe(200);\n        expect(completedResponse.body).toHaveProperty(\"status\");\n        expect(completedResponse.body.status).toBe(\"completed\");\n        expect(completedResponse.body).toHaveProperty(\"data\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"content\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n        expect(completedResponse.body.data[0].content).toContain(\"Mendable\");\n        expect(completedResponse.body.data[0].metadata.pageStatusCode).toBe(\n          200,\n        );\n        expect(\n          completedResponse.body.data[0].metadata.pageError,\n        ).toBeUndefined();\n      },\n      180000,\n    ); // 180 seconds\n\n    it.concurrent(\n      \"should return a successful response with a valid API key and valid excludes option\",\n      async () => {\n        const crawlResponse: any = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://mendable.ai\",\n            limit: 10,\n            crawlerOptions: {\n              excludes: [\"blog/*\"],\n            },\n          });\n\n        let isFinished = false;\n        let response: any;\n\n        while (!isFinished) {\n          response = await request(TEST_URL)\n            .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n          expect(response.statusCode).toBe(200);\n          expect(response.body).toHaveProperty(\"status\");\n          isFinished = response.body.status === \"completed\";\n\n          if (!isFinished) {\n            await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n          }\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for data to be saved on the database\n        const completedResponse: any = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n        const urls = completedResponse.body.data.map(\n          (item: any) => item.metadata?.sourceURL,\n        );\n        expect(urls.length).toBeGreaterThan(5);\n        urls.forEach((url: string) => {\n          expect(url.startsWith(\"https://wwww.mendable.ai/blog/\")).toBeFalsy();\n        });\n      },\n      90000,\n    ); // 90 seconds\n\n    it.concurrent(\n      \"should return a successful response with max depth option for a valid crawl job\",\n      async () => {\n        const crawlResponse: any = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://www.scrapethissite.com\",\n            crawlerOptions: { maxDepth: 1 },\n          });\n        expect(crawlResponse.statusCode).toBe(200);\n\n        const response: any = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"status\");\n        expect([\"active\", \"waiting\"]).toContain(response.body.status);\n        // wait for 60 seconds\n        let isCompleted = false;\n        while (!isCompleted) {\n          const statusCheckResponse = await request(TEST_URL)\n            .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n          expect(statusCheckResponse.statusCode).toBe(200);\n          isCompleted = statusCheckResponse.body.status === \"completed\";\n          if (!isCompleted) {\n            await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait for 1 second before checking again\n          }\n        }\n        const completedResponse: any = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n        expect(completedResponse.statusCode).toBe(200);\n        expect(completedResponse.body).toHaveProperty(\"status\");\n        expect(completedResponse.body.status).toBe(\"completed\");\n        expect(completedResponse.body).toHaveProperty(\"data\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"content\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n        expect(completedResponse.body.data[0].metadata.pageStatusCode).toBe(\n          200,\n        );\n        expect(\n          completedResponse.body.data[0].metadata.pageError,\n        ).toBeUndefined();\n        const urls = completedResponse.body.data.map(\n          (item: any) => item.metadata?.sourceURL,\n        );\n        expect(urls.length).toBeGreaterThan(1);\n\n        // Check if all URLs have a maximum depth of 1\n        urls.forEach((url: string) => {\n          const pathSplits = new URL(url).pathname.split(\"/\");\n          const depth =\n            pathSplits.length -\n            (pathSplits[0].length === 0 &&\n            pathSplits[pathSplits.length - 1].length === 0\n              ? 1\n              : 0);\n          expect(depth).toBeLessThanOrEqual(2);\n        });\n      },\n      180000,\n    );\n  });\n\n  describe(\"POST /v0/crawlWebsitePreview\", () => {\n    it.concurrent(\"should require authorization\", async () => {\n      const response: any = await request(TEST_URL).post(\n        \"/v0/crawlWebsitePreview\",\n      );\n      expect(response.statusCode).toBe(401);\n    });\n\n    it.concurrent(\n      \"should return an error response with an invalid API key\",\n      async () => {\n        const response: any = await request(TEST_URL)\n          .post(\"/v0/crawlWebsitePreview\")\n          .set(\"Authorization\", `Bearer invalid-api-key`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://firecrawl.dev\" });\n        expect(response.statusCode).toBe(401);\n      },\n    );\n\n    it.concurrent(\n      \"should return a timeout error when scraping takes longer than the specified timeout\",\n      async () => {\n        const response: any = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://firecrawl.dev\", timeout: 1000 });\n\n        expect(response.statusCode).toBe(408);\n      },\n      3000,\n    );\n  });\n\n  describe(\"POST /v0/search\", () => {\n    it.concurrent(\"should require authorization\", async () => {\n      const response = await request(TEST_URL).post(\"/v0/search\");\n      expect(response.statusCode).toBe(401);\n    });\n\n    it.concurrent(\n      \"should return an error response with an invalid API key\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/search\")\n          .set(\"Authorization\", `Bearer invalid-api-key`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ query: \"test\" });\n        expect(response.statusCode).toBe(401);\n      },\n    );\n\n    it.concurrent(\n      \"should return a successful response with a valid API key for search\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/search\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ query: \"test\" });\n        expect(response.statusCode).toBe(200);\n        expect(response.body).toHaveProperty(\"success\");\n        expect(response.body.success).toBe(true);\n        expect(response.body).toHaveProperty(\"data\");\n      },\n      60000,\n    ); // 60 seconds timeout\n  });\n\n  describe(\"GET /v0/crawl/status/:jobId\", () => {\n    it.concurrent(\"should require authorization\", async () => {\n      const response = await request(TEST_URL).get(\"/v0/crawl/status/123\");\n      expect(response.statusCode).toBe(401);\n    });\n\n    it.concurrent(\n      \"should return an error response with an invalid API key\",\n      async () => {\n        const response = await request(TEST_URL)\n          .get(\"/v0/crawl/status/123\")\n          .set(\"Authorization\", `Bearer invalid-api-key`);\n        expect(response.statusCode).toBe(401);\n      },\n    );\n\n    it.concurrent(\n      \"should return Job not found for invalid job ID\",\n      async () => {\n        const response = await request(TEST_URL)\n          .get(\"/v0/crawl/status/invalidJobId\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n        expect(response.statusCode).toBe(404);\n      },\n    );\n\n    it.concurrent(\n      \"should return a successful crawl status response for a valid crawl job\",\n      async () => {\n        const crawlResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({ url: \"https://firecrawl.dev/blog\" });\n        expect(crawlResponse.statusCode).toBe(200);\n\n        let isCompleted = false;\n\n        while (!isCompleted) {\n          const response = await request(TEST_URL)\n            .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n            .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n          expect(response.statusCode).toBe(200);\n          expect(response.body).toHaveProperty(\"status\");\n\n          if (response.body.status === \"completed\") {\n            isCompleted = true;\n          } else {\n            await new Promise((r) => setTimeout(r, 1000)); // Wait for 1 second before checking again\n          }\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, 1000)); // wait for data to be saved on the database\n        const completedResponse = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n\n        expect(completedResponse.body).toHaveProperty(\"status\");\n        expect(completedResponse.body.status).toBe(\"completed\");\n        expect(completedResponse.body).toHaveProperty(\"data\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"content\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n        expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n        expect(completedResponse.body.data[0].content).toContain(\"Firecrawl\");\n        expect(completedResponse.body.data[0].metadata.pageStatusCode).toBe(\n          200,\n        );\n        expect(\n          completedResponse.body.data[0].metadata.pageError,\n        ).toBeUndefined();\n\n        const childrenLinks = completedResponse.body.data.filter(\n          (doc) =>\n            doc.metadata &&\n            doc.metadata.sourceURL &&\n            doc.metadata.sourceURL.includes(\"firecrawl.dev/blog\"),\n        );\n\n        expect(childrenLinks.length).toBe(completedResponse.body.data.length);\n      },\n      180000,\n    ); // 120 seconds\n\n    // TODO: review the test below\n    // it.concurrent('should return a successful response for a valid crawl job with PDF files without explicit .pdf extension ', async () => {\n    //   const crawlResponse = await request(TEST_URL)\n    //     .post('/v0/crawl')\n    //     .set('Authorization', `Bearer ${process.env.TEST_API_KEY}`)\n    //     .set('Content-Type', 'application/json')\n    //     .send({ url: 'https://arxiv.org/list/astro-ph/1993-01',\n    //       crawlerOptions: {\n    //         limit: 10,\n    //         returnOnlyUrls: true\n    //       }});\n    //   expect(crawlResponse.statusCode).toBe(200);\n\n    //   let isCompleted = false;\n    //   let completedResponse;\n\n    //   while (!isCompleted) {\n    //     const response = await request(TEST_URL)\n    //       .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n    //       .set('Authorization', `Bearer ${process.env.TEST_API_KEY}`);\n    //     expect(response.statusCode).toBe(200);\n    //     expect(response.body).toHaveProperty('status');\n\n    //     if (response.body.status === 'completed') {\n    //       isCompleted = true;\n    //       completedResponse = response;\n    //     } else {\n    //       await new Promise((r) => setTimeout(r, 1000)); // Wait for 1 second before checking again\n    //     }\n    //   }\n    //     expect(completedResponse.body.status).toBe('completed');\n    //     expect(completedResponse.body).toHaveProperty('data');\n    //     expect(completedResponse.body.data.length).toEqual(1);\n    //     expect(completedResponse.body.data).toEqual(\n    //       expect.arrayContaining([\n    //         expect.objectContaining({\n    //           content: expect.stringContaining('asymmetries might represent, for instance, preferred source orientations to our line of sight.')\n    //         })\n    //       ])\n    //     );\n\n    //     expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n    //     expect(completedResponse.body.data[0].metadata.pageStatusCode).toBe(200);\n    //     expect(completedResponse.body.data[0].metadata.pageError).toBeUndefined();\n    // }, 180000); // 120 seconds\n\n    it.concurrent(\n      \"If someone cancels a crawl job, it should turn into failed status\",\n      async () => {\n        const crawlResponse = await request(TEST_URL)\n          .post(\"/v0/crawl\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://docs.tatum.io\",\n            crawlerOptions: { limit: 200 },\n          });\n\n        expect(crawlResponse.statusCode).toBe(200);\n\n        await new Promise((r) => setTimeout(r, 10000));\n\n        const responseCancel = await request(TEST_URL)\n          .delete(`/v0/crawl/cancel/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`);\n        expect(responseCancel.statusCode).toBe(200);\n        expect(responseCancel.body).toHaveProperty(\"status\");\n        expect(responseCancel.body.status).toBe(\"cancelled\");\n\n        await new Promise((r) => setTimeout(r, 10000));\n        const completedResponse = await request(TEST_URL)\n          .get(`/v0/crawl/status/${crawlResponse.body.jobId}`)\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .maxResponseSize(4000000000);\n\n        expect(completedResponse.statusCode).toBe(200);\n        expect(completedResponse.body).toHaveProperty(\"status\");\n        expect(completedResponse.body.status).toBe(\"failed\");\n        expect(completedResponse.body).toHaveProperty(\"data\");\n\n        let isNullOrEmptyArray = false;\n        if (\n          completedResponse.body.data === null ||\n          completedResponse.body.data.length === 0\n        ) {\n          isNullOrEmptyArray = true;\n        }\n        expect(isNullOrEmptyArray).toBe(true);\n        expect(completedResponse.body.data).toEqual(expect.arrayContaining([]));\n        expect(completedResponse.body).toHaveProperty(\"partial_data\");\n        expect(completedResponse.body.partial_data[0]).toHaveProperty(\n          \"content\",\n        );\n        expect(completedResponse.body.partial_data[0]).toHaveProperty(\n          \"markdown\",\n        );\n        expect(completedResponse.body.partial_data[0]).toHaveProperty(\n          \"metadata\",\n        );\n        expect(\n          completedResponse.body.partial_data[0].metadata.pageStatusCode,\n        ).toBe(200);\n        expect(\n          completedResponse.body.partial_data[0].metadata.pageError,\n        ).toBeUndefined();\n      },\n      60000,\n    ); // 60 seconds\n  });\n\n  describe(\"POST /v0/scrape with LLM Extraction\", () => {\n    it.concurrent(\n      \"should extract data using LLM extraction mode\",\n      async () => {\n        const response = await request(TEST_URL)\n          .post(\"/v0/scrape\")\n          .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n          .set(\"Content-Type\", \"application/json\")\n          .send({\n            url: \"https://mendable.ai\",\n            pageOptions: {\n              onlyMainContent: true,\n            },\n            extractorOptions: {\n              mode: \"llm-extraction\",\n              extractionPrompt:\n                \"Based on the information on the page, find what the company's mission is and whether it supports SSO, and whether it is open source\",\n              extractionSchema: {\n                type: \"object\",\n                properties: {\n                  company_mission: {\n                    type: \"string\",\n                  },\n                  supports_sso: {\n                    type: \"boolean\",\n                  },\n                  is_open_source: {\n                    type: \"boolean\",\n                  },\n                },\n                required: [\"company_mission\", \"supports_sso\", \"is_open_source\"],\n              },\n            },\n          });\n\n        // Ensure that the job was successfully created before proceeding with LLM extraction\n        expect(response.statusCode).toBe(200);\n\n        // Assuming the LLM extraction object is available in the response body under `data.llm_extraction`\n        let llmExtraction = response.body.data.llm_extraction;\n\n        // Check if the llm_extraction object has the required properties with correct types and values\n        expect(llmExtraction).toHaveProperty(\"company_mission\");\n        expect(typeof llmExtraction.company_mission).toBe(\"string\");\n        expect(llmExtraction).toHaveProperty(\"supports_sso\");\n        expect(llmExtraction.supports_sso).toBe(true);\n        expect(typeof llmExtraction.supports_sso).toBe(\"boolean\");\n        expect(llmExtraction).toHaveProperty(\"is_open_source\");\n        expect(llmExtraction.is_open_source).toBe(false);\n        expect(typeof llmExtraction.is_open_source).toBe(\"boolean\");\n      },\n      60000,\n    ); // 60 secs\n  });\n});\n"]}