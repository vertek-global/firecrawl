{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../../../src/__tests__/e2e_noAuth/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import request from \"supertest\";\nimport dotenv from \"dotenv\";\nimport { BLOCKLISTED_URL_MESSAGE } from \"../../lib/strings\";\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\ndotenv.config();\n\nconst TEST_URL = \"http://127.0.0.1:3002\";\n\ndescribe(\"E2E Tests for API Routes with No Authentication\", () => {\n  let originalEnv: NodeJS.ProcessEnv;\n\n  // save original process.env\n  beforeAll(() => {\n    originalEnv = { ...process.env };\n    process.env.USE_DB_AUTHENTICATION = \"false\";\n    process.env.SUPABASE_ANON_TOKEN = \"\";\n    process.env.SUPABASE_URL = \"\";\n    process.env.SUPABASE_SERVICE_TOKEN = \"\";\n    process.env.OPENAI_API_KEY = \"\";\n    process.env.BULL_AUTH_KEY = \"\";\n    process.env.PLAYWRIGHT_MICROSERVICE_URL = \"\";\n    process.env.LLAMAPARSE_API_KEY = \"\";\n    process.env.TEST_API_KEY = \"\";\n    process.env.POSTHOG_API_KEY = \"\";\n    process.env.POSTHOG_HOST = \"\";\n  });\n\n  // restore original process.env\n  afterAll(() => {\n    process.env = originalEnv;\n  });\n\n  describe(\"GET /\", () => {\n    it(\"should return Hello, world! message\", async () => {\n      const response = await request(TEST_URL).get(\"/\");\n      expect(response.statusCode).toBe(200);\n      expect(response.text).toContain(\"SCRAPERS-JS: Hello, world! Fly.io\");\n    });\n  });\n\n  describe(\"GET /test\", () => {\n    it(\"should return Hello, world! message\", async () => {\n      const response = await request(TEST_URL).get(\"/test\");\n      expect(response.statusCode).toBe(200);\n      expect(response.text).toContain(\"Hello, world!\");\n    });\n  });\n\n  describe(\"POST /v0/scrape\", () => {\n    it(\"should not require authorization\", async () => {\n      const response = await request(TEST_URL).post(\"/v0/scrape\");\n      expect(response.statusCode).not.toBe(401);\n    });\n\n    it(\"should return an error for a blocklisted URL without requiring authorization\", async () => {\n      const blocklistedUrl = \"https://facebook.com/fake-test\";\n      const response = await request(TEST_URL)\n        .post(\"/v0/scrape\")\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: blocklistedUrl });\n      expect(response.statusCode).toBe(403);\n      expect(response.body.error).toContain(BLOCKLISTED_URL_MESSAGE);\n    });\n\n    it(\"should return a successful response\", async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v0/scrape\")\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: \"https://firecrawl.dev\" });\n      expect(response.statusCode).toBe(200);\n    }, 10000); // 10 seconds timeout\n  });\n\n  describe(\"POST /v0/crawl\", () => {\n    it(\"should not require authorization\", async () => {\n      const response = await request(TEST_URL).post(\"/v0/crawl\");\n      expect(response.statusCode).not.toBe(401);\n    });\n\n    it(\"should return an error for a blocklisted URL\", async () => {\n      const blocklistedUrl = \"https://twitter.com/fake-test\";\n      const response = await request(TEST_URL)\n        .post(\"/v0/crawl\")\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: blocklistedUrl });\n      expect(response.statusCode).toBe(403);\n      expect(response.body.error).toContain(BLOCKLISTED_URL_MESSAGE);\n    });\n\n    it(\"should return a successful response\", async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v0/crawl\")\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: \"https://firecrawl.dev\" });\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"jobId\");\n      expect(response.body.jobId).toMatch(\n        /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/,\n      );\n    });\n  });\n\n  describe(\"POST /v0/crawlWebsitePreview\", () => {\n    it(\"should not require authorization\", async () => {\n      const response = await request(TEST_URL).post(\"/v0/crawlWebsitePreview\");\n      expect(response.statusCode).not.toBe(401);\n    });\n\n    it(\"should return an error for a blocklisted URL\", async () => {\n      const blocklistedUrl = \"https://instagram.com/fake-test\";\n      const response = await request(TEST_URL)\n        .post(\"/v0/crawlWebsitePreview\")\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: blocklistedUrl });\n      expect(response.statusCode).toBe(403);\n      expect(response.body.error).toContain(BLOCKLISTED_URL_MESSAGE);\n    });\n\n    it(\"should return a successful response\", async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v0/crawlWebsitePreview\")\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: \"https://firecrawl.dev\" });\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"jobId\");\n      expect(response.body.jobId).toMatch(\n        /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/,\n      );\n    });\n  });\n\n  describe(\"POST /v0/search\", () => {\n    it(\"should require not authorization\", async () => {\n      const response = await request(TEST_URL).post(\"/v0/search\");\n      expect(response.statusCode).not.toBe(401);\n    });\n\n    it(\"should return no error response with an invalid API key\", async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v0/search\")\n        .set(\"Authorization\", `Bearer invalid-api-key`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({ query: \"test\" });\n      expect(response.statusCode).not.toBe(401);\n    });\n\n    it(\"should return a successful response without a valid API key\", async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v0/search\")\n        .set(\"Content-Type\", \"application/json\")\n        .send({ query: \"test\" });\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"success\");\n      expect(response.body.success).toBe(true);\n      expect(response.body).toHaveProperty(\"data\");\n    }, 20000);\n  });\n\n  describe(\"GET /v0/crawl/status/:jobId\", () => {\n    it(\"should not require authorization\", async () => {\n      const response = await request(TEST_URL).get(\"/v0/crawl/status/123\");\n      expect(response.statusCode).not.toBe(401);\n    });\n\n    it(\"should return Job not found for invalid job ID\", async () => {\n      const response = await request(TEST_URL).get(\n        \"/v0/crawl/status/invalidJobId\",\n      );\n      expect(response.statusCode).toBe(404);\n    });\n\n    it(\"should return a successful response for a valid crawl job\", async () => {\n      const crawlResponse = await request(TEST_URL)\n        .post(\"/v0/crawl\")\n        .set(\"Content-Type\", \"application/json\")\n        .send({ url: \"https://firecrawl.dev\" });\n      expect(crawlResponse.statusCode).toBe(200);\n\n      const response = await request(TEST_URL).get(\n        `/v0/crawl/status/${crawlResponse.body.jobId}`,\n      );\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"status\");\n      expect(response.body.status).toBe(\"active\");\n\n      // wait for 30 seconds\n      await new Promise((r) => setTimeout(r, 30000));\n\n      const completedResponse = await request(TEST_URL).get(\n        `/v0/crawl/status/${crawlResponse.body.jobId}`,\n      );\n      expect(completedResponse.statusCode).toBe(200);\n      expect(completedResponse.body).toHaveProperty(\"status\");\n      expect(completedResponse.body.status).toBe(\"completed\");\n      expect(completedResponse.body).toHaveProperty(\"data\");\n      expect(completedResponse.body.data[0]).toHaveProperty(\"content\");\n      expect(completedResponse.body.data[0]).toHaveProperty(\"markdown\");\n      expect(completedResponse.body.data[0]).toHaveProperty(\"metadata\");\n    }, 60000); // 60 seconds\n  });\n\n  describe(\"GET /is-production\", () => {\n    it(\"should return the production status\", async () => {\n      const response = await request(TEST_URL).get(\"/is-production\");\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"isProduction\");\n    });\n  });\n});\n"]}