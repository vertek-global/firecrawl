{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../../../src/__tests__/e2e_map/index.test.ts"],"names":[],"mappings":";;;;;AAAA,0DAAgC;AAChC,oDAA4B;AAE5B,gBAAM,CAAC,MAAM,EAAE,CAAC;AAChB,MAAM,QAAQ,GAAG,uBAAuB,CAAC;AAEzC,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;IAC5C,EAAE,CAAC,UAAU,CACX,2DAA2D,EAC3D,KAAK,IAAI,EAAE;QACT,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;aACrC,IAAI,CAAC,SAAS,CAAC;aACf,GAAG,CAAC,eAAe,EAAE,UAAU,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;aAC1D,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;aACvC,IAAI,CAAC;YACJ,GAAG,EAAE,uBAAuB;YAC5B,WAAW,EAAE,KAAK;YAClB,MAAM,EAAE,aAAa;SACtB,CAAC,CAAC;QAEL,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC3B,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC9C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC;IACxE,CAAC,EACD,KAAK,CACN,CAAC;IAEF,EAAE,CAAC,UAAU,CACX,yFAAyF,EACzF,KAAK,IAAI,EAAE;QACT,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;aACrC,IAAI,CAAC,SAAS,CAAC;aACf,GAAG,CAAC,eAAe,EAAE,UAAU,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;aAC1D,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;aACvC,IAAI,CAAC;YACJ,GAAG,EAAE,uBAAuB;YAC5B,WAAW,EAAE,KAAK;YAClB,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QAEL,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC3B,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC9C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CACnE,oBAAoB,CACrB,CAAC;IACJ,CAAC,EACD,KAAK,CACN,CAAC;IAEF,EAAE,CAAC,UAAU,CACX,oFAAoF,EACpF,KAAK,IAAI,EAAE;QACT,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;aACrC,IAAI,CAAC,SAAS,CAAC;aACf,GAAG,CAAC,eAAe,EAAE,UAAU,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;aAC1D,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;aACvC,IAAI,CAAC;YACJ,GAAG,EAAE,uBAAuB;YAC5B,WAAW,EAAE,IAAI;SAClB,CAAC,CAAC;QAEL,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC3B,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC9C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CACvE,oBAAoB,CACrB,CAAC;IACJ,CAAC,EACD,KAAK,CACN,CAAC;IAEF,EAAE,CAAC,UAAU,CACX,wEAAwE,EACxE,KAAK,IAAI,EAAE;QACT,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;aACrC,IAAI,CAAC,SAAS,CAAC;aACf,GAAG,CAAC,eAAe,EAAE,UAAU,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;aAC1D,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;aACvC,IAAI,CAAC;YACJ,GAAG,EAAE,uBAAuB;YAC5B,WAAW,EAAE,KAAK;YAClB,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;QAEL,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC3B,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC9C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;IAC7D,CAAC,EACD,KAAK,CACN,CAAC;IAEF,EAAE,CAAC,UAAU,CACX,+EAA+E,EAC/E,KAAK,IAAI,EAAE;QACT,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,QAAQ,CAAC;aACrC,IAAI,CAAC,SAAS,CAAC;aACf,GAAG,CAAC,eAAe,EAAE,UAAU,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;aAC1D,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;aACvC,IAAI,CAAC;YACJ,GAAG,EAAE,yCAAyC;YAC9C,WAAW,EAAE,IAAI;SAClB,CAAC,CAAC;QAEL,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC3B,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC9C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC,EACD,KAAK,CACN,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import request from \"supertest\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\nconst TEST_URL = \"http://127.0.0.1:3002\";\n\ndescribe(\"E2E Tests for Map API Routes\", () => {\n  it.concurrent(\n    \"(feat-search)should return links containing 'smart-crawl'\",\n    async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v1/map\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          url: \"https://firecrawl.dev\",\n          sitemapOnly: false,\n          search: \"smart-crawl\",\n        });\n\n      console.log(response.body);\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"links\");\n      expect(response.body.links.length).toBeGreaterThan(0);\n      expect(response.body.links[0]).toContain(\"firecrawl.dev/smart-crawl\");\n    },\n    60000,\n  );\n\n  it.concurrent(\n    \"(feat-subdomains) should return mapped links for firecrawl.dev with subdomains included\",\n    async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v1/map\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          url: \"https://firecrawl.dev\",\n          sitemapOnly: false,\n          includeSubdomains: true,\n        });\n\n      console.log(response.body);\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"links\");\n      expect(response.body.links.length).toBeGreaterThan(0);\n      expect(response.body.links[response.body.links.length - 1]).toContain(\n        \"docs.firecrawl.dev\",\n      );\n    },\n    60000,\n  );\n\n  it.concurrent(\n    \"(feat-sitemap-only) should return mapped links for firecrawl.dev with sitemap only\",\n    async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v1/map\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          url: \"https://firecrawl.dev\",\n          sitemapOnly: true,\n        });\n\n      console.log(response.body);\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"links\");\n      expect(response.body.links.length).toBeGreaterThan(0);\n      expect(response.body.links[response.body.links.length - 1]).not.toContain(\n        \"docs.firecrawl.dev\",\n      );\n    },\n    60000,\n  );\n\n  it.concurrent(\n    \"(feat-limit) should return mapped links for firecrawl.dev with a limit\",\n    async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v1/map\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          url: \"https://firecrawl.dev\",\n          sitemapOnly: false,\n          limit: 10,\n        });\n\n      console.log(response.body);\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"links\");\n      expect(response.body.links.length).toBeLessThanOrEqual(10);\n    },\n    60000,\n  );\n\n  it.concurrent(\n    \"(feat-sitemap-large) should return more than 1900 links for geekflare sitemap\",\n    async () => {\n      const response = await request(TEST_URL)\n        .post(\"/v1/map\")\n        .set(\"Authorization\", `Bearer ${process.env.TEST_API_KEY}`)\n        .set(\"Content-Type\", \"application/json\")\n        .send({\n          url: \"https://geekflare.com/sitemap_index.xml\",\n          sitemapOnly: true,\n        });\n\n      console.log(response.body);\n      expect(response.statusCode).toBe(200);\n      expect(response.body).toHaveProperty(\"links\");\n      expect(response.body.links.length).toBeGreaterThan(1900);\n    },\n    60000,\n  );\n});\n"]}